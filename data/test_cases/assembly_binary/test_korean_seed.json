{
  "input_data": "; Korean SEED cipher implementation in assembly\n; 128-bit block cipher developed by KISA (Korea Information Security Agency)\n\n.section .data\n; SEED constants and S-boxes\nseed_sbox1: .byte 0xa9, 0x85, 0xd6, 0xd3, 0x54, 0x1d, 0xac, 0x25\n            .byte 0x5d, 0x43, 0x18, 0x1e, 0x51, 0xfc, 0xca, 0x63\n            ; ... (simplified S-box values)\n\nseed_sbox2: .byte 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38\n            .byte 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb\n            ; ... (simplified S-box values)\n\n; SEED key constants (KC values)\nkc_values:  .quad 0x9e3779b9, 0x3c6ef372, 0x78dde6e4, 0xf1bbcdcc\n            .quad 0xe3779b99, 0xc6ef3720, 0x8dde6e40, 0x1bbcdcc8\n\n.section .text\n.global seed_encrypt\n.global seed_key_schedule\n\n; SEED key schedule - generates 32 round keys\nseed_key_schedule:\n    push rbp\n    mov rbp, rsp\n    push rbx\n    push r12\n    push r13\n    push r14\n    push r15\n    \n    mov r12, rdi        ; master key (128-bit)\n    mov r13, rsi        ; round keys output\n    \n    ; Load 128-bit master key into 4 32-bit words\n    mov eax, [r12]      ; K0\n    mov ebx, [r12+4]    ; K1\n    mov ecx, [r12+8]    ; K2\n    mov edx, [r12+12]   ; K3\n    \n    ; Generate 32 round keys (16 rounds x 2 keys each)\n    xor r14, r14        ; round counter\n    \nkey_schedule_loop:\n    cmp r14, 16\n    jge key_schedule_done\n    \n    ; Calculate round key using SEED G function\n    ; RK[2i] = G(K[i], KC[i])\n    ; RK[2i+1] = G(K[i+1], KC[i+1])\n    \n    ; Apply G function to generate round keys\n    push rax\n    push rcx\n    lea rdi, [kc_values + r14*8]\n    call seed_g_function\n    mov [r13 + r14*8], rax      ; Store RK[2i]\n    pop rcx\n    pop rax\n    \n    ; Rotate key values for next round\n    rol eax, 8\n    rol ebx, 3\n    rol ecx, 10\n    rol edx, 1\n    \n    inc r14\n    jmp key_schedule_loop\n    \nkey_schedule_done:\n    pop r15\n    pop r14\n    pop r13\n    pop r12\n    pop rbx\n    pop rbp\n    ret\n\n; SEED encryption function\nseed_encrypt:\n    push rbp\n    mov rbp, rsp\n    push rbx\n    push r12\n    push r13\n    push r14\n    push r15\n    \n    mov r12, rdi        ; plaintext (128-bit)\n    mov r13, rsi        ; round keys\n    mov r14, rdx        ; ciphertext output\n    \n    ; Load plaintext into registers\n    mov eax, [r12]      ; L0\n    mov ebx, [r12+4]    ; R0\n    mov ecx, [r12+8]    ; L1\n    mov edx, [r12+12]   ; R1\n    \n    ; 16 rounds of SEED encryption\n    xor r15, r15        ; round counter\n    \nseed_round_loop:\n    cmp r15, 16\n    jge seed_encrypt_done\n    \n    ; SEED round function\n    ; T0 = R0 ^ F(L0, RK[2i])\n    ; T1 = L0 ^ F(R0, RK[2i+1])\n    \n    ; Apply F function\n    push rax\n    push rbx\n    mov rdi, rax        ; L0\n    mov rsi, [r13 + r15*16]     ; RK[2i]\n    call seed_f_function\n    xor ebx, eax        ; R0 ^ F(L0, RK[2i])\n    \n    ; Swap for next round\n    mov r8d, eax        ; temp = L0\n    mov eax, ebx        ; L0 = R0\n    mov ebx, r8d        ; R0 = temp\n    \n    inc r15\n    jmp seed_round_loop\n    \nseed_encrypt_done:\n    ; Store final ciphertext\n    mov [r14], eax\n    mov [r14+4], ebx\n    mov [r14+8], ecx\n    mov [r14+12], edx\n    \n    pop r15\n    pop r14\n    pop r13\n    pop r12\n    pop rbx\n    pop rbp\n    ret\n\n; SEED F function implementation\nseed_f_function:\n    push rbp\n    mov rbp, rsp\n    \n    ; F function uses two rounds of substitution and permutation\n    ; Input: rdi = 32-bit word, rsi = round key\n    \n    xor edi, esi        ; XOR with round key\n    \n    ; Apply SEED S-boxes\n    movzx eax, dil\n    movzx ebx, byte ptr [seed_sbox1 + rax]\n    \n    movzx eax, di\n    shr eax, 8\n    movzx ecx, byte ptr [seed_sbox2 + rax]\n    \n    ; Combine S-box outputs\n    shl ebx, 8\n    or ebx, ecx\n    mov eax, ebx\n    \n    pop rbp\n    ret",
  "description": "Assembly implementation of Korean SEED cipher with key schedule and encryption functions",
  "expected_analysis_points": [
    "Korean domestic algorithms (SEED, ARIA, HIGHT, LEA, KCDSA, EC-KCDSA, HAS-160, LSH)",
    "symmetric ciphers vulnerable to Grover's algorithm (AES-128, 3DES, DES, RC4)",
    "characteristic patterns of Korean cipher implementations"
  ],
  "vulnerable_algorithms_present": ["SEED-128"],
  "algorithm_categories": ["korean_algorithms", "grover_vulnerable"],
  "korean_algorithms": ["SEED"],
  "difficulty": "very_hard",
  "tags": ["korean", "seed", "assembly", "kisa", "128-bit"]
}