{
  "input_data": "# Nginx TLS Configuration with Vulnerable Settings\n# /etc/nginx/sites-available/secure-banking.conf\n\nserver {\n    listen 443 ssl http2;\n    server_name secure-banking.example.com;\n    \n    # SSL Certificate Configuration (RSA - Quantum Vulnerable)\n    ssl_certificate /etc/ssl/certs/banking-rsa-2048.crt;\n    ssl_certificate_key /etc/ssl/private/banking-rsa-2048.key;\n    ssl_trusted_certificate /etc/ssl/certs/ca-bundle-rsa.crt;\n    \n    # TLS Protocol Configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    \n    # Cipher Suite Configuration - includes quantum vulnerable algorithms\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA;\n    \n    # Elliptic Curves (Quantum Vulnerable)\n    ssl_ecdh_curve secp384r1:secp256r1;\n    \n    # DH Parameters (potentially weak)\n    ssl_dhparam /etc/ssl/dhparam-2048.pem;\n    \n    # Session Configuration\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n    \n    # OCSP Stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n    \n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    \n    # Application Configuration\n    location / {\n        proxy_pass http://banking_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Client Certificate Authentication (RSA based)\n        ssl_verify_client on;\n        ssl_client_certificate /etc/ssl/certs/client-ca-rsa.crt;\n    }\n    \n    # Legacy API endpoint with weaker security\n    location /legacy-api/ {\n        # Allow weaker ciphers for legacy clients\n        ssl_ciphers HIGH:MEDIUM:!aNULL:!MD5:!RC4:!3DES;\n        proxy_pass http://legacy_backend;\n    }\n    \n    # Korean clients support (if Korean crypto modules available)\n    location /kr/ {\n        # Custom cipher suite for Korean algorithms\n        # ssl_ciphers SEED-SHA:ARIA-GCM-SHA384:$ssl_ciphers;\n        proxy_pass http://korean_backend;\n        \n        # Korean client certificate validation\n        ssl_client_certificate /etc/ssl/certs/kisa-ca.crt;\n    }\n}\n\n# Legacy server block for older clients\nserver {\n    listen 8443 ssl;\n    server_name legacy-banking.example.com;\n    \n    # Old RSA certificate with weaker key\n    ssl_certificate /etc/ssl/certs/legacy-rsa-1024.crt;\n    ssl_certificate_key /etc/ssl/private/legacy-rsa-1024.key;\n    \n    # Allow older protocols and weak ciphers\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ALL:!aNULL:!eNULL:!EXPORT:!LOW:!RC4:!DES:!3DES:!MD5:!PSK;\n    \n    # Weak DH parameters\n    ssl_dhparam /etc/ssl/dhparam-1024.pem;\n    \n    location / {\n        return 301 https://secure-banking.example.com$request_uri;\n    }\n}\n\n# Configuration for Korean Government Systems\nserver {\n    listen 9443 ssl;\n    server_name gov-crypto.example.kr;\n    \n    # KCDSA certificate (if supported)\n    ssl_certificate /etc/ssl/certs/gov-kcdsa.crt;\n    ssl_certificate_key /etc/ssl/private/gov-kcdsa.key;\n    \n    # Korean cryptographic standards\n    ssl_protocols TLSv1.2 TLSv1.3;\n    \n    # Prefer Korean algorithms when available\n    # ssl_ciphers ARIA-256-GCM-SHA384:SEED-128-GCM-SHA256:$ssl_ciphers;\n    \n    # Korean elliptic curves preference\n    ssl_ecdh_curve brainpoolP256r1:secp256r1;\n    \n    location / {\n        proxy_pass http://government_backend;\n        \n        # Require Korean government certificates\n        ssl_verify_client on;\n        ssl_client_certificate /etc/ssl/certs/korean-gov-ca.crt;\n    }\n}\n\n# SSL/TLS Logging Configuration\nlog_format ssl_detailed '$remote_addr - $remote_user [$time_local] '\n                       '\"$request\" $status $bytes_sent '\n                       '\"$http_referer\" \"$http_user_agent\" '\n                       'rt=$request_time uct=\"$upstream_connect_time\" '\n                       'uht=\"$upstream_header_time\" urt=\"$upstream_response_time\" '\n                       'ssl_protocol=$ssl_protocol ssl_cipher=$ssl_cipher '\n                       'ssl_session_reused=$ssl_session_reused ssl_server_name=$ssl_server_name';\n\naccess_log /var/log/nginx/ssl_access.log ssl_detailed;\nerror_log /var/log/nginx/ssl_error.log warn;",
  "description": "Nginx TLS configuration showing RSA certificates, quantum-vulnerable cipher suites, and Korean cryptographic algorithm support",
  "expected_analysis_points": [
    "SSL/TLS configurations with quantum-vulnerable certificates and cipher suites",
    "web server cipher suite configurations and protocol settings",
    "Korean government cryptographic standards and certificate validation"
  ],
  "vulnerable_algorithms_present": ["RSA-1024", "RSA-2048", "ECDHE-RSA", "DHE-RSA", "ECDHE-ECDSA", "SECP256R1", "SECP384R1", "DH-1024", "DH-2048", "KCDSA"],
  "algorithm_categories": ["shor_vulnerable", "korean_algorithms"],
  "korean_algorithms": ["KCDSA"],
  "difficulty": "medium",
  "tags": ["nginx", "tls", "rsa", "ecdsa", "config", "korean-gov"]
}