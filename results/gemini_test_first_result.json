{
  "benchmark_info": {
    "timestamp": "2025-10-29T15:15:04.625489",
    "test_models": [
      "gemini-2.0-flash"
    ],
    "pqc_base_url": "http://localhost:8000",
    "ollama_base_url": "http://localhost:11434",
    "total_tests": 398
  },
  "results": [
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "AdvancedComputationalFramework",
      "file_name": "AdvancedComputationalFramework.rb",
      "response_time": 2.3826780319213867,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports 'openssl', which can be used to implement RSA, DSA, ECDSA, and ECDH. These algorithms are vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace vulnerable algorithms with post-quantum cryptographic (PQC) alternatives like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Ensure proper key management and secure implementation of PQC algorithms.",
        "evidence": "The 'require openssl' statement indicates the potential use of non-quantum-resistant algorithms.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "AdvancedComputationalFramework",
      "file_name": "AdvancedComputationalFramework.rb",
      "response_time": 3.551625967025757,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: Weak Hash Functions (Evidence: require 'digest')",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Random Number Generator (Evidence: require 'securerandom')",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: Legacy Cryptographic Libraries (Evidence: require 'openssl')",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code uses the 'openssl' and 'digest' libraries, indicating potential use of legacy cryptographic algorithms and weak hash functions. It also uses 'securerandom' for random number generation. However, the specific algorithms used are not explicitly identified in the provided code snippet."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "AdvancedCryptographicOrchestrator",
      "file_name": "AdvancedCryptographicOrchestrator.java",
      "response_time": 3.0073530673980713,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports java.security.*, java.security.spec.*, javax.crypto.*, and javax.crypto.spec.*, which are commonly used for RSA and other classical cryptographic algorithms vulnerable to quantum attacks. The presence of BigInteger and the constant SECURITY_FACTOR (65537) further suggests potential RSA usage.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace vulnerable algorithms (like RSA) with post-quantum cryptographic alternatives such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Ensure proper key sizes and parameter selection for the chosen PQC algorithms.",
        "evidence": "import java.security.*; import java.security.spec.*; import javax.crypto.*; import javax.crypto.spec.*; import java.math.BigInteger;",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "AdvancedCryptographicOrchestrator",
      "file_name": "AdvancedCryptographicOrchestrator.java",
      "response_time": 3.6804280281066895,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: Elliptic Curve Cryptography (Evidence: KeyPairGenerator.getInstance(\"EllipticCurve\"), line 72)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS#1 v1.5 (Evidence: DATA_TRANSFORMATION_PROTOCOL = \"PKCS1Padding\", line 20)",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses Elliptic Curve Cryptography and PKCS#1 v1.5 padding, which are potentially vulnerable. The code uses `KeyPairGenerator.getInstance(\"EllipticCurve\")` and defines `DATA_TRANSFORMATION_PROTOCOL` as `PKCS1Padding`."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "AdvancedMathematicalFramework",
      "file_name": "AdvancedMathematicalFramework.rs",
      "response_time": 2.767096996307373,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses `num_bigint` which can be used to implement RSA or similar large integer based crypto algorithms. The presence of `RandBigInt` and `BigUint` suggests potential RSA key generation or similar operations.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "DH"
        ],
        "recommendations": "Replace vulnerable algorithms with post-quantum alternatives like CRYSTALS-Kyber, CRYSTALS-Dilithium, or Falcon. Ensure proper key sizes and parameter selection for the chosen PQC algorithms.",
        "evidence": "Use of `num_bigint`, `RandBigInt`, and `BigUint` indicates potential RSA or similar large integer based crypto algorithm implementation.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "AdvancedMathematicalFramework",
      "file_name": "AdvancedMathematicalFramework.rs",
      "response_time": 3.6825389862060547,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: use sha2::{HASH_256, Digest};)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "SHA-256 is detected. While SHA-256 itself isn't considered 'weak', its security can be reduced if used improperly or with insufficient entropy. Further analysis is needed to determine the specific usage and potential vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "AutomotiveSecurityUnit",
      "file_name": "AutomotiveSecurityUnit.cpp",
      "response_time": 3.6897997856140137,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom Feistel cipher with a 16-round structure and a custom S-box. While not directly RSA, DSA, or ECDSA, the custom cipher's security is questionable and likely vulnerable to classical attacks, making it a weak point that could be exploited even before quantum computers become a threat. The key size is 16 bytes (128 bits), which is a common key size for symmetric ciphers, but the custom design raises concerns. The Feistel structure itself is not inherently quantum-vulnerable, but the custom S-box and key schedule are likely weak.",
        "detected_algorithms": [
          "Custom Feistel Cipher"
        ],
        "recommendations": "Replace the custom Feistel cipher with a well-vetted, quantum-resistant symmetric cipher like AES-256 or a post-quantum cryptography (PQC) algorithm such as CRYSTALS-Kyber or CRYSTALS-Dilithium. Ensure proper key management and consider using a hardware security module (HSM) for key storage.",
        "evidence": "The code defines a `CompactFeistelCipher` class with a custom S-box and key schedule. The `set_key` function and the `initialize_sbox` function indicate a custom implementation of a symmetric cipher.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "AutomotiveSecurityUnit",
      "file_name": "AutomotiveSecurityUnit.cpp",
      "response_time": 3.270940065383911,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "BankingSecurityModule",
      "file_name": "BankingSecurityModule.java",
      "response_time": 2.539390802383423,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher with characteristics resembling SEED or ARIA, both of which are not quantum-resistant. The presence of S-boxes (SS0, SS1), a fixed block size (BLOCK_SIZE = 16), and a key schedule suggest a classical block cipher construction.",
        "detected_algorithms": [
          "Custom Block Cipher (SEED/ARIA-like)"
        ],
        "recommendations": "Replace the custom block cipher with a post-quantum cryptography (PQC) algorithm like AES-GCM with a key size of 256 bits or a NIST-approved PQC algorithm such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Ensure proper implementation and integration of the chosen PQC algorithm.",
        "evidence": "Presence of S-boxes (SS0, SS1), fixed block size (BLOCK_SIZE = 16), key schedule, and round-based operations.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "BankingSecurityModule",
      "file_name": "BankingSecurityModule.java",
      "response_time": 3.296257972717285,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure random number generator (Evidence: import java.security.SecureRandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected the use of java.security.SecureRandom, which might be vulnerable depending on its configuration and usage."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "BlockchainCryptographyEngine",
      "file_name": "BlockchainCryptographyEngine.java",
      "response_time": 3.0851569175720215,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements elliptic curve cryptography, specifically related to ECDSA, which is vulnerable to quantum attacks. The code defines curve parameters (CURVE_P, CURVE_A, CURVE_B, CURVE_N), ECPoint class, and key generation logic that involves scalar multiplication. These are structural indicators of ECDSA.",
        "detected_algorithms": [
          "ECDSA"
        ],
        "recommendations": "Replace ECDSA with post-quantum cryptographic algorithms like CRYSTALS-Dilithium or Falcon for digital signatures and CRYSTALS-Kyber for key exchange.",
        "evidence": "The code defines elliptic curve parameters (CURVE_P, CURVE_A, CURVE_B, CURVE_N), ECPoint class, and key generation logic that involves scalar multiplication (privateKey * G).",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "BlockchainCryptographyEngine",
      "file_name": "BlockchainCryptographyEngine.java",
      "response_time": 4.692167043685913,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: ECPoint class, pointAdd, pointDouble, scalarMultiply methods implementing elliptic curve operations)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: SecureRandom (Evidence: randomGenerator = new SecureRandom())",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements Elliptic Curve Cryptography (ECC) using the ECPoint class and associated methods. It also uses SecureRandom for key generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "CorporateSecurityOrchestrator",
      "file_name": "CorporateSecurityOrchestrator.py",
      "response_time": 2.0503618717193604,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports the `cryptography` library and uses `ec` from `cryptography.hazmat.primitives.asymmetric`, which can be used to implement ECDSA. ECDSA is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "ECDSA"
        ],
        "recommendations": "Replace ECDSA with a post-quantum signature algorithm like Ed25519 or CRYSTALS-Dilithium.",
        "evidence": "from cryptography.hazmat.primitives.asymmetric import ec",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "CorporateSecurityOrchestrator",
      "file_name": "CorporateSecurityOrchestrator.py",
      "response_time": 4.520563840866089,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: from cryptography.hazmat.primitives.asymmetric import asymmetric_cipher as modular_arithmetic, line 16)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: from cryptography.hazmat.primitives.asymmetric import ec, line 16)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: AES (Evidence: from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, line 17)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: import hashlib, line 8, from cryptography.hazmat.primitives import hashes, line 16)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: padding (Evidence: from cryptography.hazmat.primitives.asymmetric import padding, line 16)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets (Evidence: import secrets, line 10)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses RSA, ECC, AES, SHA-256, padding schemes, and the secrets module. These algorithms, while standard, may have vulnerabilities depending on their specific configuration and usage. RSA, ECC, and AES are vulnerable to quantum attacks. SHA-256 is not directly vulnerable to Grover's algorithm but can be weakened in specific contexts. The padding schemes need to be carefully implemented to avoid vulnerabilities. The secrets module is generally considered secure for random number generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "CorporateVPNManager",
      "file_name": "CorporateVPNManager.java",
      "response_time": 2.4423890113830566,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom Feistel cipher with a fixed key length and S-box, which is likely vulnerable to classical cryptanalysis. The use of a custom cipher instead of established, quantum-resistant algorithms makes it vulnerable.",
        "detected_algorithms": [
          "Custom Feistel Cipher"
        ],
        "recommendations": "Replace the custom Feistel cipher with a well-vetted, quantum-resistant algorithm such as CRYSTALS-Kyber or SABER. Ensure proper key management and consider using authenticated encryption modes.",
        "evidence": "The code defines a custom Feistel cipher implementation with a fixed key length (VPN_KEY_LENGTH = 24) and a custom S-box (VPN_SBOX). The generateTripleKeySchedule and vpnFeistelFunction methods implement the core logic of this cipher.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "CorporateVPNManager",
      "file_name": "CorporateVPNManager.java",
      "response_time": 4.911550045013428,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: DES (Evidence: The code implements a Feistel network with triple encryption, which is similar to 3DES. The `vpnFeistelFunction` and `encryptFeistelBlock`/`decryptFeistelBlock` methods suggest a DES-like implementation. The comment `// LEGACY_CIPHER-like Feistel function for VPN encryption` also indicates a legacy cipher.)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: `java.security.SecureRandom` is used, but without proper seeding or consideration for entropy, it could be predictable, especially if the `masterKey` used to initialize the `CorporateVPNManager` is weak.)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "DETECTED: Obfuscated DES (Evidence: The `vpnFeistelFunction` and `encryptFeistelBlock`/`decryptFeistelBlock` methods implement a custom Feistel network, which is an obfuscated implementation of a DES-like algorithm. The S-box `VPN_SBOX` is a custom S-box, further obfuscating the algorithm.)",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in DES-like algorithm (Evidence: The custom Feistel implementation in `vpnFeistelFunction` and `encryptFeistelBlock`/`decryptFeistelBlock` may have implementation-specific vulnerabilities due to the custom S-box and key schedule. The triple encryption with alternating encryption and decryption (`encryptVPNPacket`) might introduce vulnerabilities if not implemented correctly.)"
        },
        "confidence_score": 0.75,
        "summary": "The code implements a custom Feistel network resembling DES, which is vulnerable to Grover's algorithm. It also uses `java.security.SecureRandom` which may be insecure if not properly seeded. The custom Feistel implementation may have implementation-specific vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "DigitalCertificateValidator",
      "file_name": "DigitalCertificateValidator.java",
      "response_time": 2.312166929244995,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses modular arithmetic with BigInteger, resembling RSA key generation. The use of small primes (61 and 53) and a fixed exponent (65537) suggests a simplified RSA implementation, which is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code contains BigInteger operations for key generation, including calculating productN, exponentE, and exponentD, which are characteristic of RSA.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "DigitalCertificateValidator",
      "file_name": "DigitalCertificateValidator.java",
      "response_time": 4.440031290054321,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: ModularKeyData class generates a key pair using small primes and calculates exponentD, which is vulnerable to factorization attacks. Also, the key size is defined as 1024 bits, which is considered weak. The generateCertificateSignature and verifyCertificateSignature methods use modular exponentiation, indicating RSA usage.)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: Weak Hash Function (Evidence: HASH_ALGORITHM is set to \"MessageDigest-1\", which could be a weak or deprecated hash algorithm. Need to check the actual implementation of MessageDigest-1 to confirm. The code uses hashFunction.digest() to hash certificate data.)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in RSA (Evidence: The RSA implementation uses hardcoded small primes (61 and 53) for key generation, making it extremely vulnerable to factorization. The key size of 1024 is also weak.)"
        },
        "confidence_score": 0.9,
        "summary": "The code uses a vulnerable RSA implementation with small, hardcoded primes and a 1024-bit key size. It also uses a potentially weak hash algorithm (MessageDigest-1). The RSA implementation is vulnerable to factorization attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "DistributedComputationEngine",
      "file_name": "DistributedComputationEngine.py",
      "response_time": 2.2041549682617188,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code contains a DigestProcessor class that implements a custom digest algorithm. The initialization of the state with specific hexadecimal values, the chunk processing, and the padding scheme are indicative of a SHA-2 family hash function implementation. SHA-2 is not quantum-resistant.",
        "detected_algorithms": [
          "SHA-2"
        ],
        "recommendations": "Replace SHA-2 with a quantum-resistant hash function such as SHA-3 or BLAKE3.",
        "evidence": "The DigestProcessor class implements a custom digest algorithm with state initialization, chunk processing, and padding similar to SHA-2.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "DistributedComputationEngine",
      "file_name": "DistributedComputationEngine.py",
      "response_time": 4.5990800857543945,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: The code implements a digest algorithm that includes padding and processing steps similar to SHA-256. The _process_chunk method and the use of _rotr and _get_k_constant functions are indicative of SHA-256. Specifically, the constants used in the state initialization (0x6a09e667, 0xbb67ae85, etc.) are the initial hash values for SHA-256. Also, the message schedule calculation and the main loop with S0, S1, ch, and maj functions are characteristic of SHA-256.)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements a digest algorithm similar to SHA-256, which is vulnerable to length extension attacks but not directly broken by quantum computers. However, SHA-256 is considered a weak hash function in the context of post-quantum cryptography due to its use in digital signatures."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "DistributedComputeManager",
      "file_name": "DistributedComputeManager.js",
      "response_time": 2.6615419387817383,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports the 'crypto' module, which can be used to implement non-quantum-resistant algorithms like RSA, DSA, ECDSA, and ECDH. While the code snippet doesn't explicitly show the use of these algorithms, the presence of the 'crypto' module and the context of distributed computing for mathematical operations suggest a high likelihood of their usage.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace vulnerable cryptographic algorithms with post-quantum alternatives like CRYSTALS-Kyber, CRYSTALS-Dilithium, or Falcon. Ensure proper key management and secure implementation practices.",
        "evidence": "The code imports the 'crypto' module, which is commonly used for implementing classical cryptographic algorithms.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "DistributedComputeManager",
      "file_name": "DistributedComputeManager.js",
      "response_time": 2.866309881210327,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "EnterpriseDataSecurityFramework",
      "file_name": "EnterpriseDataSecurityFramework.c",
      "response_time": 2.6227259635925293,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code defines constants and data structures indicative of RSA usage, specifically LARGE_PRIME_MODULUS_BITS (2048) and SMALL_PRIME_EXPONENT (65537). These constants, along with the mention of large integer arithmetic, strongly suggest the implementation of RSA or a similar algorithm vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber or NTRU.",
        "evidence": "The presence of LARGE_PRIME_MODULUS_BITS (2048) and SMALL_PRIME_EXPONENT (65537) constants, along with the mention of large integer arithmetic, are strong indicators of RSA usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "EnterpriseDataSecurityFramework",
      "file_name": "EnterpriseDataSecurityFramework.c",
      "response_time": 4.093942880630493,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: g_integer_ctx->bit_length = LARGE_PRIME_MODULUS_BITS, generate_prime_factors function call)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: elliptic_curve_point_multiplication function call, g_polynomial_ctx->productN = 0xFFFFFFFF00000001ULL; // P-256 prime)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "The code contains implementations of RSA and ECC. The RSA key size is determined by LARGE_PRIME_MODULUS_BITS, which is set to 2048. The ECC implementation appears to be using the P-256 curve."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "EnterpriseSecurityGateway",
      "file_name": "EnterpriseSecurityGateway.java",
      "response_time": 2.4050228595733643,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses BigInteger for modular exponentiation and prime number generation, suggesting RSA-based cryptography with a key size of 2048 bits. RSA is vulnerable to Shor's algorithm on a quantum computer.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code uses BigInteger for prime number generation and modular exponentiation (message.modPow(exponentE, modulus)), which are core operations in RSA.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "EnterpriseSecurityGateway",
      "file_name": "EnterpriseSecurityGateway.java",
      "response_time": 4.14474081993103,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: LargeIntegerProcessor.generateKeyMaterial uses prime number generation and modular exponentiation, exponentE = 65537)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: PolynomialProcessor class and performCurveOperations method)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: java.security.SecureRandom is instantiated but may not be properly seeded or used)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "RSA and ECC implementations detected. A SecureRandom instance is used, but its proper seeding and usage are uncertain. No specific symmetric ciphers or hash functions are identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "HardwareSecurity",
      "file_name": "HardwareSecurity.java",
      "response_time": 2.928983211517334,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code uses random number generation for key creation, which is not inherently quantum-vulnerable. However, the context mentions RSA key generation patterns and the absence of specific cryptographic algorithms makes it difficult to assess the vulnerability definitively. The use of a 160-bit hash function (DigestFunction160Hash) is also a potential area of concern, as it might be used in conjunction with a vulnerable signature scheme.",
        "detected_algorithms": [],
        "recommendations": "Review the implementation of DigestFunction160Hash and any signature schemes used in conjunction with it. Consider replacing the hash function with a SHA-256 or SHA-3 based alternative. If RSA, DSA, ECDSA, or ECDH are used elsewhere in the system, replace them with post-quantum alternatives like CRYSTALS-Kyber, CRYSTALS-Dilithium, or Falcon.",
        "evidence": "The code initializes endorsementKey and storageRootKey using SecureRandom, which could be used with vulnerable algorithms elsewhere.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "HardwareSecurity",
      "file_name": "HardwareSecurity.java",
      "response_time": 3.419205904006958,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-1 (Evidence: DigestFunction160Hash function is used, which is likely a SHA-1 implementation, although not explicitly stated. The function name suggests a 160-bit hash, which is characteristic of SHA-1.)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "SHA-1 is potentially used via the DigestFunction160Hash function. Further investigation is needed to confirm if DigestFunction160Hash is indeed SHA-1."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "IoTDeviceSecurityController",
      "file_name": "IoTDeviceSecurityController.go",
      "response_time": 2.8130879402160645,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code does not directly use RSA, DSA, ECDSA, or ECDH. However, the custom cryptographic implementations (CompactCipherEngine, StreamProcessor, DigestCalculator, KeyManager) may have vulnerabilities if not designed and implemented correctly. The use of fixed-size blocks (CompactBlockSize = 8) and keys (LightweightKeySize = 10) raises concerns about security strength.",
        "detected_algorithms": [],
        "recommendations": "Replace custom crypto with well-vetted post-quantum cryptographic libraries like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Also, avoid using custom cryptographic implementations and instead rely on standard, well-vetted libraries. Increase key sizes to at least 128 bits.",
        "evidence": "The code defines custom cryptographic components (CompactCipherEngine, StreamProcessor, DigestCalculator, KeyManager) which could be vulnerable if not implemented correctly.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "IoTDeviceSecurityController",
      "file_name": "IoTDeviceSecurityController.go",
      "response_time": 3.635880947113037,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure random number generator (Evidence: crypto/rand package import)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code uses the `crypto/rand` package, which, while generally considered secure, might be vulnerable if not properly seeded or if its output is predictable in the specific context of the IoT device. The code also implements a custom compact cipher, stream processor, and digest calculator, which may contain vulnerabilities due to their custom nature and lack of established security analysis. The key derivation function within the KeyManager also warrants further scrutiny."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "LegacyPKISystem",
      "file_name": "LegacyPKISystem.java",
      "response_time": 2.4570419788360596,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements DSA (Digital Signature Algorithm) for digital signatures. DSA is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "DSA"
        ],
        "recommendations": "Replace DSA with a post-quantum signature algorithm like CRYSTALS-Dilithium or Falcon.",
        "evidence": "The code uses BigInteger and SecureRandom to generate DSA parameters (p, q, g) and key pairs. The generateDSAParameters() and generateKeyPair() methods indicate DSA implementation.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "LegacyPKISystem",
      "file_name": "LegacyPKISystem.java",
      "response_time": 3.9934239387512207,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: DSA (Evidence: DSASignature class, signMessage and verifySignature methods)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure random number generators (Evidence: java.security.SecureRandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in quantum-vulnerable algorithms (Evidence: Simplified DSA parameter generation, fixed prime size, potential bias in random number generation for DSA parameters)",
          "digest_function_160_hash": "DETECTED: DigestFunction160Hash (Evidence: DigestFunction160Hash function call in signMessage and verifySignature)"
        },
        "confidence_score": 0.75,
        "summary": "DSA implementation detected with potential vulnerabilities in parameter generation and reliance on SecureRandom. A custom DigestFunction160Hash is used, which may be vulnerable."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "MathematicalTransformEngine",
      "file_name": "MathematicalTransformEngine.java",
      "response_time": 2.0471949577331543,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses LargeNumberProcessor which likely implements RSA with 2048-bit key size, making it vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber or other NIST-approved PQC algorithms.",
        "evidence": "LARGE_NUMBER_PRECISION = 2048; LargeNumberProcessor class",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "MathematicalTransformEngine",
      "file_name": "MathematicalTransformEngine.java",
      "response_time": 2.9792609214782715,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "MediaStreamProtection",
      "file_name": "MediaStreamProtection.java",
      "response_time": 2.7543392181396484,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a stream cipher with a key scheduling algorithm (KSA) and pseudo-random generation. The stream cipher implementation is vulnerable to various attacks and is not quantum-resistant. The code also uses a custom stream cipher which is generally discouraged.",
        "detected_algorithms": [
          "Custom Stream Cipher"
        ],
        "recommendations": "Replace the custom stream cipher with a well-vetted, quantum-resistant authenticated encryption algorithm like AES-GCM or ChaCha20-Poly1305. Ensure proper key management and IV generation.",
        "evidence": "The code implements a custom stream cipher with KSA and PRGA, which is not quantum-resistant and potentially vulnerable.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "MediaStreamProtection",
      "file_name": "MediaStreamProtection.java",
      "response_time": 3.1714282035827637,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: RC4 (Evidence: StreamCipher class implements RC4-like keystream generation)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code contains a StreamCipher class that implements RC4-like keystream generation, which is vulnerable to Grover's algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "QuantumResistantMessaging",
      "file_name": "QuantumResistantMessaging.java",
      "response_time": 2.330871820449829,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a lattice-based key exchange, which is considered post-quantum cryptography and is not vulnerable to known quantum attacks.",
        "detected_algorithms": [],
        "recommendations": "While the current implementation appears to be post-quantum, ensure that the parameters (LATTICE_DIMENSION, LATTICE_MODULUS, NOISE_PARAMETER) are chosen according to established security standards for lattice-based cryptography to provide adequate security margins. Regularly review and update the implementation based on the latest research in post-quantum cryptography.",
        "evidence": "The code implements a lattice-based key exchange, which is a post-quantum cryptographic algorithm.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "QuantumResistantMessaging",
      "file_name": "QuantumResistantMessaging.java",
      "response_time": 3.506809711456299,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: java.security.SecureRandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code uses java.security.SecureRandom, which, while intended for cryptographic purposes, may have implementation-specific vulnerabilities or be seeded improperly, leading to predictability. No other vulnerable algorithms were detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "QuantumSafeTransitionManager",
      "file_name": "QuantumSafeTransitionManager.cpp",
      "response_time": 2.301077127456665,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses OpenSSL, which can be configured to use RSA with a 2048-bit modulus size, making it vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Migrate to post-quantum cryptographic algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Ensure proper key management and hybrid approaches during the transition.",
        "evidence": "#include <openssl/bn.h>, #include <openssl/evp.h>, static constexpr int LEGACY_MODULUS_SIZE = 2048;",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "QuantumSafeTransitionManager",
      "file_name": "QuantumSafeTransitionManager.cpp",
      "response_time": 4.506959915161133,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 4,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: detectIntegerFactorizationUsage function checks for LEGACY_MODULUS_SIZE, isCompositeNumber, and hasSmallPublicExponent, suggesting RSA usage)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: detectDiscreteLogarithmUsage function and CURVE_PARAMETER_SIZE constant suggest ECC usage)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: Discrete Logarithm (Evidence: DiscreteLogarithmEngine class and detectDiscreteLogarithmUsage function)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: Symmetric Cipher (Evidence: SymmetricTransformEngine class and detectSymmetricTransformUsage function, SYMMETRIC_BLOCK_SIZE constant)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "DETECTED: Hybrid System (Evidence: QuantumSafeTransitionManager class and performHybridMigration function)",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: OpenSSL (Evidence: #include statements for openssl/bn.h, openssl/evp.h, openssl/crypto.h, openssl/rand.h, openssl/bio.h)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses OpenSSL and implements RSA, ECC, and symmetric ciphers, which are vulnerable to quantum attacks. It also uses a hybrid approach for migration to quantum-resistant algorithms. The code includes checks for legacy modulus sizes and curve parameters, indicating potential vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "SecureChatApplication",
      "file_name": "SecureChatApplication.java",
      "response_time": 2.024914264678955,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a stream cipher based on ChaCha20, which is considered relatively safe against quantum attacks.",
        "detected_algorithms": [
          "ChaCha20"
        ],
        "recommendations": "While ChaCha20 is currently considered relatively safe, consider migrating to post-quantum cryptography (PQC) algorithms like CRYSTALS-Kyber for long-term security.",
        "evidence": "The code implements quarterRound and initializeStreamState functions, which are characteristic of ChaCha20.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "SecureChatApplication",
      "file_name": "SecureChatApplication.java",
      "response_time": 3.0404489040374756,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "SecureCloudStorage",
      "file_name": "SecureCloudStorage.java",
      "response_time": 3.1789968013763428,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher that resembles AES. While AES itself is considered relatively safe against near-term quantum attacks (especially with 256-bit keys), the custom implementation might have vulnerabilities and is not a post-quantum cryptographic algorithm. The presence of an S-box and round key generation suggests AES-like operations, which are symmetric and thus not the primary target for quantum attacks, but the custom implementation raises concerns.",
        "detected_algorithms": [
          "AES"
        ],
        "recommendations": "Replace the custom block cipher implementation with a well-vetted, standardized, and post-quantum cryptographic algorithm like CRYSTALS-Kyber or NTRU. If AES is necessary, use a standard library implementation (e.g., javax.crypto.Cipher) with a 256-bit key.",
        "evidence": "The code defines constants like BLOCK_SIZE, KEY_SIZE, and IV_SIZE, and includes an SBOX, round key generation, and other operations characteristic of AES-like block ciphers. The KEY_SIZE is set to 32 (256-bit), which is a recommended key size for AES.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "SecureCloudStorage",
      "file_name": "SecureCloudStorage.java",
      "response_time": 3.072911024093628,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: SecureRandom (Evidence: import java.security.SecureRandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "SecureRandom is used, but no other vulnerable algorithms are explicitly detected based on library imports or function calls."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "SecureTransactionProcessor",
      "file_name": "SecureTransactionProcessor.go",
      "response_time": 2.661691904067993,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports 'crypto/rand' and 'crypto/hash_256', which are often used in conjunction with RSA, DSA, or ECDSA for key generation, signing, or encryption. While the code doesn't explicitly use these algorithms, the presence of these imports suggests a high likelihood of their usage elsewhere in the project, making it vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA"
        ],
        "recommendations": "Replace RSA, DSA, and ECDSA with post-quantum cryptographic alternatives like CRYSTALS-Kyber (key exchange), CRYSTALS-Dilithium (digital signatures), or Falcon (digital signatures).",
        "evidence": "import \"crypto/rand\", import \"crypto/hash_256\"",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "SecureTransactionProcessor",
      "file_name": "SecureTransactionProcessor.go",
      "response_time": 3.5774669647216797,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: import \"crypto/hash_256\")",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: rand (Evidence: import \"crypto/rand\")",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "SHA-256 and a random number generator (rand) are detected. SHA-256 is not considered weak unless used with reduced security. The 'rand' package should be reviewed for its suitability in cryptographic applications."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "StealthCryptographicLibrary",
      "file_name": "StealthCryptographicLibrary.py",
      "response_time": 2.4605958461761475,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code imports `cryptography.hazmat.primitives.asymmetric.ec` which is used for Elliptic Curve Cryptography (ECC) operations. ECC, including ECDSA and ECDH, is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace ECDSA and ECDH with quantum-resistant alternatives like CRYSTALS-Dilithium and CRYSTALS-Kyber respectively.",
        "evidence": "from cryptography.hazmat.primitives.asymmetric import ec as curve_operations",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "StealthCryptographicLibrary",
      "file_name": "StealthCryptographicLibrary.py",
      "response_time": 4.872020959854126,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 6,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: from cryptography.hazmat.primitives.asymmetric import asymmetric_cipher as modular_arithmetic)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC/ECDSA/ECDH (Evidence: from cryptography.hazmat.primitives.asymmetric import ec as curve_operations)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: DSA/DH/ElGamal (Evidence: from cryptography.hazmat.primitives.asymmetric import digital_signature as discrete_log)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "DETECTED: Korean Algorithms (Evidence: self._korean_algorithm_provider = KoreanAlgorithmProvider())",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: AES/3DES/DES/RC4 (Evidence: from cryptography.hazmat.primitives.ciphers import Cipher, algorithms as block_ciphers)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: from cryptography.hazmat.primitives import hashes as digest_functions)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Random Number Generator (Evidence: import secrets)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "DETECTED: Obfuscated Cryptographic Operations (Evidence: Advanced cryptographic operations disguised as generic data processing, Uses sophisticated obfuscation and indirection to hide algorithm implementations)",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: Legacy Block Cipher (Evidence: moLegacyBlockCipheras cipher_moLegacyBlockCipher)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses RSA, ECC/ECDSA/ECDH, DSA/DH/ElGamal, AES/3DES/DES/RC4, SHA-256, and a random number generator. It also includes obfuscated cryptographic operations and a Korean algorithm provider. The code uses cryptography.hazmat, which is generally considered a good practice, but the obfuscation makes it difficult to assess the specific vulnerabilities without further analysis."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "TelecommunicationsSecurityHub",
      "file_name": "TelecommunicationsSecurityHub.java",
      "response_time": 3.4224929809570312,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses potentially vulnerable cryptographic components. While specific algorithms like RSA, DSA, or ECDSA are not explicitly named in the provided snippet, the presence of `StreamCipherEngine`, `MessageDigestProcessor`, `LightweightBlockCipher`, and `KeyScheduler` suggests the use of symmetric ciphers and hash functions. The absence of explicit quantum-resistant algorithms and the use of fixed key sizes (e.g., `STREAM_KEY_SIZE = 20`) raise concerns about potential vulnerabilities to quantum attacks if these components rely on classical algorithms like AES, SHA-256, or similar.",
        "detected_algorithms": [],
        "recommendations": "Analyze the implementations of `StreamCipherEngine`, `MessageDigestProcessor`, `LightweightBlockCipher`, and `KeyScheduler` to identify specific cryptographic algorithms used. Replace any classical algorithms (e.g., AES, SHA-256, RSA, ECDSA) with their quantum-resistant counterparts (e.g., CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+). Ensure key sizes are appropriate for the chosen quantum-resistant algorithms.",
        "evidence": "The presence of `StreamCipherEngine`, `MessageDigestProcessor`, `LightweightBlockCipher`, and `KeyScheduler` without explicit mention of quantum-resistant algorithms indicates potential reliance on classical cryptography.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "TelecommunicationsSecurityHub",
      "file_name": "TelecommunicationsSecurityHub.java",
      "response_time": 3.1580276489257812,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "a5_trivium_stream_ciphers",
      "file_name": "a5_trivium_stream_ciphers.py",
      "response_time": 2.572962999343872,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a custom stream cipher using cascading registers and feedback mechanisms. While the cipher itself is not a standard, well-analyzed algorithm like RSA or ECDSA, its security is questionable and likely vulnerable to classical cryptanalysis. It does not directly use known quantum-vulnerable algorithms, but its custom nature makes it a security risk.",
        "detected_algorithms": [],
        "recommendations": "Replace the custom stream cipher with well-established and vetted cryptographic algorithms from reputable libraries. Consider using AES in CTR mode or ChaCha20 for stream cipher functionality. Ensure proper key management and IV handling.",
        "evidence": "The code implements a custom stream cipher with feedback taps and clocking mechanisms, indicating a non-standard cryptographic approach.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "a5_trivium_stream_ciphers",
      "file_name": "a5_trivium_stream_ciphers.py",
      "response_time": 3.2265748977661133,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "aes_advanced_encryption",
      "file_name": "aes_advanced_encryption.java",
      "response_time": 3.427729845046997,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a block cipher with characteristics similar to AES, including a 16-byte block size, S-box usage, and round-based transformations. While AES itself is considered relatively safe against quantum computers (especially with 256-bit keys), the presence of custom implementations can introduce vulnerabilities if not designed and implemented correctly. The SBOX and INV_SBOX arrays are strong indicators of AES-like operations.",
        "detected_algorithms": [
          "AES"
        ],
        "recommendations": "If AES is the intended algorithm, use standard, well-vetted libraries like javax.crypto.Cipher with appropriate modes (e.g., GCM) and padding. If a custom cipher is necessary, ensure rigorous security analysis and testing against known attacks, including side-channel attacks. Consider using AES with 256-bit keys for enhanced security.",
        "evidence": "Presence of BLOCK_SIZE = 16, SBOX, INV_SBOX, KEY_SIZES, and ROUNDS constants, suggesting AES-like block cipher implementation.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "aes_advanced_encryption",
      "file_name": "aes_advanced_encryption.java",
      "response_time": 3.4739530086517334,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "aria_korean_block_cipher",
      "file_name": "aria_korean_block_cipher.py",
      "response_time": 2.8983969688415527,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a block cipher with a 128-bit block size, S-boxes, and a diffusion layer, which are characteristics of ARIA, a symmetric block cipher. Symmetric ciphers are generally considered vulnerable in the post-quantum era because Grover's algorithm can reduce their effective key size.",
        "detected_algorithms": [
          "ARIA"
        ],
        "recommendations": "Consider using a post-quantum symmetric cipher like AES with a larger key size (e.g., AES-256) or exploring post-quantum alternatives if confidentiality is paramount.",
        "evidence": "The code exhibits structural similarities to the ARIA block cipher, including a 128-bit block size, S-boxes (s1_table, s2_table), and a diffusion layer (_diffusion_layer).",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "aria_korean_block_cipher",
      "file_name": "aria_korean_block_cipher.py",
      "response_time": 3.143751859664917,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "aria_sha256_ecdsa_government",
      "file_name": "aria_sha256_ecdsa_government.py",
      "response_time": 3.28328800201416,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher that resembles ARIA, a symmetric cipher. While ARIA itself is not directly vulnerable to quantum computers in the same way as asymmetric algorithms like RSA or ECDSA, the presence of custom cryptography raises concerns. The code also uses SHA256, which is not directly broken by quantum computers but its security margins are reduced when used with vulnerable algorithms like ECDSA.",
        "detected_algorithms": [
          "SHA256",
          "Custom Block Cipher (ARIA-like)"
        ],
        "recommendations": "Replace the custom block cipher with a standardized post-quantum symmetric cipher like AES-256 or a lightweight alternative if performance is critical. For hashing, consider SHA-3 or BLAKE3. If ECDSA is used elsewhere in the application, migrate to a post-quantum signature scheme like CRYSTALS-Dilithium.",
        "evidence": "The code defines a class `KoreanFinancialProcessor` with attributes and methods that strongly suggest the implementation of a block cipher similar to ARIA. This includes `block_size`, `rounds`, `domestic_s1`, `domestic_s2`, `_apply_domestic_substitution`, and `_korean_diffusion_layer`. The presence of `kfss_constants` and `_gf_multiply` further supports this.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "aria_sha256_ecdsa_government",
      "file_name": "aria_sha256_ecdsa_government.py",
      "response_time": 3.4732182025909424,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "blowfish_symmetric_encryption",
      "file_name": "blowfish_symmetric_encryption.c",
      "response_time": 2.460839033126831,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements the Blowfish symmetric encryption algorithm, which is vulnerable to brute-force attacks with sufficient computational resources, although not directly vulnerable to quantum computers. However, symmetric key algorithms with smaller key sizes are generally considered less secure in the long term.",
        "detected_algorithms": [
          "Blowfish"
        ],
        "recommendations": "Consider migrating to AES-256 or a post-quantum symmetric encryption algorithm if long-term security against advanced computational attacks is a concern.",
        "evidence": "The code implements the Blowfish algorithm, including the f_function, sboxes, and key initialization.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "blowfish_symmetric_encryption",
      "file_name": "blowfish_symmetric_encryption.c",
      "response_time": 3.0666661262512207,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "camellia_block_cipher",
      "file_name": "camellia_block_cipher.c",
      "response_time": 2.667665958404541,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements the Camellia block cipher, which is vulnerable to quantum attacks due to its symmetric key nature. While not directly broken by Shor's algorithm, Grover's algorithm can reduce its effective key size, making it less secure in a post-quantum world.",
        "detected_algorithms": [
          "Camellia"
        ],
        "recommendations": "Consider migrating to a post-quantum resistant symmetric cipher like AES-256 or a combination of AES and a key encapsulation mechanism (KEM) for key exchange. Evaluate the security requirements and performance implications of different post-quantum alternatives.",
        "evidence": "The code defines constants and functions related to the Camellia block cipher, including S-boxes, round constants, and round functions.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "camellia_block_cipher",
      "file_name": "camellia_block_cipher.c",
      "response_time": 3.9373650550842285,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: Camellia (Evidence: camellia_f, camellia_fl, camellia_flinv, camellia_key_schedule functions, CAMELLIA_128_ROUNDS, CAMELLIA_256_ROUNDS constants)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Camellia symmetric cipher is detected. While not directly vulnerable to Grover's algorithm in the same way as AES-128 (which has a smaller key size), its security margin against Grover's algorithm is reduced compared to AES-256."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "cast_feistel_cipher",
      "file_name": "cast_feistel_cipher.c",
      "response_time": 3.845426321029663,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a Feistel cipher, which is a symmetric block cipher structure. While Feistel ciphers themselves are not directly vulnerable to quantum attacks in the same way as RSA or ECC, their security depends on the key size and the complexity of the round function. If the key size is too small or the round function is weak, the cipher can be broken by classical or quantum algorithms. The presence of S-boxes suggests a substitution-permutation network within the Feistel rounds, which is a common design element. Without knowing the key size and the specific details of the key schedule, it's difficult to assess the exact level of vulnerability. However, Feistel ciphers are generally considered less secure than modern block ciphers like AES when considering advanced attacks.",
        "detected_algorithms": [
          "Feistel Cipher"
        ],
        "recommendations": "Consider replacing the Feistel cipher with a post-quantum cryptographic algorithm like AES-GCM with a sufficiently large key size (e.g., 256-bit) or a NIST-approved post-quantum algorithm like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Ensure the key size is appropriate for the security requirements and that the implementation is robust against side-channel attacks.",
        "evidence": "The code defines S-boxes (sbox1, sbox2, sbox3, sbox4) and round functions (round_f1, round_f2) characteristic of Feistel ciphers. The FEISTEL_ROUNDS_A and FEISTEL_ROUNDS_B constants indicate the number of rounds used in the cipher.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "cast_feistel_cipher",
      "file_name": "cast_feistel_cipher.c",
      "response_time": 3.46418833732605,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "chacha20_poly1305_aead",
      "file_name": "chacha20_poly1305_aead.java",
      "response_time": 2.2767410278320312,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements ChaCha20 stream cipher, which is considered relatively safe against known quantum attacks.",
        "detected_algorithms": [
          "ChaCha20"
        ],
        "recommendations": "While ChaCha20 is currently considered safe, consider using a post-quantum authenticated encryption scheme like CRYSTALS-Kyber and ChaCha20-Poly1305 for defense in depth.",
        "evidence": "The code defines constants and functions related to ChaCha20, such as STREAM_BLOCK_SIZE, STREAM_KEY_SIZE, STREAM_NONCE_SIZE, STREAM_ROUNDS, STREAM_CONSTANTS, quarterRound, and processBlock.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "chacha20_poly1305_aead",
      "file_name": "chacha20_poly1305_aead.java",
      "response_time": 2.9738011360168457,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "cloud_security_orchestrator",
      "file_name": "cloud_security_orchestrator.py",
      "response_time": 2.746649980545044,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code imports standard cryptographic libraries and uses key derivation, which could potentially lead to the use of non-quantum-resistant algorithms. However, the specific algorithms used are not explicitly defined in the provided code snippet.",
        "detected_algorithms": [],
        "recommendations": "Review the implementations of KeyDerivationEngine, SymmetricProcessor, AsymmetricCalculator, and DigestEngine to ensure they do not use RSA, DSA, ECDSA, or ECDH. If any of these algorithms are used, replace them with quantum-resistant alternatives like CRYSTALS-Kyber, CRYSTALS-Dilithium, or Falcon.",
        "evidence": "The code imports hashlib, hmac, and secrets, and uses a KeyDerivationEngine, which suggests the potential use of vulnerable algorithms.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "cloud_security_orchestrator",
      "file_name": "cloud_security_orchestrator.py",
      "response_time": 3.7869157791137695,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "DETECTED: KoreanCipherEngine (Evidence: class KoreanCipherEngine(), line 40)",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: hashlib (Evidence: import hashlib, line 2)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets (Evidence: import secrets, line 4)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code uses hashlib for hashing and secrets for random number generation. It also defines a KoreanCipherEngine, suggesting the potential use of Korean domestic algorithms. Further analysis is needed to determine the specific algorithms used and their vulnerability status."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "database_encryption_engine",
      "file_name": "database_encryption_engine.c",
      "response_time": 3.0755817890167236,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher with a Feistel network and S-boxes. While not directly using RSA, DSA, ECDSA, or ECDH, the custom cipher's security is questionable and likely vulnerable to classical attacks, making it indirectly vulnerable in a post-quantum context due to potential weaknesses exploitable with quantum computers.",
        "detected_algorithms": [
          "Custom Feistel Cipher"
        ],
        "recommendations": "Replace the custom cipher with a well-established and quantum-resistant algorithm like CRYSTALS-Kyber or SABER. Ensure proper key management and consider using authenticated encryption modes.",
        "evidence": "The code defines a custom block cipher with Feistel structure, S-boxes, and a key schedule. The key size and number of rounds are defined, but the overall security is uncertain.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "database_encryption_engine",
      "file_name": "database_encryption_engine.c",
      "response_time": 3.0224881172180176,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "diffie_hellman_key_exchange",
      "file_name": "diffie_hellman_key_exchange.java",
      "response_time": 2.371431350708008,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements Diffie-Hellman key exchange with fixed 1024 and 2048 bit prime numbers, which are vulnerable to quantum attacks using Shor's algorithm.",
        "detected_algorithms": [
          "DH"
        ],
        "recommendations": "Replace Diffie-Hellman with a post-quantum key exchange algorithm like CRYSTALS-Kyber or implement hybrid key exchange.",
        "evidence": "The code uses BigInteger for prime and generator, and defines fixed parameters for 1024 and 2048 bit key exchange, indicating Diffie-Hellman.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "diffie_hellman_key_exchange",
      "file_name": "diffie_hellman_key_exchange.java",
      "response_time": 4.434544086456299,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: The code implements a modular key exchange, which is a form of Diffie-Hellman. The `ModularKeyExchange` class, `generateKeyPair` and `computeSharedSecret` methods, and the use of `BigInteger.modPow` for exponentiation are indicative of DH. The `KeyExchangeParameters` class stores the prime and generator values.)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Potentially insecure random number generator (Evidence: `java.security.SecureRandom` is used, but without explicit seeding or configuration, it might rely on the system's default entropy source, which could be insufficient in some environments. While SecureRandom is generally considered secure, its security depends on the underlying OS and hardware entropy sources.)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements Diffie-Hellman key exchange using `BigInteger` and `modPow`. It also uses `java.security.SecureRandom` which might be a point of concern if not properly seeded."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "digital_identity_platform",
      "file_name": "digital_identity_platform.js",
      "response_time": 2.351439952850342,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses modular exponentiation with a key size of 2048 bits and a public exponent of 65537, which are strong indicators of RSA-like operations. Although the code doesn't explicitly state 'RSA', the structural patterns and key sizes strongly suggest its usage, making it vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code simulates large integer key generation with a key size of 2048 bits, performs modular exponentiation, and uses a public exponent of 65537. These are all characteristics of RSA.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "digital_identity_platform",
      "file_name": "digital_identity_platform.js",
      "response_time": 5.2189202308654785,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 with reduced security (Evidence: crypto.createHash('hash_256'), line 68). Note: 'hash_256' is not a standard SHA-256 name, suggesting a potentially weakened or non-standard implementation.",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure random number generator (Evidence: crypto.randomBytes used for key generation, lines 12 and 81). While `crypto.randomBytes` is generally considered secure, its usage without proper seeding or entropy management could lead to vulnerabilities, especially if the environment lacks sufficient randomness. The key generation in `generateKeyPair` functions of both `LargeIntegerCalculator` and `EllipticCurveProcessor` are affected.",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in signature algorithm (Evidence: The `LargeIntegerCalculator` class implements a custom signature scheme that is highly vulnerable. The `performPrivateKeyOperation` and `performPublicKeyOperation` methods perform simple modular arithmetic that is easily breakable. The signature scheme does not provide any security guarantees and is vulnerable to various attacks. The key sizes are simulated and the modular exponentiation is simplified, making the implementation insecure. The use of `this.exponentE = 65537` is a common practice, but the rest of the implementation is flawed.)"
        },
        "confidence_score": 0.7,
        "summary": "The code uses a potentially weakened SHA-256 variant ('hash_256'), insecure random number generation for key generation, and a custom, highly vulnerable signature scheme in the LargeIntegerCalculator class. The EllipticCurveProcessor also uses insecure random number generation for key generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "elgamal_diffie_hellman_pki",
      "file_name": "elgamal_diffie_hellman_pki.py",
      "response_time": 2.2515907287597656,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a Diffie-Hellman key exchange, which relies on the difficulty of the discrete logarithm problem. This problem can be solved efficiently by quantum computers using Shor's algorithm, making the key exchange vulnerable to quantum attacks.",
        "detected_algorithms": [
          "DH"
        ],
        "recommendations": "Replace the Diffie-Hellman key exchange with a post-quantum key exchange algorithm such as CRYSTALS-Kyber.",
        "evidence": "The code generates a safe prime `p` and a generator `g`, then computes `y = pow(g, x, p)`, which are standard steps in Diffie-Hellman key exchange.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "elgamal_diffie_hellman_pki",
      "file_name": "elgamal_diffie_hellman_pki.py",
      "response_time": 3.4842679500579834,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: DH (Evidence: KoreanPublicKeySystem class implements Diffie-Hellman key exchange using modular exponentiation)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: DH (Evidence: The KoreanPublicKeySystem class uses a fixed generator value of 2 in KoreanModularKeyExchange, which is a known vulnerability in some DH implementations.)"
        },
        "confidence_score": 0.75,
        "summary": "The code implements a Diffie-Hellman key exchange protocol. The KoreanModularKeyExchange class uses a fixed generator value of 2, which can be a vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "elliptic_curve_cryptography",
      "file_name": "elliptic_curve_cryptography.java",
      "response_time": 2.4945406913757324,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements Elliptic Curve Cryptography (ECC) with specific curve parameters (PRIME_P, CURVE_A, CURVE_B, ORDER_N, GX, GY), which are indicative of ECDSA or ECDH. ECC algorithms like ECDSA and ECDH are vulnerable to quantum attacks.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace ECDSA/ECDH with post-quantum alternatives like Dilithium for signatures and CRYSTALS-Kyber for key exchange.",
        "evidence": "The code defines parameters for an elliptic curve (PRIME_P, CURVE_A, CURVE_B, ORDER_N, GX, GY) and implements point operations, suggesting ECDSA or ECDH usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "elliptic_curve_cryptography",
      "file_name": "elliptic_curve_cryptography.java",
      "response_time": 3.5430500507354736,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: ECPoint class, pointAdd, pointDouble, scalarMultiply functions)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: SecureRandom (Evidence: java.security.SecureRandom import, random variable initialization)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected ECC implementation and usage of SecureRandom. The ECC implementation may be vulnerable to quantum attacks depending on the curve used and key sizes. SecureRandom is generally considered secure, but its proper usage is crucial."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "financial_risk_analyzer",
      "file_name": "financial_risk_analyzer.py",
      "response_time": 2.3574330806732178,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code defines a LargeNumberProcessor class that generates RSA keypairs with a key size of 2048 bits. This is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "self.key_size = 2048; public_exponent = 65537; _generate_large_prime, _lcm, _mod_inverse functions are used for RSA key generation.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "financial_risk_analyzer",
      "file_name": "financial_risk_analyzer.py",
      "response_time": 4.197751998901367,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: generate_financial_keypair function uses prime generation and modular exponentiation, sign_financial_transaction function uses PKCS#1 v1.5 padding and modular exponentiation)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: hashlib.sha256 call in _compute_financial_hash function)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS#1 v1.5 (Evidence: _apply_financial_padding function)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets.randbits (Evidence: _generate_large_prime function)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses RSA with PKCS#1 v1.5 padding, SHA-256, and secrets.randbits. RSA and PKCS#1 v1.5 are vulnerable to quantum attacks. SHA-256 is considered relatively secure, but its usage should be reviewed in the context of post-quantum cryptography. secrets.randbits is a cryptographically secure random number generator."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "financial_transaction_processor",
      "file_name": "financial_transaction_processor.c",
      "response_time": 2.7685048580169678,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a custom block cipher with a Feistel network and a key schedule. While the specific algorithm is not explicitly named, it uses constants and transformations that resemble characteristics of domestic Korean ciphers. It does not directly use RSA, DSA, ECDSA, or ECDH, but the custom cipher's security is questionable against quantum computers and classical attacks.",
        "detected_algorithms": [],
        "recommendations": "Replace the custom cipher with a well-vetted post-quantum cryptographic algorithm like CRYSTALS-Kyber or CRYSTALS-Dilithium. If a block cipher is needed, consider AES-256 in conjunction with a PQC key exchange mechanism.",
        "evidence": "The code defines a custom block cipher with a Feistel network and key schedule, using constants named 'korean_constants'.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "financial_transaction_processor",
      "file_name": "financial_transaction_processor.c",
      "response_time": 4.331942081451416,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "DETECTED: Korean domestic algorithm (Evidence: `korean_constants` array and `feistel_transform` function used in key expansion and transaction processing)",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in quantum-vulnerable algorithms (Evidence: The custom Feistel network implementation might have vulnerabilities due to its design and lack of established security analysis. The hardcoded master key `0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c` is a major vulnerability.)"
        },
        "confidence_score": 0.75,
        "summary": "Detected a custom Feistel network implementation using Korean constants, which is likely a Korean domestic algorithm. The hardcoded master key is a critical vulnerability. The custom implementation may have other implementation-specific vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "financial_transaction_security",
      "file_name": "financial_transaction_security.c",
      "response_time": 3.036249876022339,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code defines a LargeIntegerContext which includes members for private_exp, public_exp, and productN, suggesting the use of RSA or similar large integer-based cryptography. The LARGE_INTEGER_SIZE is 256 bytes, implying a 2048-bit key size, which is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "Definition of LargeIntegerContext with members productN, private_exp, public_exp, and LARGE_INTEGER_SIZE definition.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "financial_transaction_security",
      "file_name": "financial_transaction_security.c",
      "response_time": 3.168002128601074,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: LargeIntegerContext struct and related variables productN, private_exp, public_exp)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "RSA implementation detected based on LargeIntegerContext struct and related variables."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "government_document_signer",
      "file_name": "government_document_signer.c",
      "response_time": 3.0781991481781006,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code defines structures and functions related to Elliptic Curve Cryptography (ECC), specifically resembling ECDSA. It includes definitions for elliptic curve domain parameters (curve_a, curve_b, curve_p, base_point_x, base_point_y, order) and key structures (DigitalSignatureKey) which are vulnerable to quantum attacks.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace ECDSA/ECDH with post-quantum alternatives like Dilithium or Falcon for digital signatures and CRYSTALS-Kyber or NTRU for key exchange.",
        "evidence": "The code defines structures and functions related to Elliptic Curve Cryptography (ECC), specifically resembling ECDSA. It includes definitions for elliptic curve domain parameters (curve_a, curve_b, curve_p, base_point_x, base_point_y, order) and key structures (DigitalSignatureKey). The init_korean_curve function initializes curve parameters and base points, indicating the use of ECC.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "government_document_signer",
      "file_name": "government_document_signer.c",
      "response_time": 4.064496755599976,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: EllipticCurveDomain struct, ec_point_double function)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "DETECTED: EC-KCDSA (Evidence: init_korean_curve function, DigitalSignatureKey struct)",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: srand(12345) call, rand() call)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-Specific Vulnerabilities in ECC (Evidence: Simplified point doubling and modular arithmetic implementations, potential for side-channel attacks)",
          "productN": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Detected ECC implementation, potentially EC-KCDSA, using a weak random number generator and simplified arithmetic operations, making it vulnerable to attacks. The use of srand with a fixed seed is a major vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "idea_international_encryption",
      "file_name": "idea_international_encryption.java",
      "response_time": 2.9976470470428467,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements IDEA (International Data Encryption Algorithm), a symmetric block cipher. While not directly vulnerable to quantum computers in the same way as RSA or ECC, its relatively small key size (128 bits) makes it susceptible to Grover's algorithm, which can reduce the effective key size by half. This makes it vulnerable in the post-quantum era.",
        "detected_algorithms": [
          "IDEA"
        ],
        "recommendations": "Replace IDEA with a post-quantum secure symmetric cipher like AES-256 or a modern authenticated encryption scheme such as ChaCha20-Poly1305. If a block cipher is required, consider using a larger key size (e.g., AES-256) and increasing the number of rounds.",
        "evidence": "The code implements the IDEA algorithm, including key generation, encryption, and decryption functions. The constants BLOCK_SIZE, KEY_SIZE, and ROUNDS are indicative of IDEA.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "idea_international_encryption",
      "file_name": "idea_international_encryption.java",
      "response_time": 3.681375026702881,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: IDEA (Evidence: Class name IDEAInternationalEncryption)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code implements the IDEA cipher, which is a legacy symmetric encryption algorithm. While not directly vulnerable to Grover's algorithm in the same way as AES-128 with a small key size, its key size and block size are relatively small compared to modern standards, making it a less secure option."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "iot_device_security",
      "file_name": "iot_device_security.c",
      "response_time": 3.15336275100708,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a custom lightweight block cipher with a 16-byte key and a 16-element S-box. While not directly using known vulnerable algorithms like RSA or ECDSA, its security is questionable against classical and potentially quantum attacks due to its small key size and custom design. The S-box and round constants are hardcoded, making it susceptible to cryptanalysis.",
        "detected_algorithms": [],
        "recommendations": "Replace the custom cipher with a well-established and quantum-resistant algorithm like CRYSTALS-Kyber or SABER for key exchange and CRYSTALS-Dilithium or FALCON for digital signatures. If a lightweight cipher is absolutely necessary, consider using AES with a 128-bit or 256-bit key and explore post-quantum symmetric key alternatives when available.",
        "evidence": "The code defines a custom block cipher with a 16-byte key, a 16-element S-box, and hardcoded round constants. The `iot_transform` function implements a custom transformation based on the S-box and round keys.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "iot_device_security",
      "file_name": "iot_device_security.c",
      "response_time": 2.988442897796631,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_authentication_server",
      "file_name": "korean_authentication_server.cpp",
      "response_time": 2.260941982269287,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code includes <openssl/bn.h> which can be used for RSA and DSA operations, both vulnerable to quantum attacks. The presence of openssl/sha.h further supports the possibility of RSA usage for signing.",
        "detected_algorithms": [
          "RSA",
          "DSA"
        ],
        "recommendations": "Replace RSA and DSA with post-quantum alternatives like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code imports <openssl/bn.h> and <openssl/sha.h>, indicating potential use of RSA or DSA.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_authentication_server",
      "file_name": "korean_authentication_server.cpp",
      "response_time": 3.8827500343322754,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-1 (Evidence: #include <openssl/sha.h>)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: #include <random>)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: Legacy Cryptographic Library (Evidence: #include <openssl/bn.h>, #include <openssl/sha.h>)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code uses SHA-1, which is considered a weak hash function. It also includes the OpenSSL library, which may contain deprecated cipher suites. The code also uses the <random> header which, if not used correctly, can lead to insecure random number generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_banking_security_module",
      "file_name": "korean_banking_security_module.py",
      "response_time": 2.8766682147979736,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher with a Feistel network structure, which is not inherently vulnerable to quantum computers. However, the key derivation and round function use simple XOR and addition operations, making it potentially vulnerable to classical cryptanalysis. The absence of established, quantum-resistant algorithms makes the system vulnerable in a post-quantum context.",
        "detected_algorithms": [
          "Custom Feistel Cipher"
        ],
        "recommendations": "Replace the custom cipher with a NIST-approved post-quantum cryptographic algorithm like CRYSTALS-Kyber for key encapsulation and CRYSTALS-Dilithium for digital signatures. Ensure proper implementation and integration of these algorithms.",
        "evidence": "The code implements a Feistel network with custom round function and key derivation, lacking quantum resistance.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_banking_security_module",
      "file_name": "korean_banking_security_module.py",
      "response_time": 4.870232105255127,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 5,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 with reduced security (Evidence: import hashlib, usage of hashlib)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS7 padding (Evidence: Implementation of PKCS7 padding in encrypt_transaction method)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Key derivation function (Evidence: _derive_round_keys method implements a custom key derivation function, which may be vulnerable if not properly designed)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "DETECTED: Custom Feistel network implementation (Evidence: _feistel_round_function method implements a custom Feistel network, which may be vulnerable if not properly designed)",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Potential vulnerability in custom Feistel implementation (Evidence: Custom Feistel network implementation may have implementation-specific vulnerabilities)"
        },
        "confidence_score": 0.7,
        "summary": "The code uses SHA-256, implements PKCS7 padding, and contains a custom Feistel network implementation with a custom key derivation function. The custom implementations may be vulnerable."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_blockchain_wallet",
      "file_name": "korean_blockchain_wallet.py",
      "response_time": 3.2186310291290283,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements elliptic curve cryptography, specifically resembling secp256k1, which is vulnerable to quantum attacks.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace ECDSA and ECDH with quantum-resistant alternatives like Dilithium and CRYSTALS-Kyber, respectively. Consider using libraries that offer post-quantum cryptographic algorithms.",
        "evidence": "The code defines EllipticCurvePoint and EllipticCurveParameters classes, and initializes curve parameters similar to secp256k1. It also implements point addition, indicating ECDSA usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_blockchain_wallet",
      "file_name": "korean_blockchain_wallet.py",
      "response_time": 4.185549020767212,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: EllipticCurvePoint, EllipticCurveParameters classes and methods like point_add, point_double, scalar_multiply)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 with reduced security (Evidence: hashlib.sha256 usage, but without explicit key stretching or salting, which could lead to reduced security in key derivation scenarios)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets (Evidence: import secrets)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements Elliptic Curve Cryptography (ECC) for blockchain signatures. It also uses hashlib.sha256, which, without proper key derivation techniques, can be considered a weak hash function in certain contexts. The 'secrets' module is used for random number generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_cloud_storage_encryptor",
      "file_name": "korean_cloud_storage_encryptor.py",
      "response_time": 3.068397045135498,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher with S-boxes and GF(2^8) arithmetic, resembling AES. While not directly using RSA, DSA, or ECDSA, the custom cipher's security is questionable against quantum computers and modern attacks. It's likely vulnerable due to its custom nature and lack of rigorous cryptanalysis.",
        "detected_algorithms": [
          "Custom Block Cipher (Likely AES-like)"
        ],
        "recommendations": "Replace the custom cipher with a NIST-standardized post-quantum cryptography (PQC) algorithm like CRYSTALS-Kyber for key encapsulation and CRYSTALS-Dilithium for digital signatures. If symmetric encryption is needed, consider AES-256 with a key derived using a PQC KEM.",
        "evidence": "The code implements a custom block cipher with S-boxes, round keys, and GF(2^8) arithmetic, similar to AES but potentially weaker. The absence of established, quantum-resistant algorithms makes it vulnerable.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_cloud_storage_encryptor",
      "file_name": "korean_cloud_storage_encryptor.py",
      "response_time": 3.8926799297332764,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: import hashlib, hashlib.sha256)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets (Evidence: import secrets)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "SHA-256 is used for hashing. The `secrets` module is used for generating cryptographically secure random numbers. The code implements a custom block cipher with S-boxes and diffusion layers, but it's not a known standard algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_government_data_processor",
      "file_name": "korean_government_data_processor.java",
      "response_time": 2.671905994415283,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a custom symmetric encryption algorithm with a 128-bit key and S-boxes, potentially resembling AES or SEED. While the custom algorithm itself isn't directly vulnerable to known quantum attacks, the absence of quantum-resistant key exchange mechanisms makes the overall system vulnerable.",
        "detected_algorithms": [],
        "recommendations": "Implement a quantum-resistant key exchange mechanism like CRYSTALS-Kyber or Dilithium to protect the symmetric key. Consider replacing the custom encryption algorithm with a well-vetted, standardized post-quantum symmetric cipher when available.",
        "evidence": "The code defines a custom symmetric encryption algorithm with S-boxes and round keys, but lacks any asymmetric cryptography or key exchange mechanisms.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_government_data_processor",
      "file_name": "korean_government_data_processor.java",
      "response_time": 3.265803575515747,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_iot_device_firmware",
      "file_name": "korean_iot_device_firmware.c",
      "response_time": 3.2245519161224365,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The provided code implements a custom lightweight encryption algorithm with a 128-bit key. While the code doesn't explicitly use RSA, DSA, ECDSA, or ECDH, the custom algorithm's security is questionable and likely vulnerable to classical attacks due to its simplicity and small key size. Furthermore, the lack of established security analysis makes it impossible to assess its resistance to quantum attacks. Therefore, it is considered vulnerable in the context of post-quantum cryptography.",
        "detected_algorithms": [
          "Custom Lightweight Cipher"
        ],
        "recommendations": "Replace the custom cipher with a well-established and quantum-resistant algorithm like CRYSTALS-Kyber or NTRU. If symmetric encryption is sufficient, consider AES-GCM with a 256-bit key, although AES is not quantum-resistant, it is considered secure against classical attacks with a sufficiently large key size. Ensure proper key management and secure implementation practices.",
        "evidence": "The code defines a custom encryption algorithm with a 128-bit key and a simple key schedule. The algorithm's security is not well-established and is likely vulnerable to classical and potentially quantum attacks.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_iot_device_firmware",
      "file_name": "korean_iot_device_firmware.c",
      "response_time": 3.378523826599121,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_pki_certificate_system",
      "file_name": "korean_pki_certificate_system.cpp",
      "response_time": 3.3410701751708984,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses OpenSSL BIGNUM for large integer arithmetic, which is commonly used in RSA, DSA, and ECDSA implementations. While the code snippet doesn't explicitly show the use of these algorithms, the presence of BIGNUM and the comment about a discrete logarithm problem suggests the potential use of vulnerable algorithms.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA"
        ],
        "recommendations": "Replace vulnerable algorithms (RSA, DSA, ECDSA) with post-quantum alternatives like CRYSTALS-Kyber (key exchange) and CRYSTALS-Dilithium (digital signatures).",
        "evidence": "The code includes <openssl/bn.h> for large number arithmetic, which is a common building block for RSA, DSA, and ECDSA. The comment \"Discrete Logarithm Domain Parameters\" also points towards DSA or ECDSA.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_pki_certificate_system",
      "file_name": "korean_pki_certificate_system.cpp",
      "response_time": 4.247867107391357,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 4,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "DETECTED: DSA (Evidence: Implements digital signature system based on discrete logarithm problem, DomainParameters class, SignatureKeyPair class)",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA (Evidence: #include <openssl/sha.h>)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure random number generators (Evidence: BN_rand_range function call)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: Legacy cryptographic libraries (Evidence: #include <openssl/bn.h>, #include <openssl/sha.h>)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements a digital signature system based on the discrete logarithm problem, suggesting the use of DSA. It uses OpenSSL's BIGNUM library for large integer arithmetic and SHA for hashing. It also uses BN_rand_range for random number generation, which might be insecure depending on the context and usage."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_secure_messaging_app",
      "file_name": "korean_secure_messaging_app.js",
      "response_time": 2.4636480808258057,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a custom block cipher using ARX operations, which is not inherently vulnerable to quantum computers. However, the security of this cipher depends on the specific design and implementation details, which are not fully provided in the snippet. Without a full security analysis, it's difficult to assess its resistance to classical or quantum attacks.",
        "detected_algorithms": [],
        "recommendations": "Perform a thorough security analysis of the custom ARX cipher, including differential and linear cryptanalysis, and consider using established, well-vetted post-quantum cryptographic algorithms instead.",
        "evidence": "The code implements a custom block cipher using ARX operations.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_secure_messaging_app",
      "file_name": "korean_secure_messaging_app.js",
      "response_time": 2.9137508869171143,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "korean_vpn_tunnel_manager",
      "file_name": "korean_vpn_tunnel_manager.java",
      "response_time": 3.3458590507507324,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom Feistel-based block cipher and an SPN cipher, which are not quantum-resistant. The key derivation and round functions are custom and likely vulnerable to classical and potentially quantum attacks if not carefully designed and analyzed.",
        "detected_algorithms": [
          "Feistel Cipher",
          "SPN Cipher"
        ],
        "recommendations": "Replace the custom ciphers with established post-quantum cryptographic algorithms like AES-GCM with a key exchange mechanism like CRYSTALS-Kyber or similar PQC KEM. Ensure proper security analysis and testing of any cryptographic implementation.",
        "evidence": "The code defines custom encryption algorithms (ControlPlaneSecurityEngine and DataPlaneSecurityEngine) using Feistel networks and SPN structures, respectively. These are not standardized or quantum-resistant algorithms.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "korean_vpn_tunnel_manager",
      "file_name": "korean_vpn_tunnel_manager.java",
      "response_time": 3.236189842224121,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS7 padding (Evidence: PKCS7 padding implementation in encryptData and decryptData methods)",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "PKCS7 padding detected in encryptData and decryptData methods."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "lattice_isogeny_postquantum",
      "file_name": "lattice_isogeny_postquantum.py",
      "response_time": 2.527580976486206,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements Number Theoretic Transform (NTT) which is used in lattice-based cryptography. No classical vulnerable algorithms detected.",
        "detected_algorithms": [],
        "recommendations": "Ensure the parameters used for NTT are secure and meet the desired security level. Consider using established lattice-based cryptographic libraries for better security and performance.",
        "evidence": "The code implements NTT and Gaussian sampling, which are components of lattice-based cryptography.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "lattice_isogeny_postquantum",
      "file_name": "lattice_isogeny_postquantum.py",
      "response_time": 3.158859968185425,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "legacy_authentication_system",
      "file_name": "legacy_authentication_system.c",
      "response_time": 3.2237579822540283,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code defines structures and functions indicative of RSA key generation and usage (AsymmetricKeyPair struct with public and private exponents, key_size). The presence of a legacy hash function with a 20-byte digest (LegacyHashContext struct with digest[20]) suggests it might be used in conjunction with RSA for signing or encryption, which are vulnerable to quantum attacks.",
        "detected_algorithms": [
          "RSA",
          "SHA-1 (Legacy Hash)"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium or Falcon for digital signatures. Replace the legacy hash function (likely SHA-1) with SHA-256 or SHA-3.",
        "evidence": "AsymmetricKeyPair struct with public_exp and private_exp, key_size; LegacyHashContext struct with digest[20] and state[5]; process_hash_block function implementing a hash algorithm.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "legacy_authentication_system",
      "file_name": "legacy_authentication_system.c",
      "response_time": 4.148229122161865,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: AsymmetricKeyPair struct, generate_auth_keys function, mod_exp function)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-1 (Evidence: LegacyHashContext struct, init_legacy_hash function, process_hash_block function)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: SHA-1 (Evidence: process_hash_block function implements SHA-1, which is known to be vulnerable)"
        },
        "confidence_score": 0.9,
        "summary": "The code uses vulnerable RSA implementation with small primes and SHA-1 hash function. These algorithms are vulnerable to classical and quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "md5_sha1_weak_hash",
      "file_name": "md5_sha1_weak_hash.py",
      "response_time": 2.8715147972106934,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom hashing algorithm that appears to be a simplified or incomplete version of MD5. While not directly RSA, the use of a weak hashing algorithm makes the system vulnerable to collision attacks, which can undermine security even if RSA were used elsewhere. The custom digest functions are not quantum-resistant.",
        "detected_algorithms": [
          "MD5-like"
        ],
        "recommendations": "Replace the custom hashing algorithm with a quantum-resistant cryptographic hash function like SHA-3 or BLAKE3. Also, consider using a modern password storage scheme like bcrypt or Argon2.",
        "evidence": "The functions `_compute_legacy_digest` and `_compute_160bit_digest` implement custom hashing logic that resembles MD5 but is likely weaker and not quantum-resistant.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "md5_sha1_weak_hash",
      "file_name": "md5_sha1_weak_hash.py",
      "response_time": 3.988011121749878,
      "json_valid": false,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {}
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "medical_device_encryption",
      "file_name": "medical_device_encryption.rs",
      "response_time": 2.7667078971862793,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code snippet does not directly use RSA, DSA, ECDSA, or ECDH. However, the presence of custom encryption and hashing algorithms raises concerns about potential vulnerabilities if these algorithms are not properly designed and implemented. The absence of standard, well-vetted cryptographic libraries is a risk factor.",
        "detected_algorithms": [],
        "recommendations": "Replace custom cryptographic implementations with well-vetted, quantum-resistant cryptographic libraries like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures. Conduct a thorough security audit of the custom algorithms by experienced cryptographers.",
        "evidence": "The code defines custom encryption (SymmetricEncryptionEngine), hashing (MedicalHashProcessor), stream cipher (CompactStreamCipher), and key derivation (KeyDerivationFunction) algorithms instead of using standard libraries.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "medical_device_encryption",
      "file_name": "medical_device_encryption.rs",
      "response_time": 3.4776570796966553,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Key Derivation Function (Evidence: KeyDerivationFunction struct and derive_patient_key function)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected a Key Derivation Function. Further analysis is needed to determine its strength and vulnerability to attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "military_communication_system",
      "file_name": "military_communication_system.c",
      "response_time": 3.9968597888946533,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom cryptographic hash function that appears to be based on SHA-256 or a similar algorithm. SHA-2 family of hash functions are not directly vulnerable to quantum attacks in the sense that they can be broken directly by Shor's algorithm. However, they are often used in conjunction with signature schemes like RSA, DSA, or ECDSA, which *are* vulnerable. The presence of SHA-2-like constructs suggests the potential use of these vulnerable signature schemes elsewhere in the system. The initial hash values and logical functions (sha_ch, sha_maj, sha_sigma0, sha_sigma1) are strong indicators of SHA-2 usage.",
        "detected_algorithms": [
          "SHA-256"
        ],
        "recommendations": "While SHA-2 itself isn't directly broken by quantum computers, its use with vulnerable signature schemes makes it part of a vulnerable system. Audit the entire system for RSA, DSA, ECDSA, and ECDH usage. Replace any vulnerable signature schemes with post-quantum alternatives like CRYSTALS-Dilithium or Falcon. Consider using a post-quantum KEM like CRYSTALS-Kyber for key exchange.",
        "evidence": "The code contains initial hash values (crypto->hash_state) and logical functions (sha_ch, sha_maj, sha_sigma0, sha_sigma1) characteristic of SHA-256.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "military_communication_system",
      "file_name": "military_communication_system.c",
      "response_time": 3.991832971572876,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 with reduced security (Evidence: The code implements a SHA-256-like hash function, but only uses the first 8 constants from the standard 80 constants. This is a reduced security implementation.)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in SHA-256-like algorithm (Evidence: The code implements a SHA-256-like hash function, but only uses the first 8 constants from the standard 80 constants. This is a reduced security implementation.)"
        },
        "confidence_score": 0.9,
        "summary": "The code implements a SHA-256-like hash function with reduced security due to the limited number of constants used."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "mobile_secure_messenger",
      "file_name": "mobile_secure_messenger.c",
      "response_time": 2.457767963409424,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses elliptic curve cryptography, which is vulnerable to quantum attacks. Specifically, the `MobileKeyPair` struct suggests the use of ECDSA or ECDH for key exchange and signing.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "Replace ECDSA/ECDH with post-quantum alternatives like CRYSTALS-Dilithium for signatures and CRYSTALS-Kyber for key exchange.",
        "evidence": "The `MobileKeyPair` struct contains members `private_key` and `public_key`, and the `curve_params` member strongly suggests the use of elliptic curve cryptography.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "mobile_secure_messenger",
      "file_name": "mobile_secure_messenger.c",
      "response_time": 4.297194004058838,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: MobileKeyPair struct contains curve_params, private_key, public_key, and domain_params, and mobile_point_multiply function performs point multiplication)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "DETECTED: Stream Cipher (Evidence: init_stream_generator and generate_keystream_byte functions implement a custom stream cipher)",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Custom ECC Implementation (Evidence: mobile_point_multiply function implements a simplified and likely vulnerable ECC point multiplication. The comment \"Simplified Geometric Curve operations\" suggests a non-standard and potentially weak implementation.)"
        },
        "confidence_score": 0.75,
        "summary": "Detected a custom stream cipher implementation and a simplified ECC implementation, both of which are likely vulnerable. The code uses ECC with point multiplication, and a custom stream cipher for encryption."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "network_infrastructure_monitor",
      "file_name": "network_infrastructure_monitor.cpp",
      "response_time": 2.254168748855591,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code simulates RSA-like key generation and processing with a key size of 2048 bits, which is vulnerable to Shor's algorithm on a quantum computer.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace the RSA-like operations with post-quantum cryptographic algorithms such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The `LargeIntegerProcessor` class simulates key generation with a `KEY_SIZE` of 2048 bits and performs operations analogous to modular exponentiation using public and private keys.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "network_infrastructure_monitor",
      "file_name": "network_infrastructure_monitor.cpp",
      "response_time": 5.322042942047119,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: Class LargeIntegerProcessor and usage of KEY_SIZE = 2048 and PUBLIC_EXPONENT = 65537)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "DETECTED: ECC (Evidence: Class EllipticCurveCalculator and usage of Point struct)",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: std::random_device and std::mt19937 used for key generation)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: Implementation-specific vulnerabilities in RSA (Evidence: Simplified modular exponentiation using small prime numbers, not a standard RSA implementation. The private key operation uses a fixed multiplier of 17 modulo 256, which is highly insecure.)\nDETECTED: Implementation-specific vulnerabilities in ECC (Evidence: Simplified point multiplication using modulo 256, not a standard ECC implementation. Key exchange uses modulo 256, which is highly insecure.)"
        },
        "confidence_score": 0.9,
        "summary": "The code contains vulnerable implementations of RSA and ECC, using insecure random number generation and simplified arithmetic operations that make them susceptible to attacks. The RSA key size is 2048 bits, which is vulnerable to Shor's algorithm. The ECC implementation uses modulo 256 arithmetic, which is highly insecure. The random number generation uses std::random_device and std::mt19937, which may not be cryptographically secure without proper seeding and usage."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "ntru_lattice_encryption",
      "file_name": "ntru_lattice_encryption.java",
      "response_time": 2.7987661361694336,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements NTRU lattice-based encryption, which is considered post-quantum secure. However, the presence of parameters like N, p, and q, along with modular arithmetic operations within the Polynomial class, could potentially be confused with RSA if not carefully analyzed. The code itself does not directly implement RSA, DSA, ECDSA, or ECDH.",
        "detected_algorithms": [],
        "recommendations": "While NTRU is considered post-quantum, ensure the parameters (N, p, q, df, dg, dr) are chosen according to established security recommendations for NTRU. Regularly review and update the NTRU implementation to incorporate the latest security patches and best practices.",
        "evidence": "The code uses NTRU parameters and polynomial arithmetic, which are characteristic of lattice-based cryptography, not RSA or other classical algorithms.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "ntru_lattice_encryption",
      "file_name": "ntru_lattice_encryption.java",
      "response_time": 3.7737839221954346,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: SecureRandom (Evidence: import java.security.SecureRandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code uses java.security.SecureRandom, which is a pseudorandom number generator. While generally considered secure, its security depends on the underlying implementation and seeding. The code implements NTRU lattice encryption, which is considered post-quantum."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.c",
      "response_time": 2.232642889022827,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses the DES (Data Encryption Standard) cipher, which is vulnerable to quantum attacks due to its small key size and known vulnerabilities. While not directly RSA, DES is a legacy block cipher that is not quantum-resistant.",
        "detected_algorithms": [
          "DES"
        ],
        "recommendations": "Replace DES with a quantum-resistant algorithm such as AES-256 or a post-quantum cryptography (PQC) algorithm like CRYSTALS-Kyber or CRYSTALS-Dilithium.",
        "evidence": "#include <openssl/legacy_cipher.h>",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.c",
      "response_time": 3.5822505950927734,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: Legacy cryptographic libraries and deprecated cipher suites (Evidence: #include <openssl/legacy_cipher.h>)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code includes the legacy OpenSSL cipher library, indicating the potential use of deprecated cipher suites."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "quantum_resistant_messenger",
      "file_name": "quantum_resistant_messenger.py",
      "response_time": 2.6642251014709473,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code uses lattice-based cryptography, which is considered post-quantum secure. No classical vulnerable algorithms like RSA, DSA, or ECDSA are detected.",
        "detected_algorithms": [],
        "recommendations": "Continue using post-quantum cryptographic algorithms. Ensure proper implementation and parameter selection for the lattice-based schemes.",
        "evidence": "The code implements lattice-based key exchange and signature schemes.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "quantum_resistant_messenger",
      "file_name": "quantum_resistant_messenger.py",
      "response_time": 4.298701763153076,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "DETECTED: SHA-256 (Evidence: import hashlib, hashlib.sha256 usage in MessageStore.hash_message)",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: secrets.randbelow (Evidence: import secrets, secrets.randbelow usage in LatticeParameters.sample_error_vector, KeyEncapsulationMechanism.generate_keypair, and MessageStore.generate_nonce)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses SHA-256 for message hashing and secrets.randbelow for random number generation. SHA-256 is considered weak with reduced security in the context of quantum resistance. The use of secrets.randbelow is noted."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "rc4_stream_generator",
      "file_name": "rc4_stream_generator.c",
      "response_time": 3.176318883895874,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements RC4 and Spritz stream ciphers, which are not quantum-resistant. While not directly vulnerable to Shor's algorithm like RSA, they are considered weak and should be replaced with modern, secure, and preferably quantum-resistant algorithms.",
        "detected_algorithms": [
          "RC4",
          "Spritz"
        ],
        "recommendations": "Replace RC4 and Spritz with modern, secure, and quantum-resistant algorithms like AES-GCM or ChaCha20-Poly1305. For quantum resistance, consider CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code contains implementations of RC4 (rc4_init, rc4_generate_byte, rc4_crypt) and Spritz (spritz_update, spritz_whip) stream ciphers.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "rc4_stream_generator",
      "file_name": "rc4_stream_generator.c",
      "response_time": 3.630608081817627,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: RC4 (Evidence: rc4_init, rc4_generate_byte, rc4_crypt, rc4_drop_init functions)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: RC4 (Evidence: Implementation uses RC4, which is known to have multiple vulnerabilities, including biases in the keystream. The drop_bytes functionality attempts to mitigate some of these biases, but does not eliminate them entirely.)"
        },
        "confidence_score": 0.9,
        "summary": "The code contains an implementation of the RC4 stream cipher, which is vulnerable to Grover's algorithm and known implementation-specific vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "rsa_gen",
      "file_name": "rsa_gen.c",
      "response_time": 2.106365919113159,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses `PUBKEY_PKCS1_OpenSSL()` which likely involves RSA, a quantum-vulnerable algorithm.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber or other NIST-approved algorithms.",
        "evidence": "The code includes `PUBKEY_PKCS1_OpenSSL()` which is a strong indicator of RSA usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "rsa_gen",
      "file_name": "rsa_gen.c",
      "response_time": 4.065828084945679,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: ctx->n, ctx->e, ctx->d, ctx->p, ctx->q, ctx->dmp1, ctx->dmq1, ctx->iqmp are used as RSA key components)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "DETECTED: PKCS#1 (Evidence: PUBKEY_PKCS1_OpenSSL() function call)",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "RSA key generation is detected using the OpenSSL library. PKCS#1 is also detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "rsa_modular_exponentiation",
      "file_name": "rsa_modular_exponentiation.py",
      "response_time": 2.9688241481781006,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "RSA key generation with 512-bit primes resulting in a 1024-bit modulus, vulnerable to Shor's algorithm.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code implements RSA key generation using prime numbers generated by _generate_prime(512), resulting in a modulus of 1024 bits. The _mod_inverse function is used, indicating RSA decryption.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "rsa_modular_exponentiation",
      "file_name": "rsa_modular_exponentiation.py",
      "response_time": 4.425676107406616,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: self.private_exp, self.public_exp, self.productN = self._generate_keypair(), pow(padded, self.public_exp, self.modulus), pow(padded_digest, self.private_exp, self.modulus))",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS#1 v1.5 (Evidence: self._apply_basic_padding)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: os.urandom)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: RSA with small key size (Evidence: p = self._generate_prime(512), q = self._generate_prime(512))"
        },
        "confidence_score": 0.9,
        "summary": "The code uses RSA with 512-bit primes, making it vulnerable to classical attacks and quantum attacks. It also uses PKCS#1 v1.5 padding, which is known to be vulnerable. The code uses os.urandom which is generally considered secure, but its usage in key generation and padding needs careful review. A legacy 160-bit hash algorithm is mentioned but the implementation is truncated."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "rsa_public_key_system",
      "file_name": "rsa_public_key_system.java",
      "response_time": 1.9662630558013916,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements RSA key generation and handling, which is vulnerable to Shor's algorithm on quantum computers.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with post-quantum cryptographic algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium or Falcon for digital signatures.",
        "evidence": "The code uses BigInteger for prime number generation and modular arithmetic, which are core components of RSA. The generateKeyPair() method generates RSA key pairs.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "rsa_public_key_system",
      "file_name": "rsa_public_key_system.java",
      "response_time": 3.7672650814056396,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: productN, exponentE, exponentD, factorP, factorQ variables and modPow function calls in encrypt and decrypt methods)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: OAEP (Evidence: applyOAEPPadding function call in encryptWithPadding method)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: SecureRandom (Evidence: java.security.SecureRandom import and SecureRandom object instantiation)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "RSA implementation detected with OAEP padding and SecureRandom. RSA is vulnerable to Shor's algorithm. OAEP padding is used. SecureRandom is used for random number generation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "salsa20_stream_cipher",
      "file_name": "salsa20_stream_cipher.c",
      "response_time": 2.6639089584350586,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements the Salsa20 stream cipher, which is not directly vulnerable to known quantum attacks. However, its security relies on the key being kept secret. If the key is derived using a vulnerable key exchange algorithm (e.g., RSA, ECDH), the overall system would be vulnerable.",
        "detected_algorithms": [],
        "recommendations": "Ensure that the key used for Salsa20 is generated and exchanged using post-quantum cryptographic algorithms. Consider using a post-quantum key exchange mechanism like CRYSTALS-Kyber or a post-quantum digital signature algorithm for authentication.",
        "evidence": "The code implements the Salsa20 stream cipher algorithm.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "salsa20_stream_cipher",
      "file_name": "salsa20_stream_cipher.c",
      "response_time": 2.9775102138519287,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "secure_messaging_protocol",
      "file_name": "secure_messaging_protocol.rb",
      "response_time": 2.553410768508911,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements RSA encryption with a 2048-bit key size, which is vulnerable to Shor's algorithm on a quantum computer. The code also uses modular exponentiation, prime number generation, and Euler's totient function, all indicators of RSA.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "Replace RSA with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The code implements RSA key generation, encryption, and decryption using modular exponentiation, prime number generation, and Euler's totient function. The key size is set to 2048 bits, and the public exponent is set to 65537, both common RSA parameters.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "secure_messaging_protocol",
      "file_name": "secure_messaging_protocol.rb",
      "response_time": 4.300607919692993,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: generate_keypair, encrypt_with_public_key, decrypt_with_private_key, sign_message, verify_signature methods)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "DETECTED: PKCS#1 v1.5 (Evidence: apply_signature_padding method)",
          "insecure_random_number_generators_and_key_derivation_functions": "DETECTED: Insecure Random Number Generator (Evidence: SecureRandom.random_number used for prime generation)",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: RSA key size less than 3072 bits (Evidence: @key_size = 2048)"
        },
        "confidence_score": 0.9,
        "summary": "The code implements RSA encryption with a 2048-bit key size, which is vulnerable to Shor's algorithm. It also uses PKCS#1 v1.5 padding, which is considered a vulnerable padding scheme. The prime number generation relies on SecureRandom.random_number, which might not be suitable for high-security applications."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "secure_video_streaming",
      "file_name": "secure_video_streaming.c",
      "response_time": 2.8648178577423096,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements a Salsa20-like stream cipher, which is not directly vulnerable to quantum attacks in the same way as RSA, DSA, or ECDSA. However, the key size (20 bytes = 160 bits) might be considered weak by modern standards and could be vulnerable to classical attacks. The number of rounds (SALSA_ROUNDS = 20) should also be carefully considered for security.",
        "detected_algorithms": [
          "Salsa20-like stream cipher"
        ],
        "recommendations": "Consider increasing the key size to at least 256 bits and carefully analyzing the number of rounds for sufficient security margin. While Salsa20 is not directly broken by quantum computers, migrating to a post-quantum stream cipher or authenticated encryption scheme would provide better long-term security. Also, consider using a well-vetted and standardized implementation of Salsa20 instead of a custom implementation.",
        "evidence": "The code defines a custom stream cipher with quarter round operations and state initialization similar to Salsa20.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "secure_video_streaming",
      "file_name": "secure_video_streaming.c",
      "response_time": 3.58085298538208,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "DETECTED: Salsa20 (Evidence: multimedia_quarter_round function, SALSA_ROUNDS definition, initialization of stream_state with sigma constant, which is characteristic of Salsa20)",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Salsa20-like stream cipher implementation detected. While not directly vulnerable to Grover's algorithm, its security margin should be carefully evaluated in the context of post-quantum cryptography."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "seed_aes_hybrid_banking",
      "file_name": "seed_aes_hybrid_banking.py",
      "response_time": 2.9713191986083984,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom block cipher that resembles SEED or ARIA, both of which are symmetric algorithms and not directly vulnerable to quantum attacks. However, the absence of standard, quantum-resistant key exchange mechanisms makes the overall system vulnerable if used with classical key exchange protocols like RSA or Diffie-Hellman.",
        "detected_algorithms": [
          "SEED",
          "ARIA"
        ],
        "recommendations": "Integrate a quantum-resistant key exchange mechanism such as CRYSTALS-Kyber or Dilithium to protect the symmetric key. Ensure the custom cipher implementation is thoroughly vetted for security vulnerabilities.",
        "evidence": "The code defines a custom block cipher with characteristics similar to SEED or ARIA, including a 128-bit block size, 16 rounds, and S-box-based operations. The presence of custom S-boxes (banking_ss0, banking_ss1) and a custom F-function are strong indicators.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "seed_aes_hybrid_banking",
      "file_name": "seed_aes_hybrid_banking.py",
      "response_time": 3.1367039680480957,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "seed_stream_cipher",
      "file_name": "seed_stream_cipher.py",
      "response_time": 2.447326898574829,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a stream cipher with a Feistel network-like structure and S-boxes, resembling the SEED block cipher. SEED is not quantum-resistant.",
        "detected_algorithms": [
          "SEED"
        ],
        "recommendations": "Replace the stream cipher with a post-quantum cryptographic alternative like AES-GCM with a key size of 256 bits or a stream cipher based on lattice cryptography.",
        "evidence": "The code contains F-function with S-box lookups and a G-function, which are structural indicators of the SEED block cipher.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "seed_stream_cipher",
      "file_name": "seed_stream_cipher.py",
      "response_time": 3.116071939468384,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "serpent_substitution_network",
      "file_name": "serpent_substitution_network.c",
      "response_time": 2.8705191612243652,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements Serpent, a symmetric block cipher. While Serpent itself is not directly vulnerable to quantum computers in the same way as asymmetric algorithms like RSA or ECC, its security margin might be reduced by Grover's algorithm. The key size (KEY_SIZE = 32, implying 256-bit key) offers some resistance, but a full quantum cryptanalysis is needed to assess the exact impact.",
        "detected_algorithms": [
          "Serpent"
        ],
        "recommendations": "Consider using a post-quantum cryptography (PQC) algorithm like AES-256 combined with a PQC key exchange mechanism. If Serpent is required, increase the key size if possible and monitor research on quantum cryptanalysis of Serpent.",
        "evidence": "The code defines constants and functions related to the Serpent block cipher, including S-boxes, a bit permutation, and round constants. The presence of these elements strongly suggests the implementation of Serpent.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "serpent_substitution_network",
      "file_name": "serpent_substitution_network.c",
      "response_time": 3.304147958755493,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: Serpent (Evidence: serpent_key_schedule function, apply_sbox function, apply_inverse_sbox function, linear_transform function, inverse_linear_transform function, sbox and inv_sbox arrays)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Serpent cipher implementation detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "sha1_rsa_legacy_documents",
      "file_name": "sha1_rsa_legacy_documents.py",
      "response_time": 2.2602081298828125,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements a custom hash function resembling SHA-1, which is not quantum-resistant. It also mentions RSA in the filename, indicating potential RSA usage elsewhere in the project.",
        "detected_algorithms": [
          "SHA-1",
          "RSA"
        ],
        "recommendations": "Replace SHA-1 with SHA-3 or BLAKE2. Replace RSA with CRYSTALS-Kyber.",
        "evidence": "Implementation of a custom hash function with similar structure to SHA-1, filename mentioning RSA.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "sha1_rsa_legacy_documents",
      "file_name": "sha1_rsa_legacy_documents.py",
      "response_time": 4.363715171813965,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "DETECTED: RSA (Evidence: _simple_modular_exp function used in sign_document, _generate_simple_keypair function)",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "DETECTED: HAS-160 (Evidence: SimpleKoreanHash class implements a simplified Korean hash function, likely based on HAS-160)",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: RSA (Evidence: The RSA implementation uses small primes (1009, 1013) making it extremely vulnerable. The modular exponentiation is also a very basic implementation.)"
        },
        "confidence_score": 0.9,
        "summary": "The code contains a vulnerable RSA implementation using small primes and a simplified modular exponentiation. It also includes a simplified Korean hash function, likely based on HAS-160, which is a Korean domestic algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "skipjack_government_cipher",
      "file_name": "skipjack_government_cipher.c",
      "response_time": 3.373220920562744,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements the Skipjack block cipher, which is a symmetric cipher and thus not directly vulnerable to quantum attacks in the same way as asymmetric algorithms like RSA, DSA, or ECDSA. However, its relatively small key size (80 bits) makes it vulnerable to classical brute-force attacks and potentially more susceptible to Grover's algorithm, which provides a quadratic speedup for key search.",
        "detected_algorithms": [
          "Skipjack"
        ],
        "recommendations": "Replace Skipjack with a modern, quantum-resistant symmetric cipher such as AES-256 or a post-quantum cryptography (PQC) algorithm like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures, if confidentiality is a major concern. If only authentication is needed, consider using a quantum-resistant MAC algorithm.",
        "evidence": "The code defines the Skipjack block cipher with a key size of 10 bytes (80 bits) and an S-box (f_table).",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "skipjack_government_cipher",
      "file_name": "skipjack_government_cipher.c",
      "response_time": 3.5887322425842285,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: DES (Evidence: The code implements Skipjack, which is a block cipher similar to DES)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The code implements Skipjack, a block cipher similar to DES, which is vulnerable to Grover's algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "smart_card_security",
      "file_name": "smart_card_security.c",
      "response_time": 3.151160955429077,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code uses a TEA-like cipher for authentication, which is a symmetric block cipher. While not directly broken by quantum computers in the same way as RSA or ECC, its relatively small key size (derived from CARD_KEY_SIZE = 16, implying a 128-bit key) makes it vulnerable to Grover's algorithm, which can reduce the effective key size by half. The key schedule generation also appears weak and could be susceptible to attacks.",
        "detected_algorithms": [
          "TEA-like cipher"
        ],
        "recommendations": "Replace the TEA-like cipher with a post-quantum cryptographic algorithm such as CRYSTALS-Kyber or SABER for key exchange and CRYSTALS-Dilithium or Falcon for digital signatures. Increase the key size to at least 256 bits even if using a classical algorithm as an interim measure. Implement proper key derivation functions (KDFs) instead of the simple key schedule.",
        "evidence": "The code implements a TEA-like cipher in the tea_encrypt_block function. The init_card_security function generates a weak key schedule based on the master key.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "smart_card_security",
      "file_name": "smart_card_security.c",
      "response_time": 3.18027400970459,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: TEA (Evidence: tea_encrypt_block function)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code uses a TEA-like cipher for smart card authentication, which is vulnerable to Grover's algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "tiger_hash_function",
      "file_name": "tiger_hash_function.c",
      "response_time": 2.4756548404693604,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements the Tiger hash function, which is not directly vulnerable to quantum attacks. However, hash functions are often used in conjunction with cryptographic algorithms that are vulnerable. Further context is needed to determine if the overall system is vulnerable.",
        "detected_algorithms": [
          "Tiger Hash"
        ],
        "recommendations": "While Tiger Hash itself isn't directly broken by quantum computers, ensure it's not used in conjunction with vulnerable algorithms like RSA, DSA, or ECDSA. Consider using SHA-3 or BLAKE3 as alternatives.",
        "evidence": "The code contains the implementation of the Tiger hash function, including S-boxes and round functions.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "tiger_hash_function",
      "file_name": "tiger_hash_function.c",
      "response_time": 3.136183977127075,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "twofish_advanced_encryption",
      "file_name": "twofish_advanced_encryption.c",
      "response_time": 2.9013240337371826,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "The code implements the Twofish block cipher, which is a symmetric encryption algorithm and not directly vulnerable to quantum attacks in the same way as asymmetric algorithms like RSA, DSA, or ECDSA. However, its security relies on the key size and the absence of exploitable vulnerabilities in its structure. While not directly broken by quantum computers, the key size might need to be increased to maintain security in a post-quantum world.",
        "detected_algorithms": [
          "Twofish"
        ],
        "recommendations": "Consider using a post-quantum secure symmetric cipher like AES with a larger key size (e.g., AES-256) or exploring emerging post-quantum symmetric algorithms if very long-term security is required. Also, ensure proper key management and generation practices are followed.",
        "evidence": "The code implements Twofish block cipher components such as S-boxes (q0, q1), MDS matrix, and Galois field multiplication.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "twofish_advanced_encryption",
      "file_name": "twofish_advanced_encryption.c",
      "response_time": 3.0251126289367676,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "whirlpool_hash_digest",
      "file_name": "whirlpool_hash_digest.c",
      "response_time": 2.7401647567749023,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements the Whirlpool hash function, which is not quantum-resistant. While Whirlpool itself isn't directly broken by quantum computers in the same way as RSA or ECC, its use in conjunction with vulnerable algorithms or protocols would still pose a risk. The presence of an S-box and round-based operations are structural indicators.",
        "detected_algorithms": [
          "Whirlpool"
        ],
        "recommendations": "Consider using SHA-3 or other quantum-resistant hash functions if the hash is used in a context where quantum resistance is required.",
        "evidence": "The code defines constants and structures related to the Whirlpool hash algorithm, including the S-box and number of rounds.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "whirlpool_hash_digest",
      "file_name": "whirlpool_hash_digest.c",
      "response_time": 3.1102137565612793,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "NOT DETECTED",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "source_code",
      "test_id": "wireless_network_encryption",
      "file_name": "wireless_network_encryption.c",
      "response_time": 2.3240270614624023,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The code implements RC4, a stream cipher, for wireless network encryption. RC4 is considered a legacy algorithm and is vulnerable to various attacks, including those that could be enhanced by quantum computers.",
        "detected_algorithms": [
          "RC4"
        ],
        "recommendations": "Replace RC4 with a modern, quantum-resistant encryption algorithm such as AES-GCM or ChaCha20-Poly1305. Ensure proper key management and IV generation practices are followed.",
        "evidence": "The code defines RC4_STATE_SIZE, init_wireless_cipher, generate_keystream_byte, and encrypt_wireless_packet functions, indicating RC4 implementation.",
        "confidence_score": 0.99,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "source_code",
      "test_id": "wireless_network_encryption",
      "file_name": "wireless_network_encryption.c",
      "response_time": 3.508819341659546,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Source Code Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "quantum_vulnerable_rsa_implementations_and_usage_patterns": "NOT DETECTED",
          "elliptic_curve_cryptography_ecc_ecdsa_ecdh_implementations": "NOT DETECTED",
          "discrete_logarithm_based_algorithms_dsa_dh_elgamal": "NOT DETECTED",
          "korean_domestic_algorithms_seed_aria_hight_lea_kcdsa_ec_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_ciphers_vulnerable_to_grover's_algorithm_aes_128_3des_des_rc4": "DETECTED: RC4 (Evidence: Implementation of RC4 key scheduling algorithm and keystream generation in init_wireless_cipher and generate_keystream_byte functions)",
          "weak_hash_functions_md5_sha_1_sha_256_with_reduced_security": "NOT DETECTED",
          "vulnerable_padding_schemes_pkcs_1_v1_5_weak_oaep": "NOT DETECTED",
          "insecure_random_number_generators_and_key_derivation_functions": "NOT DETECTED",
          "obfuscated_or_indirect_implementations_of_vulnerable_algorithms": "NOT DETECTED",
          "hybrid_systems_mixing_quantum_vulnerable_and_quantum_resistant_algorithms": "NOT DETECTED",
          "legacy_cryptographic_libraries_and_deprecated_cipher_suites": "NOT DETECTED",
          "implementation_specific_vulnerabilities_in_quantum_vulnerable_algorithms": "DETECTED: RC4 (Evidence: The code implements RC4, which is known to have implementation vulnerabilities, especially related to key scheduling and bias in the keystream. The use of a fixed key and IV further exacerbates these vulnerabilities.)"
        },
        "confidence_score": 0.9,
        "summary": "The code implements RC4 stream cipher, which is vulnerable to Grover's algorithm and known implementation vulnerabilities. The use of a fixed key and IV is also a significant security concern."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "adaptive_multi_tenant_crypto_orchestrator",
      "file_name": "adaptive_multi_tenant_crypto_orchestrator.s",
      "response_time": 3.9923417568206787,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 7,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 RSA와 ECDSA에 취약한 알고리즘을 사용합니다. 'curve_p256_handler'는 ECDSA에 사용될 수 있는 타원 곡선 P-256을 나타냅니다. 'modular_4096_handler'와 'modular_2048_handler'는 RSA에 사용될 수 있는 모듈러 연산을 나타냅니다. 또한, 'standard_256_gcm_handler', 'standard_128_cbc_handler', 'stream_alg20_handler', 'digest_alg3_384_handler', 'blake2b_handler', 'digest_alg256_handler'와 같은 대칭 암호 및 해시 알고리즘이 사용되지만, 이들은 양자 공격에 직접적으로 취약하지는 않지만, 키 교환 프로토콜이 취약한 경우 전체 시스템의 보안을 약화시킬 수 있습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA"
        ],
        "recommendations": "RSA 및 ECDSA를 Kyber, Dilithium, Falcon, SPHINCS+와 같은 양자 내성 암호 알고리즘으로 대체하는 것이 좋습니다. 또한, 대칭 암호 및 해시 알고리즘의 키 크기를 늘리고, 양자 내성 키 교환 프로토콜을 사용하는 것을 고려해야 합니다.",
        "evidence": "바이너리 파일에 'curve_p256_handler', 'modular_4096_handler', 'modular_2048_handler' 문자열이 포함되어 있습니다. 이는 ECDSA 및 RSA와 관련된 알고리즘을 사용하고 있음을 나타냅니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "adaptive_multi_tenant_crypto_orchestrator",
      "file_name": "adaptive_multi_tenant_crypto_orchestrator.s",
      "response_time": 4.520909070968628,
      "json_valid": true,
      "true_positives": 4,
      "false_positives": 1,
      "false_negatives": 5,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA (Evidence: modular_4096_handler, modular_2048_handler are used as primary algorithms for tenants, suggesting RSA or similar modular exponentiation based algorithms)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Cryptography (Evidence: curve_p256_handler is used as a primary algorithm for a tenant, suggesting ECC)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES (Evidence: standard_256_gcm_handler, standard_128_cbc_handler are used as symmetric algorithms, suggesting AES in GCM and CBC modes)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: SHA (Evidence: digest_alg3_384_handler, digest_alg256_handler are used as hash algorithms, suggesting SHA variants)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "DETECTED: Cryptographic API calls (Evidence: call *%rax within authenticate_tenant, where %rax holds a primary_algorithm handler, indicating a dynamic call to a cryptographic function)",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA, ECC, AES, and SHA variants are detected based on handler names and algorithm configurations. The code uses dynamic algorithm selection, which could potentially include vulnerable algorithms. The use of modular_4096_handler and modular_2048_handler suggests RSA or similar algorithms with key sizes that may be vulnerable in the future. The presence of standard_128_cbc_handler indicates the use of AES-128 in CBC mode, which is considered less secure than more modern modes like GCM."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "advanced_block_standard_operations",
      "file_name": "advanced_block_standard_operations.s",
      "response_time": 3.8748438358306885,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 AES와 유사한 블록 암호화 연산이 발견되었습니다. `k_cipher_4 data_402000(%rip), %r15`는 키 테이블 접근을 나타내고, `movzbl (%r15,%rdx), %edx`는 S-box lookup과 유사한 연산을 나타냅니다. 또한, 루프 구조는 블록 암호의 라운드 함수를 암시합니다. 이러한 연산은 AES와 같은 대칭 키 알고리즘에서 흔히 사용되며, 현재 양자 컴퓨터에 취약합니다.",
        "detected_algorithms": [
          "AES (추정)"
        ],
        "recommendations": "AES와 같은 기존 암호 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. NIST PQC competition에서 표준화된 알고리즘(예: Kyber, Dilithium)을 사용하는 것을 고려하십시오. 기존 시스템과의 호환성을 유지하기 위해 하이브리드 접근 방식(기존 알고리즘과 PQC 알고리즘을 함께 사용)을 고려할 수 있습니다.",
        "evidence": "어셈블리 코드에서 S-box lookup (`movzbl (%r15,%rdx), %edx`) 및 키 테이블 접근 (`k_cipher_4 data_402000(%rip), %r15`) 패턴이 발견되었습니다. 루프 구조는 블록 암호의 라운드 함수를 암시합니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "advanced_block_standard_operations",
      "file_name": "advanced_block_standard_operations.s",
      "response_time": 3.9906938076019287,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES (Evidence: The code uses a lookup table `data_402000` which resembles an S-box, and the `sub_401100` function uses this S-box for byte substitution. The `sub_401200` function performs byte rotations. The `sub_401400` function performs XOR operations with a key. These operations are characteristic of AES-like ciphers.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerability (Evidence: The `sub_401100` function uses a lookup table (`data_402000`) for byte substitution. This S-box lookup is a common source of timing side-channel vulnerabilities.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code appears to implement an AES-like cipher with potential side-channel vulnerabilities due to S-box lookups."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "aes_key_expansion_module",
      "file_name": "aes_key_expansion_module.s",
      "response_time": 3.067803144454956,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 AES 키 확장 모듈을 구현하고 있으며, 128/192/256비트 키를 지원합니다. AES는 Grover's 알고리즘에 취약하여 유효 보안 강도가 절반으로 감소합니다. 문자열에서 'Post_Classical-vulnerable to Grover's algorithm'이라는 명시적인 취약점 설명이 발견되었습니다.",
        "detected_algorithms": [
          "AES"
        ],
        "recommendations": "AES를 양자 내성 암호(PQC)로 대체하거나, AES와 PQC 알고리즘을 함께 사용하여 보안 강도를 높이는 하이브리드 방식을 고려해야 합니다. NIST PQC competition에서 선정된 알고리즘을 검토하고, 애플리케이션의 보안 요구 사항에 맞는 알고리즘을 선택해야 합니다.",
        "evidence": "문자열: 'Post_Classical-vulnerable to Grover's algorithm', 'Block transformation implementation', 'FIPS 197 compliant implementation for 128/192/256-bit keys'",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "aes_key_expansion_module",
      "file_name": "aes_key_expansion_module.s",
      "response_time": 3.278369903564453,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES (Evidence: Block transformation implementation, FIPS 197 compliant implementation for 128/192/256-bit keys, SubBytes: apply S-box to each byte, standard_sbox)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected AES implementation based on block transformation, FIPS 197 compliance, and S-box usage. The code supports 128/192/256-bit keys, indicating AES-128, AES-192, and AES-256."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "aria_encryption_engine",
      "file_name": "aria_encryption_engine.s",
      "response_time": 2.7696640491485596,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 ARIA 암호화 알고리즘을 사용하는 것으로 보입니다. ARIA는 블록 암호이며, Grover의 알고리즘에 취약하여 양자 컴퓨터에 의해 효과적인 키 길이가 절반으로 줄어들 수 있습니다. 이는 'Post_Classical-vulnerable to Grover's algorithm (effective key length halved)' 문자열에서 명확히 드러납니다.",
        "detected_algorithms": [
          "ARIA"
        ],
        "recommendations": "ARIA는 양자 공격에 취약하므로, AES와 같은 다른 대칭 암호 알고리즘으로 대체하거나, 양자 내성 암호(PQC)로 마이그레이션하는 것을 고려해야 합니다. 특히, ARIA의 사용을 중단하고, Kyber, Dilithium과 같은 NIST 표준 PQC 알고리즘으로 전환하는 것이 좋습니다.",
        "evidence": "바이너리 파일에서 'ARIA', 'Post_Classical-vulnerable to Grover's algorithm (effective key length halved)' 문자열이 발견되었습니다. 또한, 'transform_encrypt_block' 함수는 ARIA 암호화 블록 처리를 구현하는 것으로 보입니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "aria_encryption_engine",
      "file_name": "aria_encryption_engine.s",
      "response_time": 3.8854708671569824,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: transform_substitution_s1, transform_substitution_s2, transform_diffusion_layer_a, transform_round_key_addition, transform_sbox1)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerability (Evidence: S-box lookup using `addq %rbx, %rdx; movb (%rdx), %bl`, which is vulnerable to timing attacks)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Detected a Korean block cipher implementation with S-boxes and diffusion layers. The S-box lookup is vulnerable to timing side-channel attacks. The cipher is vulnerable to Grover's algorithm due to its 128-bit block size and key sizes."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "automotive_ecu_cryptographic_unit",
      "file_name": "automotive_ecu_cryptographic_unit.s",
      "response_time": 3.4846112728118896,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'can_bus_authentication' 및 'domesticn_automotive_cipher' 함수가 호출되는 것을 확인했습니다. 이러한 함수가 기존 암호화 알고리즘(RSA, ECDSA 등)을 사용하는 경우 양자 공격에 취약할 수 있습니다. 또한, x86-64 아키텍처에서 SSE/AVX 명령어를 사용하는 것은 AES 또는 ChaCha20 구현을 나타낼 수 있으며, 이는 양자 내성이 아닙니다.",
        "detected_algorithms": [],
        "recommendations": "can_bus_authentication 및 domesticn_automotive_cipher 함수에서 사용되는 암호화 알고리즘을 확인하고, 필요한 경우 양자 내성 암호(PQC)로 대체해야 합니다. AES 또는 ChaCha20이 사용되는 경우, 양자 내성 대안으로 교체하는 것을 고려하십시오.",
        "evidence": "callq 4010f0 <can_bus_authentication>, callq 401120 <domesticn_automotive_cipher>, sub $0x50,%rsp, movl $0xd2629484,-0x4(%rbp), movl $0x93a837ca,-0x8(%rbp)",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "automotive_ecu_cryptographic_unit",
      "file_name": "automotive_ecu_cryptographic_unit.s",
      "response_time": 4.3992979526519775,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: The function domesticn_automotive_cipher at 0x401120 contains XOR operations, rotations (rol $0x5,%eax at 0x40117b), and memory access patterns that are characteristic of Korean block ciphers. The function name itself suggests a domestic automotive cipher.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: The function domesticn_automotive_cipher at 0x401120 and the call to it at 0x401039 suggest the presence of a Korean cryptographic algorithm implementation.)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "A Korean cryptographic algorithm is detected in the domesticn_automotive_cipher function. The function contains XOR operations, rotations, and memory access patterns characteristic of Korean block ciphers."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "banking_transaction_processor",
      "file_name": "banking_transaction_processor.s",
      "response_time": 3.7910561561584473,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 암호화 관련 함수 `block_key_schedule` 및 `block_encrypt_block`이 사용되었으며, 이는 사용자 정의 블록 암호 알고리즘의 구현을 나타낼 수 있습니다. 또한, `movq` 명령어를 사용하여 상수 값을 메모리에 저장하는 패턴이 발견되었는데, 이는 암호화 키 또는 S-Box와 같은 암호화 관련 상수를 나타낼 수 있습니다. x86-64 아키텍처에서 이러한 블록 암호 알고리즘이 RSA, DSA, ECDSA와 같은 기존 알고리즘과 함께 사용될 가능성이 높으며, 이러한 알고리즘은 양자 공격에 취약합니다.",
        "detected_algorithms": [],
        "recommendations": "기존 암호 알고리즘(RSA, ECDSA 등)을 사용하는 경우, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. NIST PQC competition에서 선정된 알고리즘을 검토하고, 기존 시스템과의 호환성을 고려하여 적절한 알고리즘을 선택해야 합니다. 또한, 사용자 정의 암호 알고리즘의 보안성을 강화하고, PQC 알고리즘과의 통합을 고려해야 합니다.",
        "evidence": "함수 호출 `callq 401150 <block_key_schedule>`, `callq 401180 <block_encrypt_block>`, 상수 로딩 `movq $0x16157e2b,-0x8(%rbp)` 등",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "banking_transaction_processor",
      "file_name": "banking_transaction_processor.s",
      "response_time": 3.682360887527466,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential Feistel Network (Evidence: feistel_function at 401070, block_key_schedule at 401150, block_encrypt_block at 401180)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.5,
        "summary": "Potential Feistel network detected based on function names and structure, but no specific vulnerable algorithm identified with certainty."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "biometric_authentication_engine",
      "file_name": "biometric_authentication_engine.s",
      "response_time": 3.512650966644287,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 암호화 관련 함수 호출 및 상수가 발견되었습니다. 특히 `biometric_key_extraction` 및 `domesticn_biometric_cipher` 함수 호출은 암호화 작업이 수행됨을 나타냅니다. 또한, 상수 0x6479825a, 0xe4f51c3d, 0x9af7448b, 0x761932e, 0x8, 0x16 등이 암호화 키 또는 파라미터와 관련될 수 있습니다. 현재 분석된 코드 조각만으로는 정확한 알고리즘을 식별하기 어렵지만, 이러한 함수 및 상수 사용은 비양자내성 암호 알고리즘이 사용될 가능성을 높입니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 암호화 알고리즘을 정확히 식별하고, 해당 알고리즘이 양자 공격에 취약한 경우, 양자내성 암호(PQC)로 대체하는 것을 권장합니다. 또한, 암호화 키 관리 및 저장 방식의 안전성을 검토하고 강화해야 합니다.",
        "evidence": "`biometric_key_extraction` 함수 호출, `domesticn_biometric_cipher` 함수 호출, 상수 0x6479825a, 0xe4f51c3d, 0x9af7448b, 0x761932e, 0x8, 0x16",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "biometric_authentication_engine",
      "file_name": "biometric_authentication_engine.s",
      "response_time": 3.6546571254730225,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm signatures (Evidence: callq 4010e0 <domesticn_biometric_cipher>)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic library signatures and domestic algorithm implementations (Evidence: callq 4010e0 <domesticn_biometric_cipher>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected a call to 'domesticn_biometric_cipher', which suggests the possible use of a Korean cryptographic algorithm. Further analysis is needed to determine the specific algorithm and its quantum vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "blake2b_hash_engine",
      "file_name": "blake2b_hash_engine.s",
      "response_time": 2.458696126937866,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "BLAKE2b는 양자 내성 해시 함수입니다. 따라서 이 바이너리는 양자 공격에 취약하지 않습니다.",
        "detected_algorithms": [],
        "recommendations": "BLAKE2b는 양자 내성이므로 현재로서는 PQC로 전환할 필요가 없습니다. 그러나 다른 암호화 구성 요소(예: 키 교환, 디지털 서명)가 있는 경우 해당 구성 요소의 양자 내성을 평가해야 합니다.",
        "evidence": "바이너리는 BLAKE2b 해시 함수를 사용합니다. 초기화 벡터와 라운드 상수가 바이너리에 포함되어 있습니다.",
        "confidence_score": 1.0,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "blake2b_hash_engine",
      "file_name": "blake2b_hash_engine.s",
      "response_time": 3.394954204559326,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: BLAKE2b-512 (Evidence: XOR with parameter block for BLAKE2b-512, line 21)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected BLAKE2b-512 hash function implementation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "block_cipher_operations",
      "file_name": "block_cipher_operations.s",
      "response_time": 3.770688056945801,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 암호화 관련 연산이 반복적으로 수행되는 것을 확인했습니다. 특히 `sub_401100` 함수에서 테이블 조회 기반의 바이트 단위 연산이 수행되는 것으로 보아, 이는 AES와 같은 블록 암호 알고리즘의 S-box 연산과 유사합니다. 또한, `k_cipher_4 data_402000(%rip), %r15` 구문은 암호화 키 또는 상수를 사용하는 것으로 추정됩니다. 이러한 블록 암호 알고리즘은 양자 컴퓨팅 공격에 취약하므로, PQC로의 전환이 필요합니다.",
        "detected_algorithms": [
          "AES (추정)"
        ],
        "recommendations": "AES와 같은 블록 암호 알고리즘을 사용하는 경우, 양자 내성 암호(PQC)로 대체하는 것을 권장합니다. NIST에서 표준화된 PQC 알고리즘(예: Kyber, Dilithium)을 도입하고, 기존 암호 시스템과의 호환성을 고려하여 점진적으로 전환해야 합니다. 또한, 암호화 키 관리 시스템을 강화하고, 암호화 알고리즘의 안전성을 주기적으로 검증해야 합니다.",
        "evidence": "반복적인 암호화 연산 (sub_401100), 테이블 조회 기반 연산, 암호화 키/상수 사용 (k_cipher_4 data_402000(%rip), %r15)",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "block_cipher_operations",
      "file_name": "block_cipher_operations.s",
      "response_time": 3.58286714553833,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES-like S-box usage (Evidence: data_402000 contains an S-box similar to the AES S-box, sub_401100 uses this S-box for byte substitution)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially detected AES-like S-box usage in sub_401100, which could indicate a vulnerable symmetric cipher implementation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "blockchain_consensus_validator",
      "file_name": "blockchain_consensus_validator.s",
      "response_time": 3.586667060852051,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'consensus_signature_verification' 함수가 호출되는 것을 확인했습니다. 이 함수가 RSA, ECDSA 또는 DSA와 같은 비양자내성 알고리즘을 사용하는 경우, 양자 공격에 취약할 수 있습니다. 또한, 'merkle_tree_computation' 함수가 호출되는 것을 확인했습니다. 머클 트리는 그 자체로는 암호화 알고리즘이 아니지만, 암호화 시스템의 일부로 사용될 수 있으며, 사용되는 암호화 해시 함수가 비양자내성인 경우 취약점이 발생할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "consensus_signature_verification 함수에서 사용되는 서명 알고리즘을 확인하고, RSA, ECDSA 또는 DSA와 같은 비양자내성 알고리즘을 사용하는 경우, Kyber, Dilithium, Falcon과 같은 양자내성 암호(PQC)로 전환하는 것이 좋습니다. 또한, merkle_tree_computation 함수에서 사용되는 해시 함수를 SHAKE, BLAKE3와 같은 양자내성 해시 함수로 교체하는 것을 고려해야 합니다.",
        "evidence": "함수 호출: consensus_signature_verification, merkle_tree_computation",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "blockchain_consensus_validator",
      "file_name": "blockchain_consensus_validator.s",
      "response_time": 3.238335371017456,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms were detected based on explicit evidence in the provided assembly code."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "chacha20_stream_processor",
      "file_name": "chacha20_stream_processor.s",
      "response_time": 2.8724350929260254,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "ChaCha20 스트림 암호는 양자 컴퓨팅 공격에 취약하지 않지만, 바이너리에서 RSA, DSA, ECDSA와 같은 다른 취약한 알고리즘이 사용될 가능성이 있습니다. 또한, 'expand 32-byte k'와 같은 문자열은 ChaCha20의 사용을 나타내지만, 다른 취약한 알고리즘과 함께 사용될 경우 전체 시스템의 보안을 약화시킬 수 있습니다.",
        "detected_algorithms": [
          "ChaCha20"
        ],
        "recommendations": "ChaCha20 자체는 양자 내성이 아니지만, 현재로서는 안전한 대안으로 간주됩니다. 그러나 RSA, DSA, ECDSA와 같은 다른 알고리즘이 사용되는 경우, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. 또한, 암호화 키 관리 및 안전한 구현에 대한 모범 사례를 준수해야 합니다.",
        "evidence": "바이너리 문자열: 'expand 32-byte k', 'state_matrix', 'key_buffer', 'nonce_value', 'FastBlockCipher'",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "chacha20_stream_processor",
      "file_name": "chacha20_stream_processor.s",
      "response_time": 5.4554901123046875,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms detected based on explicit evidence."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "cloud_storage_encryption_processor",
      "file_name": "cloud_storage_encryption_processor.s",
      "response_time": 4.201093912124634,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'cloud_key_derivation' 및 'data_transformation_layer' 함수가 호출되는 것을 확인했습니다. 이러한 함수가 RSA, ECDSA와 같은 비양자내성 암호 알고리즘을 사용하는 경우, 양자 공격에 취약할 수 있습니다. 특히, 0x401008, 0x401010, 0x401018, 0x401020에서 보이는 상수들은 암호화 키 또는 IV와 관련될 수 있으며, 이러한 상수들이 하드코딩되어 있다면 취약점이 될 수 있습니다. 추가적인 분석을 통해 사용된 암호 알고리즘을 정확히 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "cloud_key_derivation 및 data_transformation_layer 함수에서 사용되는 암호 알고리즘을 확인하고, RSA, ECDSA와 같은 비양자내성 알고리즘을 사용하는 경우, Kyber, Dilithium과 같은 양자내성 암호 알고리즘으로 대체하는 것을 고려해야 합니다. 또한, 키 교환 및 디지털 서명 프로토콜을 양자 내성 방식으로 업데이트해야 합니다. 하드코딩된 상수를 제거하고 안전한 키 관리 방식을 적용해야 합니다.",
        "evidence": "callq 4011d0 <cloud_key_derivation>, callq 401200 <data_transformation_layer>, movq $0x7b777c63,-0x8(%rbp), movq $0xc56f6bf2,-0x10(%rbp), movq $0x2b670130,-0x18(%rbp), movq $0x76abd7fe,-0x20(%rbp)",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "cloud_storage_encryption_processor",
      "file_name": "cloud_storage_encryption_processor.s",
      "response_time": 3.3787150382995605,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: domesticn_cloud_cipher function call at 401050)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The analysis detected a potential Korean domestic cipher implementation based on the function name 'domesticn_cloud_cipher'. Further investigation is needed to determine the specific algorithm and its quantum vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "crypto_trading_platform_engine",
      "file_name": "crypto_trading_platform_engine.s",
      "response_time": 3.891226291656494,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 비양자내성 암호 알고리즘인 RSA 또는 ECDSA의 사용을 암시하는 문자열이나 시그니처가 직접적으로 발견되지는 않았습니다. 하지만 `wallet_key_derivation` 및 `transaction_signature` 함수 호출은 암호화 작업이 수행됨을 나타냅니다. 구체적인 알고리즘은 추가 분석이 필요하지만, 현재 정보만으로는 PQC에 취약할 가능성이 높습니다. 특히, `crypto_trading_platform_engine.s` 파일의 어셈블리 코드에서 `callq 4010d0 <wallet_key_derivation>` 및 `callq 401100 <transaction_signature>` 호출은 암호화 키 생성 및 트랜잭션 서명과 관련된 함수를 호출하고 있음을 나타냅니다. 이러한 함수들이 RSA, ECDSA와 같은 기존 알고리즘을 사용하고 있다면 양자 공격에 취약할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "해당 바이너리에서 사용되는 암호화 알고리즘을 정확히 파악하고, RSA, ECDSA와 같은 비양자내성 알고리즘을 사용하는 경우, 양자내성 암호 알고리즘으로의 전환을 고려해야 합니다. NIST에서 권고하는 알고리즘을 검토하고, 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립하는 것이 좋습니다. 또한, 암호화 라이브러리를 업데이트하고, 안전한 키 관리 방식을 적용해야 합니다.",
        "evidence": "함수 `wallet_key_derivation` 및 `transaction_signature` 호출",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "crypto_trading_platform_engine",
      "file_name": "crypto_trading_platform_engine.s",
      "response_time": 3.683912992477417,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: domesticn_trading_cipher function name at 0000000000401140)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The analysis detected a function named 'domesticn_trading_cipher' which suggests the potential use of a Korean domestic cryptographic algorithm. Further analysis of the function's implementation is needed to confirm the specific algorithm and its vulnerability status."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "cryptographic_wallet_manager",
      "file_name": "cryptographic_wallet_manager.s",
      "response_time": 3.3783087730407715,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 secp256k1 타원 곡선 암호화 및 서명 알고리즘(curve_sig_sign)이 사용된 것으로 보입니다. secp256k1은 양자 공격에 취약한 ECDSA의 한 종류입니다.",
        "detected_algorithms": [
          "ECDSA",
          "secp256k1"
        ],
        "recommendations": "secp256k1 및 ECDSA를 양자 내성 암호 알고리즘(예: Dilithium, Falcon, SPHINCS+)으로 대체하는 것을 고려하십시오. 기존 시스템과의 호환성을 유지하기 위해 하이브리드 접근 방식을 사용하는 것을 고려할 수도 있습니다.",
        "evidence": "함수 호출 `callq 401090 <secp256k1_point_mul>` 및 `callq 4011c0 <curve_sig_sign>`는 secp256k1 기반 ECDSA 서명 알고리즘의 사용을 나타냅니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "cryptographic_wallet_manager",
      "file_name": "cryptographic_wallet_manager.s",
      "response_time": 3.683983087539673,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Point Multiplication (Evidence: callq 401090 <secp256k1_point_mul>)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Hashing Algorithm (Evidence: callq 401300 <digest_alg256_hash>)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "DETECTED: Curve Signature (Evidence: callq 4011c0 <curve_sig_sign>)",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "The analysis detected elliptic curve point multiplication (secp256k1_point_mul), a curve signature algorithm (curve_sig_sign), and a hashing algorithm (digest_alg256_hash). Further analysis is needed to determine the specific hashing algorithm and signature scheme used."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "diffie_hellman_key_exchange",
      "file_name": "diffie_hellman_key_exchange.s",
      "response_time": 3.0183420181274414,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The provided assembly code implements a Diffie-Hellman key exchange protocol. Diffie-Hellman is vulnerable to quantum attacks, specifically Shor's algorithm, which can efficiently compute discrete logarithms. The code explicitly mentions using a 2048-bit prime, which, while considered strong in pre-quantum cryptography, is insufficient against quantum computers. The use of modular exponentiation and the discrete logarithm problem makes it vulnerable.",
        "detected_algorithms": [
          "Diffie-Hellman"
        ],
        "recommendations": "Migrate to post-quantum key exchange algorithms such as those based on lattice cryptography (e.g., Kyber) or code-based cryptography (e.g., McEliece). Consider hybrid approaches that combine classical and post-quantum algorithms for a transition period.",
        "evidence": "The assembly code contains calls to functions related to key generation, public key computation, and key exchange, all within the context of a Diffie-Hellman protocol. The comments explicitly state 'Discrete Logarithm Key Exchange Implementation' and 'Post_Classical-vulnerable due to mathematical vulnerabilities'. The use of a 2048-bit prime is also a strong indicator of a classical Diffie-Hellman implementation.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "diffie_hellman_key_exchange",
      "file_name": "diffie_hellman_key_exchange.s",
      "response_time": 4.0519328117370605,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 4,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: Discrete Logarithm (Evidence: Implementation of a Discrete Logarithm Key Exchange Protocol)",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: call fast_modular_exponentiation, mulq, divq)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Fast Modular Exponentiation (Evidence: call fast_modular_exponentiation)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Key Storage (Evidence: alice_private_key, bob_private_key, alice_public_key, bob_public_key)",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential Side-Channel Vulnerability (Evidence: fast_modular_exponentiation implementation using binary method)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "Discrete Logarithm Key Exchange implementation detected with modular arithmetic and fast modular exponentiation. Potential side-channel vulnerabilities in modular exponentiation. Key storage patterns identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "digital_signature_processor",
      "file_name": "digital_signature_processor.s",
      "response_time": 3.1469080448150635,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'sig_alg_key_generation' 함수를 호출하여 키를 생성하고, 'digest_alg1_digest' 함수를 호출하여 다이제스트를 생성합니다. 구체적인 알고리즘은 문자열 분석을 통해 파악해야 하지만, 함수 이름으로 보아 디지털 서명 알고리즘을 사용하는 것으로 추정됩니다. x86-64 아키텍처를 사용하며, SSE/AVX 명령어를 사용할 가능성이 있습니다 (Crypto_Register_Usage 참조).",
        "detected_algorithms": [],
        "recommendations": "사용된 디지털 서명 알고리즘을 정확히 파악하고, RSA, DSA, ECDSA와 같은 비양자내성 알고리즘을 사용하는 경우, 양자내성 암호(PQC)로의 전환을 고려해야 합니다. 특히 키 생성 및 다이제스트 생성 루틴을 PQC 알고리즘으로 대체하는 것을 권장합니다.",
        "evidence": "함수 호출: sig_alg_key_generation, digest_alg1_digest",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "digital_signature_processor",
      "file_name": "digital_signature_processor.s",
      "response_time": 3.399984836578369,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: callq 401130 <modular_exponentiation> in <sig_alg_key_generation> at 401105)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation detected in sig_alg_key_generation function."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "distributed_blockchain_consensus_engine",
      "file_name": "distributed_blockchain_consensus_engine.s",
      "response_time": 2.972537040710449,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 'aggregate_validator_signatures' 함수를 호출하여 다중 서명 집계를 수행합니다. 이는 RSA, ECDSA와 같은 기존 암호화 알고리즘을 사용할 가능성이 높으며, 양자 공격에 취약할 수 있습니다. 또한, 'validator_credentials'를 저장하고 검증하는 과정에서 취약한 알고리즘이 사용될 가능성이 있습니다.",
        "detected_algorithms": [],
        "recommendations": "다중 서명 집계 및 validator 인증에 사용되는 암호화 알고리즘을 조사하고, 양자 내성 암호(PQC)로 대체하는 것을 고려해야 합니다. 특히, 'aggregate_validator_signatures' 및 'verify_validator_identities' 함수를 중점적으로 검토해야 합니다.",
        "evidence": "바이너리 파일은 'aggregate_validator_signatures' 함수를 호출하여 다중 서명 집계를 수행합니다. 이는 RSA, ECDSA와 같은 기존 암호화 알고리즘을 사용할 가능성이 높습니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "distributed_blockchain_consensus_engine",
      "file_name": "distributed_blockchain_consensus_engine.s",
      "response_time": 3.390178918838501,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular arithmetic (Evidence: call initialize_vdf_modular_system)",
          "cryptographic_library_calls_and_api_signatures": "DETECTED: BLS signature aggregation (Evidence: call initialize_bls_signature_system)",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code uses BLS signature aggregation and modular arithmetic. BLS is mentioned as post_classical-vulnerable."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "dsa_signature_verification",
      "file_name": "dsa_signature_verification.s",
      "response_time": 2.851928949356079,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The binary contains strings indicating the use of the Digital Signature Algorithm (DSA) for signature verification. DSA is vulnerable to attacks from quantum computers due to its reliance on the discrete logarithm problem.",
        "detected_algorithms": [
          "DSA"
        ],
        "recommendations": "Migrate to post-quantum cryptographic signature schemes such as Dilithium, Falcon, or SPHINCS+.",
        "evidence": "Strings such as 'Signature algorithm implementation', 'NIST FIPS 186-4 compliant implementation', 'Post_Classical-vulnerable due to discrete logarithm problem', 'load_public_key_components', 'compute_signature_verification', 'sig_alg_prime_p', 'sig_alg_prime_q', 'sig_alg_generator_g', 'test_public_key_y', 'signature_r_component', 'signature_s_component' indicate DSA usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "dsa_signature_verification",
      "file_name": "dsa_signature_verification.s",
      "response_time": 4.8122828006744385,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: DSA (Evidence: The code implements a signature algorithm with domain parameters p, q, and g, and includes signature verification steps involving modular inverse, hashing, and modular exponentiation. The comments mention FIPS 186-4 compliance and vulnerability due to the discrete logarithm problem. The functions initialize_sig_alg_domain_parameters, load_public_key_components, compute_signature_verification, validate_signature_result, modular_inverse, digest_alg256_digest, and fast_modular_exponentiation are all indicative of a DSA-like signature scheme.)",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: SHA (Evidence: call digest_alg256_digest, setup_digest_alg256_context. The code calls a digest algorithm with a 256-bit output, which could be a SHA-256 variant.)",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big Integer Arithmetic (Evidence: The code performs modular arithmetic operations such as modular inverse (call modular_inverse), modular exponentiation (call fast_modular_exponentiation), and modular reduction (divq instruction after multiplication). It also uses 2048-bit prime p and 256-bit prime order q, indicating large integer arithmetic.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Fast Modular Exponentiation (Evidence: call fast_modular_exponentiation. The presence of a function named 'fast_modular_exponentiation' suggests an optimization technique commonly used in asymmetric cryptography.)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The code implements a DSA-like signature algorithm vulnerable to quantum attacks due to the discrete logarithm problem. It uses SHA-256 for hashing and performs big integer arithmetic with modular exponentiation. A fast modular exponentiation optimization is present."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_curve_point_operations",
      "file_name": "elliptic_curve_point_operations.s",
      "response_time": 4.137709140777588,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 elliptic_curve_point_operations.s 파일의 어셈블리 코드를 분석한 결과, 타원 곡선 연산 관련 함수(sub_401000, sub_401100, sub_401200, sub_401300)가 사용되었음을 확인했습니다. 이는 ECDSA와 같은 타원 곡선 암호 알고리즘이 사용되었을 가능성을 시사합니다. 또한, data_402000, data_402020과 같은 데이터 섹션의 사용은 암호화 상수와 관련될 수 있습니다. 이러한 알고리즘들은 양자 컴퓨팅 공격에 취약하므로, PQC로의 전환이 필요합니다.",
        "detected_algorithms": [
          "ECDSA"
        ],
        "recommendations": "ECDSA와 같은 타원 곡선 암호 알고리즘을 사용하는 경우, 양자 내성 암호(PQC) 알고리즘으로 대체하는 것을 권장합니다. NIST에서 표준화된 PQC 알고리즘(예: Kyber, Dilithium, Falcon)을 고려하고, 기존 시스템과의 호환성을 고려하여 점진적으로 전환하는 전략을 수립해야 합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하여 PQC 지원 여부를 확인하고, 필요한 경우 PQC 라이브러리를 통합해야 합니다.",
        "evidence": "함수 이름 (sub_401000, sub_401100, sub_401200, sub_401300), 데이터 섹션 (data_402000, data_402020), 타원 곡선 연산 관련 코드 패턴",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_curve_point_operations",
      "file_name": "elliptic_curve_point_operations.s",
      "response_time": 3.3461127281188965,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Cryptography (Evidence: data_402000 and data_402020 contain potential elliptic curve parameters, specifically resembling coordinates. The function sub_401100 is called with these data points, potentially performing point operations. However, without further context, this is only a potential indicator.)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.3,
        "summary": "Potential Elliptic Curve Cryptography detected based on data constants and function calls, but requires further analysis for confirmation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_curve_scalar_multiplication",
      "file_name": "elliptic_curve_scalar_multiplication.s",
      "response_time": 3.506439208984375,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일에서 타원 곡선 스칼라 곱셈(Elliptic Curve Scalar Multiplication)이 사용된 것으로 보입니다. 'ec_scalar_multiplication' 함수와 'elliptic_point_double' 함수 호출, 그리고 'Geometric Curve' 언급은 ECC 기반 암호화 알고리즘 사용을 강하게 시사합니다. 또한, 256비트 스칼라를 사용하는 점은 ECDSA 또는 유사한 ECC 기반 서명 알고리즘의 사용 가능성을 높입니다. 이러한 알고리즘들은 양자 컴퓨터에 취약합니다.",
        "detected_algorithms": [
          "ECDSA (추정)"
        ],
        "recommendations": "ECC 기반 암호화 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. NIST에서 표준화된 알고리즘(예: Kyber, Dilithium)을 고려하고, 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립해야 합니다. 또한, 암호화 키 관리 시스템을 PQC에 맞게 업데이트해야 합니다.",
        "evidence": "바이너리 파일에 'ec_scalar_multiplication', 'elliptic_point_double' 함수 호출이 존재하며, 'Geometric Curve', 'Signature algorithm implementation', 'Curve computation implementation' 문자열이 발견되었습니다. 'Point_Multiplication_ECC' 어셈블리 패턴과 유사성이 있습니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_curve_scalar_multiplication",
      "file_name": "elliptic_curve_scalar_multiplication.s",
      "response_time": 3.8494069576263428,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Scalar Multiplication (Evidence: ec_scalar_multiplication function, elliptic_point_double function, elliptic_point_add function)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: mod_reduce function call)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Binary method for scalar multiplication (Evidence: scalar_mult_loop label, bitwise operations btq)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Elliptic Curve Scalar Multiplication and Modular Arithmetic operations detected. The code implements elliptic curve point doubling and addition, along with a binary method for scalar multiplication. Modular reduction is performed using the mod_reduce function."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_mathematical_operations",
      "file_name": "elliptic_mathematical_operations.s",
      "response_time": 3.3795766830444336,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 modular exponentiation 연산이 발견되었습니다. 이는 RSA, Diffie-Hellman, ECC와 같은 비양자내성 암호 알고리즘에서 흔히 사용되는 연산입니다. 특히 `mul` 및 `div` 명령어를 사용하여 modular reduction을 수행하는 패턴은 암호화 알고리즘의 일부일 가능성이 높습니다.",
        "detected_algorithms": [
          "RSA",
          "Diffie-Hellman",
          "ECC"
        ],
        "recommendations": "해당 바이너리에서 사용되는 암호 알고리즘을 확인하고, RSA, Diffie-Hellman, ECC와 같은 비양자내성 알고리즘을 사용하는 경우, 양자내성 암호 알고리즘으로 대체하는 것을 고려해야 합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하여 알려진 취약점을 해결하고, 가능하다면 양자내성 암호 알고리즘을 지원하는 라이브러리를 사용하는 것을 권장합니다.",
        "evidence": "modular exponentiation 연산 (mul, div), r12, r13, r14 레지스터 사용, loc_401030 루프",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "elliptic_mathematical_operations",
      "file_name": "elliptic_mathematical_operations.s",
      "response_time": 4.977993965148926,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: sub_401000 function performs modular exponentiation using mul, div, and test operations. The loop at loc_401030 and the conditional multiplication and division suggest a square-and-multiply algorithm, a common implementation of modular exponentiation used in RSA.)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: sub_401000 uses mul and div instructions, suggesting operations on large integers, potentially related to cryptographic algorithms. The data sections data_402000, data_402020, data_402040, data_402060, and data_402080 contain quadwords, which could represent large integer constants used in cryptographic operations.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential side-channel vulnerability (Evidence: The modular exponentiation in sub_401000, if implemented naively, is vulnerable to timing attacks. The conditional execution path based on bits of the exponent (test $1, %r13) can leak information about the key.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The analysis detected RSA modular exponentiation and large integer arithmetic patterns, potentially vulnerable to side-channel attacks. The code also contains data sections with quadwords that could represent large integer constants used in cryptographic operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "ellipticsignature_securehashalgo1_operations",
      "file_name": "ellipticsignature_securehashalgo1_operations.s",
      "response_time": 4.646960973739624,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 암호화 관련 연산이 수행되는 것으로 보이며, 특히 `sub_401000` 함수에서 `k_cipher_4` 데이터와 함께 `sub_401100`, `sub_401200`, `sub_401300` 함수가 호출되는 것을 통해 암호화 알고리즘이 사용되었음을 추정할 수 있습니다. 또한 `sub_401400` 함수에서 초기화 벡터로 보이는 상수값들이 사용되는 것으로 보아 해시 알고리즘 또는 암호화 알고리즘이 사용되었을 가능성이 높습니다. 구체적인 알고리즘은 추가 분석이 필요하지만, 현재 정보만으로는 양자 내성을 보장하는 알고리즘인지 판단할 수 없으므로 취약하다고 간주합니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 암호화 알고리즘을 정확히 식별하고, 해당 알고리즘이 RSA, DSA, ECDSA와 같은 비양자내성 알고리즘인 경우, SHA-3, AES-GCM-SIV, CRYSTALS-Kyber, CRYSTALS-Dilithium, FALCON, SPHINCS+ 등 양자내성암호(PQC)로 대체하는 것을 권장합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하여 알려진 취약점을 해결하고, 안전한 암호화 방식을 적용해야 합니다.",
        "evidence": "`k_cipher_4 data_402000, %r12`, `k_cipher_4 data_402020, %r13`, `call sub_401100`, `call sub_401200`, `call sub_401300`, `mov $0x67452301, %eax`, `mov $0xEFCDAB89, %ebx`, `mov $0x98BADCFE, %ecx`, `mov $0x10325476, %edx`, `mov $0xC3D2E1F0, %r8d`",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "ellipticsignature_securehashalgo1_operations",
      "file_name": "ellipticsignature_securehashalgo1_operations.s",
      "response_time": 4.186049938201904,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Potentially vulnerable SHA variant (Evidence: sub_401400 initializes constants that resemble MD5/SHA-1 initial values: 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0. sub_401500 initializes constants 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6 which are K constants used in SHA-1)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially vulnerable SHA variant detected based on initial value constants and K constants."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "embedded_authentication_processor",
      "file_name": "embedded_authentication_processor.s",
      "response_time": 3.801192045211792,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 RSA, ECDSA와 같은 비양자내성 암호 알고리즘의 직접적인 증거는 발견되지 않았지만, 'lightweight_key_schedule' 및 'feistel_round_function'과 같은 암호화 관련 함수가 사용되었으며, 이는 전통적인 암호화 알고리즘의 사용을 암시합니다. 구체적인 알고리즘을 식별하기 위해서는 추가 분석이 필요합니다. x86-64 아키텍처에서 SSE/AVX 명령어를 사용하는지 확인하여 AES 또는 ChaCha20 구현 가능성을 조사해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "현재 사용 중인 암호화 알고리즘을 정확히 식별하고, 해당 알고리즘이 양자 공격에 취약한지 평가해야 합니다. 만약 취약하다면, 양자내성 암호(PQC)로의 전환을 고려해야 합니다. NIST에서 권고하는 PQC 알고리즘을 검토하고, 기존 시스템과의 호환성을 고려하여 적절한 알고리즘을 선택해야 합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하여 알려진 취약점을 해결해야 합니다.",
        "evidence": "함수 호출 'lightweight_key_schedule', 'feistel_round_function'은 암호화 알고리즘의 사용을 암시합니다. x86-64 명령어 사용은 전통적인 암호화 알고리즘 구현을 나타낼 수 있습니다.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "embedded_authentication_processor",
      "file_name": "embedded_authentication_processor.s",
      "response_time": 4.1551899909973145,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Feistel Network (Evidence: callq 401160 <feistel_round_function>)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Digest Computation (Evidence: callq 4011e0 <compact_digest_computation>)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Domestic Lightweight Transform (Evidence: callq 4011a0 <domesticn_lightweight_transform>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Feistel network, digest computation, and domestic lightweight transform are detected. Further analysis is needed to determine the specific algorithms and their vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "embedded_iot_security_processor",
      "file_name": "embedded_iot_security_processor.s",
      "response_time": 3.6935179233551025,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 IoT 장치에 최적화된 리소스 제한적인 암호화 구현을 사용하는 것으로 보입니다. 설명에는 'post_classical-vulnerable algorithms'라는 문구가 명시적으로 포함되어 있어 양자 공격에 취약한 알고리즘이 사용될 가능성이 높습니다. 또한, 작은 블록 크기(64)와 키 크기(128)를 사용하고 있어 보안 강도가 낮을 수 있습니다. entropy 수집 방법으로 온도, 전압, 타이머 지터를 사용하는데, 이는 예측 가능성이 높아 취약할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "IoT 장치에 적합한 양자 내성 암호 알고리즘으로 마이그레이션하고, 키 크기를 늘리고, 더 강력한 entropy 소스를 사용해야 합니다. 또한, ARM 기반 장치에서 wolfSSL을 사용하는 경우, 양자 내성 버전으로 업데이트하거나 대체하는 것을 고려해야 합니다.",
        "evidence": "문자열 'post_classical-vulnerable algorithms', 작은 블록 크기(64), 작은 키 크기(128), 온도/전압/타이머 지터 entropy 수집",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "embedded_iot_security_processor",
      "file_name": "embedded_iot_security_processor.s",
      "response_time": 4.418068885803223,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Cryptography (Evidence: call initialize_p192_curve_parameters, call generate_iot_curve_keypair, call perform_iot_CurveExchangeexchange)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Optimization for resource-constrained environments (Evidence: Reduced key size, limited block size, low power mode enabled)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Memory allocation for key storage (Evidence: movq %rax, device_private_key(%rip), movq %rdx, device_public_key(%rip))",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerability potential (Evidence: rdtsc for timer jitter entropy collection)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Elliptic Curve Cryptography (specifically P-192) is detected. Optimization patterns for resource-constrained environments are present. Memory allocation for key storage and potential side-channel vulnerabilities are also detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "enterprise_data_protection_engine",
      "file_name": "enterprise_data_protection_engine.s",
      "response_time": 3.5169217586517334,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'large_modular_computation' 및 'inverse_transform_calculation' 함수 호출이 발견되었습니다. 이는 RSA, DSA 또는 ECDSA와 같은 전통적인 공개 키 암호화 알고리즘의 사용을 암시할 수 있습니다. 특히, 0x401008, 0x401010, 0x401018, 0x401020에서 보이는 상수들은 암호화 연산에 사용될 가능성이 있습니다. 추가 분석을 통해 정확한 알고리즘을 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "잠재적인 양자 공격에 대한 취약점을 완화하기 위해, 발견된 암호화 알고리즘을 양자 내성 암호(PQC)로 대체하는 것을 고려해야 합니다. NIST PQC competition에서 표준화된 알고리즘을 사용하는 것이 좋습니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하고, PQC로의 마이그레이션을 위한 로드맵을 개발해야 합니다.",
        "evidence": "함수 호출 'large_modular_computation', 'inverse_transform_calculation', 상수 0x1a234567, 0xefcdab89, 0x98badcfe, 0x10325476",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "enterprise_data_protection_engine",
      "file_name": "enterprise_data_protection_engine.s",
      "response_time": 5.187180757522583,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: callq 401340 <domesticn_feistel_round> and callq 401380 <substitution_box_transform> suggest a Feistel round and S-box transformation, which are common in Korean algorithms like LEA, HIGHT, and ARIA. The name 'domesticn_feistel_round' is also indicative.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Cryptographic hash function (Evidence: callq 4013c0 <digest_computation_engine> suggests a hash function is being used.)",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Large integer arithmetic (Evidence: callq 4012c0 <large_modular_computation> and shr $0x10,%rax at 4012d4 indicate large integer operations.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The analysis detected potential usage of a Korean algorithm due to the presence of 'domesticn_feistel_round' and 'substitution_box_transform' functions. It also identified a 'digest_computation_engine' suggesting a hash function and 'large_modular_computation' indicating large integer arithmetic operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "feistel_network_operations",
      "file_name": "feistel_network_operations.s",
      "response_time": 3.983144998550415,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "제공된 어셈블리 코드는 Feistel 네트워크의 연산을 나타냅니다. Feistel 네트워크 자체는 암호화 알고리즘의 구조이지만, 구체적인 라운드 함수(sub_401090)의 구현에 따라 양자 내성이 결정됩니다. `k_cipher_4 data_402000(%rip), %rdx` 부분은 키 의존적인 lookup table을 사용하는 것으로 보이며, 이는 S-box와 유사한 역할을 할 수 있습니다. 하지만, 이 S-box가 어떤 알고리즘에 기반하는지, 그리고 그 알고리즘이 RSA, DSA, ECDSA와 같은 비양자내성 알고리즘을 사용하는지 여부를 판단하기에는 정보가 부족합니다. Feistel 네트워크는 DES와 같은 고전적인 암호화 알고리즘에서 사용되었으며, 이들은 양자 공격에 취약합니다. 따라서, 라운드 함수가 비양자내성 알고리즘을 사용한다고 가정하고 취약하다고 판단합니다.",
        "detected_algorithms": [],
        "recommendations": "라운드 함수(sub_401090)의 구현을 상세히 분석하여 사용된 암호화 알고리즘을 확인해야 합니다. 만약 RSA, DSA, ECDSA와 같은 비양자내성 알고리즘이 사용되었다면, SHAKE, Kyber, Dilithium과 같은 양자내성암호(PQC)로 대체해야 합니다. Feistel 네트워크의 라운드 함수를 PQC 기반으로 재설계하는 것을 고려해야 합니다.",
        "evidence": "Feistel 네트워크 구조, `k_cipher_4 data_402000(%rip), %rdx` (키 의존적인 lookup table 사용)",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "feistel_network_operations",
      "file_name": "feistel_network_operations.s",
      "response_time": 5.997278928756714,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: SEED (Evidence: The code contains a lookup table named `data_402000` and the function `sub_401090` uses this table with bitwise operations and shifts, which is a common pattern in S-box implementations like those found in SEED. The function `sub_401090` loads bytes from `data_402000` based on parts of the input `ebx` and combines them using shifts and OR operations. This strongly suggests an S-box lookup, a key component of SEED.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES-like (Evidence: The code contains a lookup table named `data_402000` and the function `sub_401260` uses this table to transform data. The function `sub_4012f0` performs bitwise AND and shift operations, which could be part of a permutation or substitution operation. The function `sub_401340` performs XOR operations. These operations combined with the S-box lookup suggest an AES-like cipher.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code contains patterns suggesting the use of SEED and AES-like ciphers, based on S-box lookups and bitwise operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "financial_cryptographic_accelerator",
      "file_name": "financial_cryptographic_accelerator.s",
      "response_time": 3.947132110595703,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에는 RSA 또는 유사한 비양자내성 암호 알고리즘에 사용될 수 있는 modular_exponentiation_unit 함수가 포함되어 있습니다. large_prime_verification 함수는 큰 소수 생성을 암시하며, 이는 RSA, DSA 또는 Diffie-Hellman 키 교환과 같은 알고리즘에서 사용될 수 있습니다. 0x1a234567, 0xefcdab89, 0x98badcfe, 0x10325476과 같은 상수는 암호화 키 또는 초기화 벡터로 사용될 수 있습니다. 이러한 알고리즘은 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "Diffie-Hellman"
        ],
        "recommendations": "modular_exponentiation_unit 및 large_prime_verification 함수를 양자 내성 암호화 알고리즘(예: Kyber, Dilithium, Falcon)으로 대체하십시오. 키 생성 및 교환 메커니즘을 양자 내성 방식으로 업데이트하십시오. 기존 암호화 시스템과의 호환성을 유지하기 위해 하이브리드 접근 방식을 고려하십시오.",
        "evidence": "함수 호출: callq 4011e0 <large_prime_verification>, callq 401210 <modular_exponentiation_unit>; 상수: 0x1a234567, 0xefcdab89, 0x98badcfe, 0x10325476",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "financial_cryptographic_accelerator",
      "file_name": "financial_cryptographic_accelerator.s",
      "response_time": 3.8258261680603027,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: callq 401210 <modular_exponentiation_unit>)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: callq 401250 <domesticn_banking_cipher>)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: callq 401250 <domesticn_banking_cipher>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation and a Korean domestic banking cipher are detected. Further analysis is needed to determine the specific algorithms and their vulnerabilities."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "government_classified_system_processor",
      "file_name": "government_classified_system_processor.s",
      "response_time": 3.978976011276245,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 비양자내성 암호 알고리즘이 사용되었을 가능성이 높습니다. 특히, `classified_key_generation` 함수와 `document_protection_layer` 함수 호출은 암호화 작업이 수행됨을 암시합니다. 구체적인 알고리즘은 disassembly 코드만으로는 단정하기 어렵지만, x86-64 아키텍처에서 암호화 관련 함수가 사용된 점은 취약점을 시사합니다.",
        "detected_algorithms": [],
        "recommendations": "해당 시스템에서 사용되는 암호 알고리즘을 정확히 파악하고, RSA, DSA, ECDSA와 같은 비양자내성 알고리즘이 사용되고 있다면 양자내성 암호(PQC)로의 전환을 고려해야 합니다. 특히, 기밀 데이터를 다루는 시스템이므로 PQC로의 전환은 매우 중요합니다. NIST에서 권고하는 PQC 알고리즘을 검토하고, 기존 시스템과의 호환성을 고려하여 안전하게 마이그레이션해야 합니다.",
        "evidence": "`classified_key_generation` 함수 호출 (0x401028), `document_protection_layer` 함수 호출 (0x40103e)",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "government_classified_system_processor",
      "file_name": "government_classified_system_processor.s",
      "response_time": 3.683061122894287,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean cryptographic algorithm (Evidence: callq 401140 <domesticn_government_cipher>)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: callq 401140 <domesticn_government_cipher>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected a call to 'domesticn_government_cipher', indicating the potential use of a Korean cryptographic algorithm. Further analysis is needed to determine the specific algorithm and its quantum vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "hash_digest_operations",
      "file_name": "hash_digest_operations.s",
      "response_time": 3.382796049118042,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 MD5 해시 알고리즘의 초기화 상수(0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476)가 발견되었습니다. MD5는 양자 컴퓨팅 공격에 취약하지 않지만, 암호학적으로 안전하지 않으므로 사용을 중단해야 합니다. 또한, RSA, DSA, ECDSA와 같은 다른 비양자내성 알고리즘이 사용될 가능성이 있습니다.",
        "detected_algorithms": [
          "MD5 (잠재적)",
          "RSA (잠재적)",
          "ECDSA (잠재적)"
        ],
        "recommendations": "MD5 사용을 중단하고 SHA-256, SHA-3와 같은 더 강력한 해시 알고리즘으로 대체하십시오. RSA, DSA, ECDSA와 같은 비양자내성 알고리즘을 사용하는 경우, Kyber, Dilithium, Falcon과 같은 양자내성 암호(PQC) 알고리즘으로 마이그레이션하는 것을 고려하십시오. 기존 시스템과의 호환성을 유지하면서 점진적으로 PQC로 전환하는 전략을 수립하십시오.",
        "evidence": "MD5 초기화 상수: 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "hash_digest_operations",
      "file_name": "hash_digest_operations.s",
      "response_time": 4.50061297416687,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: MD5 (Evidence: Initial values for MD5 hash context are loaded: mov     $0x67452301, (%r15), mov     $0xefcdab89, 4(%r15), mov     $0x98badcfe, 8(%r15), mov     $0x10325476, 12(%r15) in sub_401000 and sub_401300. Also, the constant 0xd76aa478 is used in sub_401100, which is a known MD5 constant. The loop in sub_401100 performs operations similar to MD5 rounds, including bitwise operations (and, not, or), addition, and left rotation (rol).)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "MD5 hash algorithm detected based on initial value constants and round function structure."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "hight_lightweight_cipher",
      "file_name": "hight_lightweight_cipher.s",
      "response_time": 2.6594560146331787,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The provided assembly code snippet indicates the use of a lightweight block cipher, specifically 'LIGHTWEIGHT_BLOCK'. The comment explicitly states that it is 'Post_Classical-vulnerable to Grover's algorithm (64-bit effective security)'. This means the cipher's security is significantly reduced in the presence of a quantum computer.",
        "detected_algorithms": [],
        "recommendations": "Due to the vulnerability to Grover's algorithm, it is strongly recommended to replace the 'LIGHTWEIGHT_BLOCK' cipher with a post-quantum cryptographic (PQC) alternative. Consider using a NIST-approved PQC algorithm for block cipher encryption.",
        "evidence": "The string '# Post_Classical-vulnerable to Grover's algorithm (64-bit effective security)' directly indicates the vulnerability.",
        "confidence_score": 1.0,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "hight_lightweight_cipher",
      "file_name": "hight_lightweight_cipher.s",
      "response_time": 3.5860958099365234,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "No vulnerable cryptographic algorithms detected based on explicit evidence. The code appears to implement a custom lightweight block cipher, but without specific algorithm names or library calls, it cannot be classified as a known vulnerable algorithm."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "hybrid_banking_security_system",
      "file_name": "hybrid_banking_security_system.s",
      "response_time": 4.30206298828125,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 'Hybrid Banking Security System'으로, 'post_classical-vulnerable components'를 포함하고 있습니다. 'authenticate_client_identity', 'establish_secure_channel', 'process_encrypted_payload', 'create_transaction_attestation' 함수 호출은 암호화 작업이 수행됨을 나타냅니다. 구체적인 알고리즘은 명시되지 않았지만, 'asymmetric verification' 언급은 RSA, DSA, ECDSA와 같은 비양자내성 알고리즘이 사용될 가능성을 높입니다. 스택에 512바이트를 할당하는 것은 암호화 연산에 필요한 큰 데이터 구조(예: 키, 중간 결과)를 처리하기 위한 것일 수 있습니다.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA"
        ],
        "recommendations": "기존 암호화 알고리즘을 양자 내성 암호(PQC)로 대체하거나, 기존 알고리즘과 PQC 알고리즘을 결합한 하이브리드 방식을 사용하여 보안 강도를 높이는 것을 권장합니다. 특히 'authenticate_client_identity' 및 'establish_secure_channel' 함수에서 사용되는 알고리즘을 PQC로 마이그레이션하는 것이 중요합니다. 또한, 암호화 키 관리 및 저장 방식에 대한 보안 감사를 수행하여 양자 공격에 대한 취약점을 식별하고 개선해야 합니다.",
        "evidence": "문자열: 'Hybrid Banking Security System', 'post_classical-vulnerable components', 'asymmetric verification'; 함수 호출: 'authenticate_client_identity', 'establish_secure_channel', 'process_encrypted_payload', 'create_transaction_attestation'",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "hybrid_banking_security_system",
      "file_name": "hybrid_banking_security_system.s",
      "response_time": 4.706845998764038,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: call perform_modular_exponentiation, client_certificate+32(%rip) loads N and E, client_certificate+128(%rip) loads S, lines related to modular arithmetic implementation)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: Modular arithmetic implementation section, usage of registers r8, r9, rcx for N, E, and S in perform_modular_exponentiation)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Memory allocation for cryptographic key storage (Evidence: FastBlockCipherq client_certificate(%rip), FastBlockCipherq client_certificate+32(%rip), FastBlockCipherq client_certificate+128(%rip) indicate memory locations for certificate and signature data)",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "DETECTED: Assembly-level obfuscation of vulnerable crypto operations (Evidence: Obfuscated names for input parameters, function names like cFastBlockCiphernup_sensitive_data, and the comment 'Multiple post_classical-vulnerable components with obfuscated implementation')"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation and large integer arithmetic detected. Memory allocation patterns for cryptographic keys are present. Assembly-level obfuscation is used."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "industrial_control_security",
      "file_name": "industrial_control_security.s",
      "response_time": 3.7912790775299072,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 암호화 관련 함수 호출(`fast_cipher_key_schedule`, `fast_cipher_encrypt_block`)과 상수 사용이 발견되었습니다. 구체적인 알고리즘은 문자열 분석을 통해 확인되지 않았지만, 암호화 함수를 사용하고 있다는 점은 PQC에 취약할 가능성을 시사합니다. 특히, x86-64 아키텍처에서 암호화 연산에 사용될 수 있는 xmm 레지스터 관련 패턴이 발견될 가능성이 있습니다 (참조 1).",
        "detected_algorithms": [],
        "recommendations": "사용된 암호화 알고리즘을 정확히 파악하고, 해당 알고리즘이 양자 공격에 취약한지 평가해야 합니다. 만약 취약하다면, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. 암호화 라이브러리를 업데이트하거나, PQC 알고리즘을 직접 구현하는 방안을 검토할 수 있습니다.",
        "evidence": "함수 호출: `callq 401060 <fast_cipher_key_schedule>`, `callq 4010e0 <fast_cipher_encrypt_block>`; 상수 초기화: `movq $0x6789abcdef234501,-0x8(%rbp)`, `movq $0xfedcba9876543210,-0x10(%rbp)`, `movq $0x98765432fedcba98,-0x18(%rbp)`, `movq $0x1032547698765432,-0x20(%rbp)`",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "industrial_control_security",
      "file_name": "industrial_control_security.s",
      "response_time": 4.809674978256226,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Unknown Cipher (Evidence: callq 401060 <fast_cipher_key_schedule>, callq 4010e0 <fast_cipher_encrypt_block>). The presence of 'fast_cipher_key_schedule' and 'fast_cipher_encrypt_block' suggests a custom or optimized cipher implementation, potentially a Korean algorithm, but without further information, the specific algorithm cannot be determined.",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Optimization (Evidence: The function name 'fast_cipher_key_schedule' suggests an optimized key scheduling algorithm, which could be related to a vulnerable crypto algorithm).",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Potential Key Storage (Evidence: The code initializes several 64-bit values (-0x8(%rbp), -0x10(%rbp), -0x18(%rbp), -0x20(%rbp)) which are then used in the key schedule. This suggests these memory locations are used to store cryptographic keys or intermediate values).",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The analysis detected a custom cipher implementation with optimized key scheduling and encryption functions ('fast_cipher_key_schedule', 'fast_cipher_encrypt_block'). The specific algorithm is unknown, but the presence of a custom cipher and key storage patterns warrants further investigation. The code initializes several 64-bit values which are then used in the key schedule, suggesting these memory locations are used to store cryptographic keys or intermediate values."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "industrial_security_coprocessor",
      "file_name": "industrial_security_coprocessor.s",
      "response_time": 4.6564860343933105,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 RSA, ECDSA와 같은 비양자내성 암호 알고리즘의 사용이 의심됩니다. 특히, `industrial_key_derivation` 함수와 `block_transformation_unit` 함수 호출은 암호화 키 파생 및 블록 변환 작업과 관련되어 있을 수 있습니다. 또한, 64비트 아키텍처에서 암호화 연산에 사용될 가능성이 있는 xmm 레지스터의 사용을 나타내는 어셈블리 패턴이 발견되었습니다 (Crypto_Register_Usage 참조).",
        "detected_algorithms": [
          "RSA",
          "ECDSA"
        ],
        "recommendations": "양자 공격에 대한 보안을 강화하기 위해 RSA, ECDSA와 같은 기존 암호 알고리즘을 Kyber, Dilithium, Falcon과 같은 양자내성 암호 알고리즘으로 대체하는 것을 고려해야 합니다. 또한, 기존 암호화 라이브러리를 양자내성 암호 라이브러리로 업그레이드하고, 키 교환 프로토콜을 양자내성 키 교환 프로토콜로 마이그레이션해야 합니다.",
        "evidence": "바이너리에서 `industrial_key_derivation` 및 `block_transformation_unit` 함수 호출이 발견되었으며, 이는 암호화 작업과 관련되어 있을 수 있습니다. 또한, xmm 레지스터를 사용하는 어셈블리 패턴은 AES 또는 ChaCha20과 같은 암호화 알고리즘의 구현을 나타낼 수 있습니다.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "industrial_security_coprocessor",
      "file_name": "industrial_security_coprocessor.s",
      "response_time": 3.493504047393799,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms were explicitly detected based on the provided assembly code. The presence of functions like 'industrial_key_derivation', 'block_transformation_unit', 'scada_authentication_module', 'domesticn_industrial_cipher', and 'control_system_digest' suggests cryptographic operations, but without explicit algorithm names or library calls, a definitive detection is not possible."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "kcdsa_signature_generator",
      "file_name": "kcdsa_signature_generator.s",
      "response_time": 3.171513795852661,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The binary contains strings indicating the use of a 'Domestic standard' signature algorithm, likely KCDSA (Korean Certificate-based Digital Signature Algorithm). The comment '# Post_Classical-vulnerable due to discrete logarithm problem' explicitly states its vulnerability to quantum attacks due to its reliance on the discrete logarithm problem. The presence of function calls like `compute_signature_r_component`, `compute_signature_s_component`, and `verify_signature_validity` further confirms this.",
        "detected_algorithms": [
          "KCDSA"
        ],
        "recommendations": "Migrate to post-quantum cryptographic algorithms such as Dilithium, Falcon, or SPHINCS+ for digital signatures.  Evaluate the security requirements and performance characteristics of different PQC algorithms to select the most appropriate one for the application.  Consider hybrid approaches that combine classical and post-quantum algorithms for a transition period.",
        "evidence": "Strings: 'Domestic standard', '# Post_Classical-vulnerable due to discrete logarithm problem', function names like 'kcsig_alg_generate_signature', 'compute_signature_r_component', 'compute_signature_s_component', 'verify_signature_validity'.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "kcdsa_signature_generator",
      "file_name": "kcdsa_signature_generator.s",
      "response_time": 4.596216917037964,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: DSA/DH/ElGamal (Evidence: The code implements a signature algorithm, mentions domain parameters (p, q, g), private key x, ephemeral key k, and signature components r and s. These are all characteristic of Discrete Logarithm based signature schemes like DSA, or key exchange schemes like DH/ElGamal. The comments also mention 'Post_Classical-vulnerable due to discrete logarithm problem')",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Key Storage (Evidence: movq %rsi, -16(%rbp) stores the private key x, movq %rax, -48(%rbp) stores the ephemeral key k. These are stored on the stack.)",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "The code implements a signature algorithm likely based on the Discrete Logarithm Problem (DSA, DH, or ElGamal). It also stores cryptographic keys on the stack."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "keyexchange_protocol_operations",
      "file_name": "keyexchange_protocol_operations.s",
      "response_time": 3.436548948287964,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 RSA와 유사한 모듈러 연산 패턴이 발견되었습니다. `mul` 및 `div` 명령어를 사용하여 큰 수 연산을 수행하고 있으며, 이는 RSA 또는 유사한 공개 키 암호화 알고리즘의 지수 연산에 사용될 가능성이 높습니다. 특히 `data_404000`에 정의된 큰 상수 값은 모듈러스 또는 기타 암호화 매개변수를 나타낼 수 있습니다.",
        "detected_algorithms": [
          "RSA (추정)"
        ],
        "recommendations": "RSA와 같은 기존 암호화 알고리즘을 사용하는 것으로 의심되므로, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. NIST PQC competition에서 표준화된 알고리즘(예: Kyber, Dilithium)을 구현하고 기존 암호화 시스템과 통합하는 것을 권장합니다. 또한, 기존 암호화 알고리즘의 사용을 최소화하고 PQC로 점진적으로 대체하는 전략을 수립해야 합니다.",
        "evidence": "어셈블리 코드에서 `mul`, `div` 명령어 사용, `data_404000`에 정의된 큰 상수 값",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "keyexchange_protocol_operations",
      "file_name": "keyexchange_protocol_operations.s",
      "response_time": 3.6821420192718506,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: mul and div instructions within a loop at loc_401040, which suggests modular exponentiation. The data at data_404000 is used as modulus.)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: mul and div instructions, suggesting large integer operations. The data at data_404000 is used as modulus.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation and big integer arithmetic detected based on mul and div instructions within a loop, using data at data_404000 as modulus, suggesting modular exponentiation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_authentication_gateway",
      "file_name": "korean_authentication_gateway.asm",
      "response_time": 3.3819048404693604,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The assembly code contains calls to `compute_secure_hash` and `verify_signature`, which are common operations in non-PQC cryptographic schemes like RSA, DSA, and ECDSA. The presence of `hash_iv` and `hash_iv_ext` suggests the use of a legacy hashing algorithm, potentially vulnerable to quantum attacks. The `authenticate_message` function combines a lightweight cipher with a secure hash, indicating a potential reliance on classical cryptographic primitives.",
        "detected_algorithms": [],
        "recommendations": "Transition to Post-Quantum Cryptography (PQC) algorithms for hashing and digital signatures. Replace the `lightweight_cipher_64bit` with a PQC-secure cipher. Evaluate and replace the `compute_secure_hash` function with a quantum-resistant hash function like SHA-3 or BLAKE2.",
        "evidence": "The presence of `compute_secure_hash`, `verify_signature`, `hash_iv`, `hash_iv_ext`, and `lightweight_cipher_64bit` functions suggests the use of non-PQC algorithms. The `authenticate_message` function combining cipher and hash further reinforces this.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_authentication_gateway",
      "file_name": "korean_authentication_gateway.asm",
      "response_time": 3.3757808208465576,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: HIGHT (Evidence: lightweight_cipher_64bit function contains HIGHT-like structure with rotations and XOR operations)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code contains a lightweight cipher with a HIGHT-like structure. No other vulnerable cryptographic algorithms were detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_banking_crypto_lib",
      "file_name": "korean_banking_crypto_lib.asm",
      "response_time": 5.020057678222656,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "어셈블리 코드 분석 결과, x86-64 아키텍처에서 고성능 블록 암호 알고리즘이 사용된 것으로 보입니다. `transform_block_encrypt` 함수는 라운드 키를 사용한 블록 암호화 변환을 수행하며, `rol` (rotate left) 명령어와 XOR 연산을 사용하는 G-function, Feistel 구조의 F-function, S-box 유사 변환 등이 특징적으로 나타납니다. 이러한 패턴은 AES 또는 ChaCha20과 같은 대칭 키 암호 알고리즘의 구현을 암시합니다. 또한, `round_constants` 섹션은 라운드 연산에 사용되는 수학적 상수를 포함하고 있습니다. 이러한 알고리즘들은 양자 컴퓨팅 공격에 취약하므로, PQC로의 전환이 필요합니다.",
        "detected_algorithms": [
          "AES",
          "ChaCha20"
        ],
        "recommendations": "현재 사용 중인 대칭 키 암호 알고리즘(AES, ChaCha20 등)을 양자 내성 대칭 키 암호 알고리즘(예: AES-based post-quantum schemes)으로 교체하고, 키 교환 프로토콜을 양자 내성 키 교환 프로토콜(예: Kyber, Dilithium)로 대체해야 합니다. 또한, 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립하고, PQC 알고리즘의 성능 및 보안성을 충분히 검증해야 합니다.",
        "evidence": "어셈블리 코드에서 `transform_block_encrypt` 함수, `rol` 명령어, XOR 연산, Feistel 구조, S-box 유사 변환, `round_constants` 섹션 등이 발견되었습니다. 이러한 특징들은 AES 또는 ChaCha20과 같은 대칭 키 암호 알고리즘의 구현을 암시합니다. 참조 1의 `Crypto_Register_Usage` 패턴과 유사하게 x86-64 아키텍처에서 블록 암호 연산이 수행되는 것으로 판단됩니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_banking_crypto_lib",
      "file_name": "korean_banking_crypto_lib.asm",
      "response_time": 4.3989880084991455,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Block Cipher (Likely vulnerable to quantum attacks) (Evidence: transform_block_encrypt and transform_block_decrypt functions implementing a block cipher with 16 rounds, G-function with rotations, and F-function - Feistel structure. The code implements encryption and decryption routines with round keys and S-box-like transformations, suggesting a symmetric block cipher implementation. However, the specific algorithm (DES, 3DES, RC4, AES-128) cannot be determined without further analysis.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Optimization patterns (Evidence: The code uses register-based operations (e.g., mov eax, [rdi]; rol eax, 8) and in-place transformations (e.g., xor r8d, r15d) which are common optimization techniques in cryptographic implementations.)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "A block cipher implementation is detected, potentially vulnerable to quantum attacks. Optimization patterns are also observed. The specific algorithm is not identified, but the presence of a Feistel network and round operations suggests a symmetric block cipher. Further analysis is needed to determine the exact algorithm and its vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_blockcipher_operations",
      "file_name": "korean_blockcipher_operations.s",
      "response_time": 4.254577159881592,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드는 사용자 정의 블록 암호 연산을 사용하는 것으로 보입니다. `k_cipher_4`라는 사용자 정의 함수가 사용되었고, `data_402040`, `data_402060`, `data_402080` 등의 데이터 섹션이 암호화 키 또는 S-box와 관련되었을 가능성이 있습니다. 이러한 사용자 정의 암호는 표준 양자 내성 암호화 알고리즘이 아니므로 양자 공격에 취약할 수 있습니다. 또한, `sub_401200`, `sub_401300`, `sub_401400`, `sub_401500`, `sub_401600` 등의 함수 호출은 암호화 라운드 함수를 나타낼 수 있으며, 이들의 구현이 양자 내성을 고려하지 않았을 가능성이 높습니다.",
        "detected_algorithms": [
          "Unknown Block Cipher"
        ],
        "recommendations": "사용자 정의 암호화 알고리즘을 사용하는 대신, NIST에서 권장하는 표준 양자 내성 암호화 알고리즘(예: CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+)으로 전환하는 것이 좋습니다. 기존 시스템과의 호환성을 위해 하이브리드 접근 방식을 고려할 수 있습니다. 코드 검토 및 감사를 통해 잠재적인 취약점을 식별하고 수정해야 합니다.",
        "evidence": "바이너리 코드에서 `k_cipher_4` 함수 호출 및 `data_402040`, `data_402060`, `data_402080` 데이터 섹션 사용이 확인되었습니다. 루프 구조(`loc_401050`)와 여러 하위 함수 호출(`sub_401200` 등)은 블록 암호의 라운드 함수를 암시합니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_blockcipher_operations",
      "file_name": "korean_blockcipher_operations.s",
      "response_time": 3.525186061859131,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: AES-like S-boxes (Evidence: data_402000, data_402020 contain byte arrays resembling AES S-boxes)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially detected AES-like S-boxes. Further analysis is needed to confirm AES usage."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_digital_signature_core",
      "file_name": "korean_digital_signature_core.asm",
      "response_time": 3.073673963546753,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The assembly code implements a digital signature scheme based on the discrete logarithm problem. The code uses modular exponentiation, which is a known vulnerability to quantum algorithms like Shor's algorithm. The presence of `generator_g`, `prime_p`, and `subgroup_q` suggests a discrete logarithm-based signature scheme, potentially DSA or a variant. The use of `modular_exponentiation` further confirms this.",
        "detected_algorithms": [
          "DSA (Likely)"
        ],
        "recommendations": "Migrate to post-quantum cryptographic algorithms for digital signatures, such as Dilithium, Falcon, or Rainbow. Replace the current signature generation and verification functions with their PQC counterparts. Ensure proper key management and secure storage for the new PQC keys.",
        "evidence": "The code contains strings related to discrete logarithm problem parameters: `prime_p`, `generator_g`, `subgroup_q`. It also calls a `modular_exponentiation` function, which is a key operation in discrete logarithm-based cryptography. The comments indicate a digital signature implementation.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_digital_signature_core",
      "file_name": "korean_digital_signature_core.asm",
      "response_time": 4.190580129623413,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 6,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: DSA (Evidence: signature_generation function, modular_exponentiation function, references to prime_p, generator_g, subgroup_q)",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Hashing (Evidence: call compute_hash_combination)",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: modular_exponentiation, modular_reduction, modular_subtraction, modular_multiplication functions)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Square and Multiply (Evidence: modular_exponentiation function uses square-and-multiply algorithm)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Key Storage (Evidence: Memory allocation on stack for private key, ephemeral key, and signature components)",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerability (Evidence: modular_exponentiation using square-and-multiply is vulnerable to timing attacks)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "DSA signature generation detected using modular exponentiation and hashing. Square-and-multiply implementation is vulnerable to timing attacks. Key storage on the stack is observed."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_embedded_cipher_module",
      "file_name": "korean_embedded_cipher_module.asm",
      "response_time": 3.078841209411621,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "제공된 어셈블리 코드 스니펫은 경량 암호화 알고리즘의 구현을 나타냅니다. RSA, ECDSA와 같은 알려진 비-PQC 알고리즘의 직접적인 사용은 발견되지 않았습니다. 그러나, 사용자 정의 암호화 알고리즘의 보안 강도는 양자 공격에 대한 저항성을 포함하여 철저한 분석이 필요합니다. delta_const를 사용하는 점은 안전하지 않은 상수일 가능성이 있습니다.",
        "detected_algorithms": [],
        "recommendations": "사용자 정의 암호화 알고리즘의 경우, 양자 공격에 대한 저항성을 포함하여 철저한 보안 분석을 수행해야 합니다. 알려진 암호화 라이브러리(OpenSSL, WolfSSL 등)를 사용하는 경우, PQC로의 전환을 고려해야 합니다. NIST에서 권장하는 PQC 알고리즘을 검토하고, 기존 시스템에 통합하는 것을 고려하십시오.",
        "evidence": "delta_const 상수 사용, 32라운드 변환, 비표준 암호화 구조",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_embedded_cipher_module",
      "file_name": "korean_embedded_cipher_module.asm",
      "response_time": 3.664351224899292,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential Side-Channel Vulnerability (Evidence: Rotation operations `rol r8d, 5`, `rol r9d, 11`, `ror r8d, 7`, `ror r9d, 13` may be vulnerable to timing attacks)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The code appears to implement a custom lightweight block cipher. While no specific vulnerable algorithms like AES, DES, or RSA are explicitly identified, the rotation operations used in the F-function might be vulnerable to timing side-channel attacks. The presence of a delta constant suggests a Feistel network or similar structure."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_iot_sensor_firmware",
      "file_name": "korean_iot_sensor_firmware.asm",
      "response_time": 4.015824794769287,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "제공된 어셈블리 코드는 경량 암호 알고리즘의 구현을 나타냅니다. 이 알고리즘은 64비트 블록 암호이며, 32라운드를 사용하고, 키 스케줄링을 포함합니다. 'lightweight_transform' 및 'lightweight_inverse' 함수가 정의되어 있습니다. 이 알고리즘이 구체적으로 무엇인지, 그리고 양자 공격에 얼마나 취약한지는 추가 분석이 필요하지만, 일반적으로 경량 암호는 키 크기가 작거나 구조적 약점을 가질 수 있어 양자 공격에 취약할 가능성이 있습니다. 또한, 'transform_delta'와 같은 상수가 사용되는 것을 볼 수 있습니다. 이 상수가 암호화 강도에 영향을 미칠 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "해당 경량 암호 알고리즘의 보안 강도를 평가하고, 양자 내성 암호로 대체하는 것을 고려해야 합니다. 특히 IoT 장치와 같이 리소스가 제한된 환경에서는 양자 내성 경량 암호 알고리즘을 사용하는 것이 좋습니다. 또한, 키 크기를 늘리거나, 라운드 수를 늘리는 등의 방법으로 보안 강도를 높일 수 있지만, 양자 공격에 대한 안전성을 보장할 수는 없습니다.",
        "evidence": "어셈블리 코드에서 'lightweight_transform', 'lightweight_inverse', 'transform_delta' 등의 문자열이 발견되었습니다. 또한, 64비트 블록 암호, 32라운드, 키 스케줄링 등의 특징이 확인되었습니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_iot_sensor_firmware",
      "file_name": "korean_iot_sensor_firmware.asm",
      "response_time": 4.895684003829956,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Lightweight Block Cipher (Evidence: The code implements a 64-bit block cipher with 32 rounds, including round functions, key addition, and a delta constant. The structure resembles a Feistel network or a similar symmetric block cipher construction.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Rotation operations (Evidence: rol r8d, 1; rol r9d, 2; rol r9d, 7; rol r8d, 3; rol r9d, 4; rol r9d, 6) are used in the round functions, which are common in lightweight ciphers for performance on resource-constrained devices.",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "POTENTIALLY DETECTED: Side-channel vulnerable implementation patterns (Evidence: The use of table lookups (if any) and the consistent execution time of the rounds could be vulnerable to timing attacks. The memory access pattern to the key material [r12 + r10*4] could also be a point of vulnerability.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code implements a custom lightweight block cipher. The cipher uses rotation operations and key addition. The implementation might be vulnerable to side-channel attacks due to consistent execution time and memory access patterns."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "korean_pki_signature_engine",
      "file_name": "korean_pki_signature_engine.asm",
      "response_time": 3.9797260761260986,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리는 RSA, Diffie-Hellman과 같은 비양자내성 암호 알고리즘의 핵심 구성 요소인 모듈러 지수 연산을 구현합니다. 'modular_exp' 함수는 square-and-multiply 알고리즘을 사용하며, 이는 RSA 및 유사한 알고리즘에서 흔히 사용됩니다. 또한 Montgomery 곱셈을 사용하여 효율성을 높이는 것을 나타냅니다. 'prime_modulus' 및 'montgomery_r' 데이터 섹션은 큰 정수 연산에 사용되는 상수를 저장하는 데 사용될 가능성이 높습니다. 이러한 알고리즘은 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "RSA",
          "Diffie-Hellman"
        ],
        "recommendations": "RSA, Diffie-Hellman과 같은 기존 암호 알고리즘을 Kyber, Dilithium, Falcon과 같은 양자 내성 암호 알고리즘으로 대체하십시오. 기존 시스템과의 호환성을 유지하면서 PQC 알고리즘을 통합하기 위한 하이브리드 접근 방식을 고려하십시오. NIST의 PQC 표준화 프로세스에서 선택된 알고리즘을 사용하십시오.",
        "evidence": "어셈블리 코드에는 'modular_exp' 함수가 포함되어 있으며, 이는 모듈러 지수 연산의 표준 구현입니다. 'montgomery_multiply' 함수 호출은 Montgomery 곱셈을 사용하고 있음을 나타냅니다. 'prime_modulus' 및 'montgomery_r' 데이터 섹션은 RSA와 관련된 큰 정수 연산에 사용될 가능성이 높습니다. Modular_Exponentiation (assembly_pattern) 참조와 일치합니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "korean_pki_signature_engine",
      "file_name": "korean_pki_signature_engine.asm",
      "response_time": 4.47432279586792,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: modular_exp function implementing square-and-multiply algorithm)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: DSA (Evidence: signature_generate and signature_verify functions, computation of r = g^k mod p, computation of s = k^-1 * (H(m) + x*r) mod q)",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: use of dq directive for large integers in prime_modulus and montgomery_r, mul instruction for multiplication)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Montgomery multiplication (Evidence: montgomery_multiply function)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Memory allocation for key storage (Evidence: sub rsp, 256 in signature_generate, lea rdi, [rbp-128], lea rcx, [rbp-64])",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "RSA modular exponentiation and DSA signatures detected. Big integer arithmetic and Montgomery multiplication are used. Memory allocation for key storage is present."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "lea_block_cipher_engine",
      "file_name": "lea_block_cipher_engine.s",
      "response_time": 3.0824849605560303,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리는 FAST_BLOCK이라는 블록 암호 알고리즘을 사용합니다. 문자열에서 'Post_Classical-vulnerable to Grover's algorithm'이라는 문구가 발견되었으며, 이는 해당 알고리즘이 Grover 알고리즘에 취약하여 양자 컴퓨팅 공격에 취약함을 나타냅니다.",
        "detected_algorithms": [
          "FAST_BLOCK"
        ],
        "recommendations": "FAST_BLOCK 암호 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. NIST에서 권장하는 CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+ 등의 알고리즘을 고려하십시오. 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립하고, PQC 알고리즘의 성능 및 보안성을 충분히 검증해야 합니다.",
        "evidence": "문자열: 'Post_Classical-vulnerable to Grover's algorithm'",
        "confidence_score": 1.0,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "lea_block_cipher_engine",
      "file_name": "lea_block_cipher_engine.s",
      "response_time": 3.733567953109741,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: FAST_BLOCK (Evidence: .file \"fast_cipher_cipher.c\", .globl fast_cipher_encrypt_block, call fast_cipher_round_transformation)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "DETECTED: FAST_BLOCK (Evidence: call fast_cipher_round_transformation)",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: FAST_BLOCK (Evidence: Optimized for software implementation on 32-bit and 64-bit platforms)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: FAST_BLOCK (Evidence: Domestic standard)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "FAST_BLOCK block cipher detected, a Korean domestic standard optimized for 32/64-bit platforms. The code contains calls to the round transformation function (fast_cipher_round_transformation) and is identified as a domestic standard."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "legacy_hash_computation",
      "file_name": "legacy_hash_computation.s",
      "response_time": 4.128044843673706,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 비양자내성 암호 알고리즘의 사용이 의심됩니다. 특히, 문자열 분석에서 'RSA', 'ECDSA'와 같은 문자열이 발견되지 않았지만, `hash_alg_process_block` 및 `digest_alg1_process_block` 함수 호출과 함께 초기화 벡터와 유사한 상수들이 사용된 것을 확인할 수 있습니다. 이는 전통적인 해시 알고리즘(SHA-256, SHA-3 등) 또는 대칭 암호 알고리즘(AES, DES 등)의 사용을 암시할 수 있으며, 이러한 알고리즘들은 양자 공격에 취약할 수 있습니다. 추가적인 분석을 통해 정확한 알고리즘을 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "해당 바이너리에서 사용되는 암호 알고리즘을 정확히 식별하고, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. NIST PQC competition에서 선정된 알고리즘들을 검토하고, 기존 시스템과의 호환성을 고려하여 적절한 PQC 알고리즘을 선택해야 합니다. 또한, 암호화 라이브러리를 업데이트하고, PQC 알고리즘을 지원하도록 시스템을 재구성해야 합니다.",
        "evidence": "함수 `hash_alg_process_block` 및 `digest_alg1_process_block` 호출, 초기화 벡터와 유사한 상수 사용 (예: `movq   $0x1032547698badcfe,-0x8(%rbp)`).",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "legacy_hash_computation",
      "file_name": "legacy_hash_computation.s",
      "response_time": 4.8809239864349365,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Potentially vulnerable hash algorithm (Evidence: The code initializes several 32-bit values (0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476) in hash_alg_process_block at 40106b, 401072, 401079, 401080, which are similar to initialization constants used in MD5 or SHA-1. The function hash_alg_process_block also performs bitwise AND, NOT, OR, ADD, and rotate left (rol) operations, which are common in hash algorithms. digest_alg1_process_block also initializes several 32-bit values (0x1234567, 0x89abcdef, 0xfedcba98, 0x76543210, 0xf0e1d2c3) at 4010ef, 4010f6, 4010fd, 401104, 40110b, which are similar to initialization constants used in MD5 or SHA-1.)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially vulnerable hash algorithm detected based on initialization constants and bitwise operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "legacy_pki_certificate_processor",
      "file_name": "legacy_pki_certificate_processor.s",
      "response_time": 3.702868938446045,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리는 레거시 PKI 인증서 처리 엔진으로, 여러 서명 알고리즘을 지원하며, 양자 공격에 취약한 알고리즘을 포함할 가능성이 높습니다. 특히, 'validate_certificate_signatures' 함수는 취약한 알고리즘을 사용할 가능성이 높습니다. 문자열 분석 결과, 'supported_algorithms' 레지스트리에 설정된 알고리즘들이 취약할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 정확한 암호화 알고리즘을 식별하고, RSA, DSA, ECDSA와 같은 양자 공격에 취약한 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. 인증서 체인 검증 로직을 검토하여 PQC 알고리즘을 지원하도록 업데이트해야 합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하고, PQC 알고리즘을 지원하는 라이브러리를 사용하는 것을 고려해야 합니다.",
        "evidence": "바이너리 문자열: 'validate_certificate_signatures', 'supported_algorithms'. 'supported_algorithms' 레지스트리에 설정된 값(0x01, 0x02, 0x03, 0x11, 0x12, 0x13, 0x21, 0x22)이 어떤 알고리즘을 나타내는지 추가 분석이 필요합니다.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "legacy_pki_certificate_processor",
      "file_name": "legacy_pki_certificate_processor.s",
      "response_time": 3.0548181533813477,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "md5_sha1_hash_processor",
      "file_name": "md5_sha1_hash_processor.s",
      "response_time": 3.227977991104126,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 레거시 해시 함수(md5, sha1)를 사용하고 있으며, 이는 양자 컴퓨팅 공격(Grover's algorithm, collision attacks)에 취약합니다. 문자열 분석 결과, 'Legacy cryptographic hash functions', 'Post_Classical-vulnerable to Grover's algorithm and collision attacks' 등의 문자열이 발견되어 취약점이 확인되었습니다.",
        "detected_algorithms": [
          "MD5",
          "SHA1"
        ],
        "recommendations": "SHA-3, Blake2, 또는 최신 NIST 권장 해시 알고리즘과 같은 양자 내성 해시 함수로 전환하십시오. 레거시 시스템과의 호환성이 필요한 경우, 양자 내성 해시 함수를 사용하여 기존 해시 함수의 출력을 안전하게 확장하는 방법을 고려하십시오.",
        "evidence": "Legacy cryptographic hash functions, Post_Classical-vulnerable to Grover's algorithm and collision attacks, process_legacy_hashes, hash_alg_hash_computation, digest_alg1_hash_computation",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "md5_sha1_hash_processor",
      "file_name": "md5_sha1_hash_processor.s",
      "response_time": 4.522627115249634,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Vulnerable Hash Algorithm (Evidence: The code initializes hash contexts and processes blocks of data, suggesting a hash function implementation. The comments mention 'Legacy cryptographic hash functions' and 'Post_Classical-vulnerable to Grover's algorithm and collision attacks'. The initialization values 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476 are used, which are typical initialization values for MD5 or SHA-1. However, without seeing the actual block processing, it is impossible to determine the exact algorithm.)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The code appears to implement a legacy hash function, potentially vulnerable to quantum attacks. The initialization values suggest MD5 or SHA-1, but further analysis of the block processing is needed for confirmation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "medical_device_security_controller",
      "file_name": "medical_device_security_controller.s",
      "response_time": 3.8904662132263184,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 비양자내성 암호 알고리즘의 직접적인 증거는 없지만, 'medical_key_generation' 및 'domesticn_medical_cipher' 함수가 사용되었으며, 이는 사용자 정의 암호화 또는 표준 암호화 라이브러리의 사용을 나타낼 수 있습니다. 이러한 함수가 RSA, ECDSA와 같은 취약한 알고리즘을 사용하는 경우 양자 공격에 취약할 수 있습니다. 또한, 메모리에 직접 상수를 쓰는 방식은 하드코딩된 키 또는 취약한 난수 생성기의 사용을 암시할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "사용자 정의 암호화 함수 'medical_key_generation' 및 'domesticn_medical_cipher'의 내부 구현을 철저히 검토하여 RSA, ECDSA와 같은 비양자내성 알고리즘의 사용을 확인해야 합니다. 발견된 경우, 안전한 양자내성 암호 알고리즘으로 대체해야 합니다. 또한, 키 생성 및 관리에 사용되는 난수 생성기의 보안성을 평가하고, 필요한 경우 RDRAND와 같은 하드웨어 기반 난수 생성기로 전환하는 것을 고려해야 합니다.",
        "evidence": "함수 호출 'medical_key_generation', 'domesticn_medical_cipher'; 메모리 상수 쓰기 (movl instructions).",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "medical_device_security_controller",
      "file_name": "medical_device_security_controller.s",
      "response_time": 3.9738588333129883,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: callq 401120 <domesticn_medical_cipher>)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: callq 401120 <domesticn_medical_cipher>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected a call to a function named 'domesticn_medical_cipher', which suggests the presence of a Korean cryptographic algorithm. Further analysis of the 'domesticn_medical_cipher' function is needed to determine the specific algorithm and its vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "message_digest_128bit_operations",
      "file_name": "message_digest_128bit_operations.s",
      "response_time": 4.250024080276489,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 MD5 해시 알고리즘의 사용이 감지되었습니다. MD5는 충돌 취약점이 있어 더 이상 안전하지 않으며, 양자 컴퓨터에 의해 더 쉽게 공격받을 수 있습니다. 또한, 이 바이너리는 RSA나 ECC와 같은 다른 비-PQC 알고리즘을 사용할 가능성이 있습니다.",
        "detected_algorithms": [
          "MD5 (추정)"
        ],
        "recommendations": "MD5 해시 알고리즘을 SHA-256, SHA-3 또는 BLAKE3와 같은 양자 내성 해시 알고리즘으로 대체하십시오. RSA 또는 ECC와 같은 다른 비-PQC 알고리즘을 사용하는 경우, Kyber, Dilithium 또는 Falcon과 같은 양자 내성 암호화 알고리즘으로 마이그레이션하는 것을 고려하십시오.",
        "evidence": "상수 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476은 MD5 초기화 벡터와 유사하며, 루프 내에서 덧셈 연산과 함께 사용되는 것으로 보아 MD5 해싱 알고리즘의 사용을 나타냅니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "message_digest_128bit_operations",
      "file_name": "message_digest_128bit_operations.s",
      "response_time": 3.739170789718628,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: MD5 (Evidence: Initial values for MD5 hash: 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476 at data_403000, line 14-17)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "MD5 hash algorithm detected based on initialization constants."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "mobile_cipher_engine",
      "file_name": "mobile_cipher_engine.s",
      "response_time": 3.5443520545959473,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 a5/1 스트림 암호와 TEA 블록 암호의 사용이 감지되었습니다. A5/1은 취약한 스트림 암호이며, TEA는 오래된 블록 암호로, 양자 공격에 취약할 수 있습니다. 또한, RSA, ECDSA와 같은 비양자내성암호 알고리즘의 문자열이 ARM_Crypto_Strings에 존재할 가능성이 있습니다 (컨텍스트 참조).",
        "detected_algorithms": [
          "A5/1",
          "TEA"
        ],
        "recommendations": "A5/1 및 TEA를 양자 내성 암호(PQC)로 대체하고, RSA, ECDSA 등의 알고리즘 사용을 점진적으로 중단하고 PQC로 전환하는 것을 권장합니다. 최신 암호화 라이브러리를 사용하고, 정기적인 보안 감사를 수행하여 취약점을 식별하고 수정해야 합니다.",
        "evidence": "함수 호출: a5_1_init, a5_1_encrypt_frame, tea_encrypt_block",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "mobile_cipher_engine",
      "file_name": "mobile_cipher_engine.s",
      "response_time": 3.3416171073913574,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: A5/1 (Evidence: callq 401150 <a5_1_encrypt_frame>, callq 4010e0 <a5_1_init>)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "A5/1 stream cipher detected. TEA encryption block detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "mobile_payment_security_engine",
      "file_name": "mobile_payment_security_engine.s",
      "response_time": 3.9957633018493652,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 암호화 관련 문자열(k_cipher_4) 및 함수(payment_token_generator, domesticn_mobile_cipher)가 발견되었으나, 구체적인 암호 알고리즘(RSA, ECDSA 등)의 직접적인 시그니처는 확인되지 않았습니다. 하지만, payment_token_generator와 domesticn_mobile_cipher 함수가 전통적인 암호 알고리즘을 사용할 가능성이 높으며, 양자 내성 암호로의 전환이 필요합니다. 스택에 저장된 상수 값들은 암호화 키 또는 초기화 벡터와 관련이 있을 수 있습니다. 추가적인 분석을 통해 정확한 알고리즘을 파악해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "payment_token_generator 및 domesticn_mobile_cipher 함수에서 사용되는 암호 알고리즘을 조사하고, RSA, ECDSA와 같은 비양자내성암호 알고리즘이 사용되고 있다면, 양자내성암호(PQC)로 대체해야 합니다. 또한, 암호화 키 관리 및 저장 방식의 안전성을 검토하고, 필요한 경우 보안 강화를 수행해야 합니다.",
        "evidence": "함수 호출: payment_token_generator, domesticn_mobile_cipher; 문자열: k_cipher_4; 스택에 저장된 상수 값: 0xd2629484, 0x93a837ca, 0x96119d5b, 0xba9eed6f",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "mobile_payment_security_engine",
      "file_name": "mobile_payment_security_engine.s",
      "response_time": 3.8203961849212646,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: Function name 'domesticn_mobile_cipher' at 0000000000401160 and the presence of rol instruction at 4011b4, which is a common operation in LEA and other Korean algorithms. Also, the function name suggests a domestic cipher.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Detected potential usage of a Korean cryptographic algorithm based on the function name 'domesticn_mobile_cipher' and the presence of rol instruction."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "network_security_gateway",
      "file_name": "network_security_gateway.s",
      "response_time": 2.8611881732940674,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'LegacyBlockCipher_schedule' 및 'LegacyBlockCipherencrypt_block' 함수 호출이 발견되었습니다. 이는 레거시 블록 암호 알고리즘(예: DES, AES, RSA)의 사용을 나타낼 수 있으며, 양자 공격에 취약할 수 있습니다. 추가 분석을 통해 정확한 알고리즘을 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "레거시 암호 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. NIST에서 권장하는 알고리즘(예: CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+)을 고려하십시오. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하고, 암호화 키의 길이를 늘리는 것을 고려해야 합니다.",
        "evidence": "함수 호출: LegacyBlockCipher_schedule, LegacyBlockCipherencrypt_block",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "network_security_gateway",
      "file_name": "network_security_gateway.s",
      "response_time": 3.3878138065338135,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Legacy Block Cipher (Evidence: callq 401050 <LegacyBlockCipher_schedule>, callq 4010d0 <LegacyBlockCipherencrypt_block>)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Detected a Legacy Block Cipher implementation. Further analysis is needed to determine the specific algorithm and its vulnerability to quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "neural_network_inference_accelerator",
      "file_name": "neural_network_inference_accelerator.s",
      "response_time": 3.7679569721221924,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'domesticn_ai_cipher' 함수가 호출되는 것을 확인했습니다. 이 함수가 전통적인 암호 알고리즘(RSA, DSA, ECDSA 등)을 사용하는지 여부를 정확히 판단하려면 추가 분석이 필요합니다. 또한, weight_matrix_transformation 함수도 암호화 관련 연산을 수행할 가능성이 있습니다. x86-64 아키텍처에서 SSE/AVX 레지스터(xmm0-xmm15)를 사용하는 패턴이 발견되지 않았으므로 AES 또는 ChaCha20 구현 가능성은 낮습니다. 하지만, 'k_cipher_4' 변수가 사용되는 것을 확인했습니다. 이 변수가 암호화 키 또는 파라미터와 관련이 있을 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "'domesticn_ai_cipher' 함수의 내부 구현을 분석하여 사용되는 암호 알고리즘을 식별해야 합니다. 만약 전통적인 암호 알고리즘이 사용된다면, 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. weight_matrix_transformation 함수도 암호화 관련 연산을 수행하는지 확인하고, 관련 키 관리 및 저장 방식에 대한 보안 검토를 수행해야 합니다. 'k_cipher_4' 변수의 용도를 파악하고, 안전하게 관리되는지 확인해야 합니다.",
        "evidence": "함수 호출: 'domesticn_ai_cipher', 'weight_matrix_transformation'; 변수 사용: 'k_cipher_4'",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "neural_network_inference_accelerator",
      "file_name": "neural_network_inference_accelerator.s",
      "response_time": 3.8891687393188477,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: domesticn_ai_cipher function name, potentially indicating a domestic Korean algorithm)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: domesticn_ai_cipher function, potentially a domestic Korean algorithm implementation)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially detected a Korean cryptographic algorithm implementation based on the function name 'domesticn_ai_cipher'. Further analysis is needed to confirm the specific algorithm and its vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "ntru_polynomial_processor",
      "file_name": "ntru_polynomial_processor.s",
      "response_time": 3.3261401653289795,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "제공된 바이너리 스니펫은 NTRU 기반의 다항식 연산에 대한 어셈블리 코드입니다. NTRU는 양자 내성 암호 알고리즘으로 간주됩니다. 따라서, 이 스니펫 자체는 기존의 비-PQC 알고리즘의 취약점을 나타내지 않습니다.",
        "detected_algorithms": [],
        "recommendations": "NTRU 구현의 보안을 보장하기 위해, 부채널 공격에 대한 보호, 올바른 파라미터 선택, 그리고 최신 암호학적 모범 사례를 따르는 것이 중요합니다.",
        "evidence": "제공된 어셈블리 코드에는 'ntru_polynomial_processor', 'polynomial ring', 'lattice-based security', 'Post-quantum secure encryption processor' 등의 문자열이 포함되어 있으며, 이는 NTRU 알고리즘의 구현을 나타냅니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "ntru_polynomial_processor",
      "file_name": "ntru_polynomial_processor.s",
      "response_time": 4.49510931968689,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer libraries and modular arithmetic operations (Evidence: imulq instruction used in multiply_p_g, divq instruction used in inner_mult_loop)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Memory allocation patterns for cryptographic key storage (Evidence: FastBlockCipherq private_key_f(%rip), FastBlockCipherq private_key_g(%rip), FastBlockCipherq public_key_h(%rip))",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerable implementation patterns (Evidence: rdrand instruction used in generate_random_ternary, cmpq $3, %rax followed by je generate_random_ternary)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected big integer arithmetic operations (imulq, divq), memory allocation for keys, and potential side-channel vulnerabilities due to random number generation and conditional branching."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "obfuscated_crypto_library_dispatcher",
      "file_name": "obfuscated_crypto_library_dispatcher.s",
      "response_time": 3.955842971801758,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리는 암호화 라이브러리 디스패처로 보이며, 난독화되어 있지만 RSA, ECDSA와 같은 기존 알고리즘을 사용할 가능성이 높습니다. `function_pointer_table`을 통해 알고리즘을 선택하고 간접 함수 호출을 사용하여 알고리즘 구현을 숨깁니다. `extract_operation_selector` 함수는 어떤 알고리즘이 사용되는지 결정하는 데 중요한 역할을 합니다. 난독화에도 불구하고, 양자 내성이 없는 알고리즘을 사용할 가능성이 높습니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 실제 암호화 알고리즘을 정확히 식별하기 위해 추가 분석이 필요합니다. 식별 후에는 양자 내성 암호(PQC)로 마이그레이션하는 것이 좋습니다. 난독화된 코드베이스의 경우, PQC로의 전환은 상당한 리팩토링 및 테스트 노력이 필요할 수 있습니다.",
        "evidence": "바이너리는 `dispatch_secure_operation` 함수를 포함하고 있으며, 이는 암호화 작업을 처리하는 디스패처 역할을 합니다. `function_pointer_table`은 다양한 암호화 알고리즘에 대한 함수 포인터를 저장하는 데 사용됩니다. `extract_operation_selector` 함수는 어떤 알고리즘을 호출할지 결정하는 데 사용됩니다. `FastBlockCipherq` 문자열은 블록 암호 사용을 암시합니다. `shlq $3, %rax`는 함수 포인터 테이블의 인덱스를 계산하는 데 사용됩니다.",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "obfuscated_crypto_library_dispatcher",
      "file_name": "obfuscated_crypto_library_dispatcher.s",
      "response_time": 4.089771032333374,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: execute_large_integer_modular_computation function, computation_iteration loop, multiplication of accumulator)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: execute_large_integer_modular_computation function, parameter extraction, modular computation)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Binary exponentiation (Evidence: computation_iteration loop, testq $1, %r10 instruction)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "DETECTED: Assembly-level obfuscation (Evidence: Indirect function calls, encoded algorithm names, XOR obfuscation, bit rotation, constant subtraction, large stack frame, disguised parameter names)"
        },
        "confidence_score": 0.75,
        "summary": "RSA modular exponentiation and big integer arithmetic detected with binary exponentiation optimization. Assembly-level obfuscation is present."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.asm",
      "response_time": 2.9645228385925293,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 레거시 블록 암호(DES)를 사용하는 것으로 보입니다. DES는 양자 공격에 취약한 것으로 알려져 있습니다.",
        "detected_algorithms": [
          "DES"
        ],
        "recommendations": "DES 사용을 중단하고 AES-256과 같은 양자 내성 암호로 마이그레이션하는 것이 좋습니다. 또한, OpenSSL과 같은 암호화 라이브러리를 최신 버전으로 업데이트하여 알려진 취약점을 해결해야 합니다.",
        "evidence": "함수 이름 'simple_LegacyBlockCipherencrypt' 및 어셈블리 코드에서 블록 암호화 관련 연산이 확인되었습니다. 이는 DES 또는 유사한 레거시 블록 암호의 사용을 나타냅니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.asm",
      "response_time": 3.6930441856384277,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Legacy Block Cipher (Evidence: Function name 'simple_LegacyBlockCipherencrypt' suggests a block cipher implementation. The code performs operations that resemble block cipher encryption, including loading data, XORing with a key, and shifting bits. The loop structure at 0x28-0xac further supports this interpretation.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "A legacy block cipher implementation was detected based on the function name and operations performed within the 'simple_LegacyBlockCipherencrypt' function."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.bin",
      "response_time": 2.596681833267212,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 DES 암호화 알고리즘이 사용되었습니다. DES는 오래된 암호화 알고리즘이며, 양자 컴퓨터의 공격에 취약할 수 있습니다.",
        "detected_algorithms": [
          "DES"
        ],
        "recommendations": "DES 사용을 중단하고 AES-256과 같은 더 강력하고 양자 내성이 있는 암호화 알고리즘으로 전환해야 합니다. 또한, 최신 암호화 라이브러리를 사용하여 알려진 취약점을 해결하고 보안을 강화해야 합니다.",
        "evidence": "파일명 openssl_des_enc.bin에서 DES 암호화 알고리즘 사용을 유추할 수 있습니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "openssl_des_enc",
      "file_name": "openssl_des_enc.bin",
      "response_time": 3.204939126968384,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "poly1305_authenticator",
      "file_name": "poly1305_authenticator.s",
      "response_time": 3.9251010417938232,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The provided assembly code snippet implements Poly1305, a message authentication code (MAC) algorithm. While Poly1305 itself is not directly vulnerable to quantum attacks in the same way as RSA or ECC, its security relies on the underlying one-time key. If the key is reused or derived from a quantum-vulnerable key exchange protocol (e.g., RSA, ECDSA), the entire system becomes vulnerable. The code snippet shows key loading and clamping, which are standard Poly1305 operations. The presence of `FastBlockCipherq` suggests potential use of AES or similar block ciphers for key generation or related operations, which could be vulnerable if the key exchange is not quantum-resistant.",
        "detected_algorithms": [],
        "recommendations": "Ensure that the key used for Poly1305 is generated and exchanged using quantum-resistant key exchange mechanisms. Evaluate the entire system, including key generation and distribution, for quantum vulnerabilities. Consider replacing the key exchange protocol with a post-quantum cryptography (PQC) alternative.",
        "evidence": "The assembly code contains calls to `initialize_poly1305_state`, `load_authentication_key`, `process_message_chunks`, and `finalize_authenticator`, indicating the use of Poly1305. The use of `FastBlockCipherq` and memory operations like `movq` suggest potential reliance on AES or similar block ciphers for key generation or related operations.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "poly1305_authenticator",
      "file_name": "poly1305_authenticator.s",
      "response_time": 3.351712942123413,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: call reduce_modulo_p, call multiply_accumulator_by_r)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected modular arithmetic operations, specifically calls to `reduce_modulo_p` and `multiply_accumulator_by_r`, indicating potential cryptographic operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "polymorphic_malware_crypto_engine",
      "file_name": "polymorphic_malware_crypto_engine.s",
      "response_time": 3.37245512008667,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The binary uses RSA, ECDSA, or other classical cryptographic algorithms, making it vulnerable to quantum attacks. The presence of 'initialize_direct_crypto_operations', 'initialize_indirect_crypto_dispatch', 'initialize_self_modifying_crypto', and 'initialize_distributed_crypto_operations' suggests the use of standard crypto libraries or custom implementations of classical algorithms. The 'execute_polymorphic_crypto_operations' function likely uses these algorithms in a polymorphic manner, but the underlying algorithms are still vulnerable.",
        "detected_algorithms": [],
        "recommendations": "Migrate to post-quantum cryptographic algorithms such as Kyber, Dilithium, or Falcon. Implement hybrid approaches that combine classical and post-quantum algorithms for a transition period. Thoroughly audit and replace vulnerable cryptographic functions.",
        "evidence": "The strings 'initialize_direct_crypto_operations', 'initialize_indirect_crypto_dispatch', 'initialize_self_modifying_crypto', 'initialize_distributed_crypto_operations', and 'execute_polymorphic_crypto_operations' indicate the use of cryptographic operations. While the specific algorithms are not explicitly named in the provided snippet, the context of 'polymorphic_malware_crypto_engine' strongly suggests the use of standard, and therefore quantum-vulnerable, cryptographic algorithms.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "polymorphic_malware_crypto_engine",
      "file_name": "polymorphic_malware_crypto_engine.s",
      "response_time": 4.3296098709106445,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: Modular Arithmetic (Evidence: call setup_standard_modular_context, movq $2048, modular_key_length(%rip))",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Cryptography (Evidence: call setup_standard_curve_sig_context)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean Block Cipher (Evidence: movq polymorphic_KoreanBlockCipher(%rip), %r8)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "DETECTED: Assembly-level Obfuscation (Evidence: Self-modifying code with dynamic cryptographic algorithm selection, Polymorphic entry point with multiple code paths, Indirect function table approach, Self-modifying code approach)"
        },
        "confidence_score": 0.7,
        "summary": "The code exhibits patterns related to RSA modular exponentiation, elliptic curve cryptography, Korean block ciphers, and assembly-level obfuscation. The presence of self-modifying code and polymorphic behavior suggests anti-analysis techniques are employed."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "polynomial_field_arithmetic_engine",
      "file_name": "polynomial_field_arithmetic_engine.s",
      "response_time": 4.206238031387329,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리는 타원 곡선 암호(ECC) 연산을 수행하는 것으로 보입니다. 특히 `elliptic_point_doubling` 및 `point_scalar_multiplication` 함수 호출은 ECC 알고리즘 사용을 나타냅니다. 또한, 0xffffffffffffffp, 0x1fffffffffffffff, 0xbebaedac, 0xef0bbeadd와 같은 상수는 ECC에서 사용되는 필드 크기 또는 곡선 매개변수와 관련될 수 있습니다. 이러한 알고리즘은 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "ECDSA",
          "ECDH"
        ],
        "recommendations": "ECC 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. NIST에서 표준화된 알고리즘(예: Kyber, Dilithium, Falcon)을 사용하는 것이 좋습니다. 기존 ECC 구현을 PQC로 점진적으로 마이그레이션하고, 하이브리드 접근 방식을 고려하여 PQC 알고리즘이 완전히 신뢰할 수 있을 때까지 기존 암호화 시스템과의 호환성을 유지하는 것이 좋습니다.",
        "evidence": "바이너리에는 `elliptic_point_doubling` 및 `point_scalar_multiplication` 함수 호출이 포함되어 있으며, 이는 ECC 연산을 나타냅니다. 또한, 0xffffffffffffffp, 0x1fffffffffffffff, 0xbebaedac, 0xef0bbeadd와 같은 상수는 ECC에서 사용되는 필드 크기 또는 곡선 매개변수와 관련될 수 있습니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "polynomial_field_arithmetic_engine",
      "file_name": "polynomial_field_arithmetic_engine.s",
      "response_time": 3.8173091411590576,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curve Point Operations and Scalar Multiplication (Evidence: callq 4012d0 <elliptic_point_doubling>, callq 401300 <point_scalar_multiplication>)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean Domestic Algorithm (Evidence: callq 401380 <domesticn_curve_operations>)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Elliptic curve point operations and scalar multiplication detected. Korean domestic curve operations detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "postquantum_multimodal_operations",
      "file_name": "postquantum_multimodal_operations.s",
      "response_time": 4.7178709506988525,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "어셈블리 코드 스니펫은 암호화 작업과 관련된 것으로 보이는 여러 함수 호출(sub_401300, sub_401400, sub_401500, sub_401600, sub_401700)을 보여줍니다. $1024, $12289, $2와 같은 상수의 사용은 RSA 키 크기 또는 다른 암호화 매개변수와 관련이 있을 수 있습니다. test %rax, %rax; jz sub_401000 패턴은 오류 처리 또는 루프 조건과 관련이 있을 수 있으며, 이는 암호화 루틴에서 흔히 볼 수 있습니다. 레지스터 사용 패턴(rdi, rsi, rdx, rcx, r8, r9, r10)은 함수 호출에 대한 인수를 전달하는 데 사용되며, 이는 암호화 알고리즘의 데이터 조작을 나타냅니다. 구체적인 알고리즘은 명확하게 식별할 수 없지만, 이러한 특징은 전통적인 암호화 알고리즘의 사용을 암시합니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 특정 암호화 알고리즘을 식별하기 위해 추가 분석이 필요합니다. 식별되면 해당 알고리즘을 양자 내성 대안으로 대체해야 합니다. 또한 암호화 라이브러리 및 종속성을 최신 버전으로 업데이트하여 알려진 취약점을 해결하는 것이 좋습니다.",
        "evidence": "함수 호출(sub_401300, sub_401400, sub_401500, sub_401600, sub_401700), 상수($1024, $12289, $2), 레지스터 사용 패턴(rdi, rsi, rdx, rcx, r8, r9, r10), test %rax, %rax; jz sub_401000",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "postquantum_multimodal_operations",
      "file_name": "postquantum_multimodal_operations.s",
      "response_time": 4.867467880249023,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: k_cipher_4 data_402000(%rip), %r12 and k_cipher_4 data_402020(%rip), %r13. This suggests the use of a Korean cipher, potentially SEED, ARIA, HIGHT, or LEA, as 'k_cipher_4' is a strong indicator.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic library (Evidence: The presence of 'k_cipher_4' and the loading of data from memory locations data_402000 and data_402020 strongly suggest the use of a Korean cryptographic library or a domestic Korean algorithm.)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The analysis detected potential usage of a Korean cryptographic algorithm or library, indicated by the presence of 'k_cipher_4' and associated data loading. Further investigation is needed to identify the specific algorithm (SEED, ARIA, HIGHT, or LEA) and assess its vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "publickey_encryption_operations",
      "file_name": "publickey_encryption_operations.s",
      "response_time": 4.816208839416504,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "어셈블리 코드에서 modular exponentiation 연산(mul, div 명령어 사용)이 발견되었습니다. 이는 RSA, Diffie-Hellman, ECC와 같은 공개키 암호 알고리즘에서 흔히 사용되는 연산입니다. 특히 `sub_401100` 함수 내의 `loc_401120` 루프에서 `mul` 및 `div` 명령어가 반복적으로 사용되는 것은 modular exponentiation의 특징적인 패턴입니다. 이러한 알고리즘들은 양자 컴퓨터의 공격에 취약합니다.",
        "detected_algorithms": [
          "RSA",
          "Diffie-Hellman",
          "ECC"
        ],
        "recommendations": "양자 내성 암호(PQC) 알고리즘으로의 전환을 권장합니다. 기존 RSA, Diffie-Hellman, ECC 기반 시스템을 대체할 수 있는 CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+ 등의 알고리즘을 고려하십시오. 또한, 기존 시스템과의 호환성을 유지하기 위해 하이브리드 접근 방식을 고려할 수 있습니다.",
        "evidence": "어셈블리 코드 내 modular exponentiation 연산 (mul, div 명령어 사용), `sub_401100` 함수 내 `loc_401120` 루프",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "publickey_encryption_operations",
      "file_name": "publickey_encryption_operations.s",
      "response_time": 3.578058958053589,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: sub_401100 function contains mul and div instructions within a loop, suggestive of modular exponentiation. The function takes three arguments and performs repeated multiplication and division, which is a common pattern in RSA.)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation detected in sub_401100 function."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "publickey_modular_operations",
      "file_name": "publickey_modular_operations.s",
      "response_time": 4.168181896209717,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 modular exponentiation 연산이 발견되었습니다. 이는 RSA, DSA, ECDSA와 같은 공개 키 암호화 알고리즘에서 흔히 사용되는 연산입니다. 특히 `mul` 및 `div` 명령어를 사용하는 루프는 modular exponentiation의 특징적인 패턴입니다. data 섹션에 있는 상수 값들은 암호화 키 또는 파라미터로 사용될 가능성이 있습니다.",
        "detected_algorithms": [
          "RSA",
          "DSA",
          "ECDSA"
        ],
        "recommendations": "RSA, DSA, ECDSA와 같은 기존 공개 키 암호화 알고리즘은 양자 컴퓨터의 공격에 취약합니다. 따라서, 이 바이너리에서 사용되는 암호화 알고리즘을 양자 내성 암호(PQC)로 대체하는 것을 권장합니다. NIST에서 표준화된 알고리즘(예: CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+)을 고려하십시오. 또한, 기존 암호화 라이브러리를 PQC를 지원하는 라이브러리로 업데이트해야 합니다.",
        "evidence": "assembly 코드에서 `mul`, `div` 명령어를 사용하는 modular exponentiation 연산 루프가 발견되었으며, `.data` 섹션에 암호화 관련 상수 데이터가 존재합니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "publickey_modular_operations",
      "file_name": "publickey_modular_operations.s",
      "response_time": 4.636929035186768,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: The code performs modular exponentiation using repeated squaring. The `mul`, `div`, and `mov %rdx` instructions within the loop at `loc_401040` suggest modular multiplication, a core component of RSA. The `test %rcx, %rcx` and `shr $1, %rcx` instructions control the exponentiation process.)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: The use of `mul` and `div` instructions, along with the storage of the remainder in `rdx`, indicates operations on large integers, potentially exceeding the size of a single register. This is common in cryptographic algorithms like RSA.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code appears to implement RSA modular exponentiation using repeated squaring and large integer arithmetic. The `mul`, `div`, and `mov %rdx` instructions within the loop at `loc_401040` are strong indicators of modular multiplication, a core component of RSA."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "publickeyalgo_messagedigest5_operations",
      "file_name": "publickeyalgo_messagedigest5_operations.s",
      "response_time": 3.8723859786987305,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "이 바이너리는 RSA 또는 유사한 모듈러 지수 연산을 수행하는 것으로 보입니다. `mul` 및 `div` 명령어를 사용하는 `loc_401040` 루프는 모듈러 지수 연산의 특징적인 패턴입니다. 또한, `sub_401100` 함수에서 초기화되는 상수 `0x67452301` 및 `0xefcdab89`는 MD5 또는 SHA-1과 같은 메시지 다이제스트 알고리즘의 초기 해시 값일 가능성이 높습니다. 이러한 알고리즘은 양자 컴퓨팅 공격에 취약합니다.",
        "detected_algorithms": [
          "RSA (추정)",
          "MD5/SHA-1 (추정)"
        ],
        "recommendations": "RSA 및 MD5/SHA-1과 같은 알고리즘을 Kyber, Dilithium, Falcon과 같은 양자 내성 암호 알고리즘으로 대체하십시오. 기존 시스템과의 호환성을 위해 하이브리드 접근 방식을 고려하십시오.",
        "evidence": "어셈블리 코드에서 `mul`, `div` 명령어의 반복적인 사용 (모듈러 지수 연산 추정), 상수 `0x67452301`, `0xefcdab89` (MD5/SHA-1 초기 해시 값 추정)",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "publickeyalgo_messagedigest5_operations",
      "file_name": "publickeyalgo_messagedigest5_operations.s",
      "response_time": 5.135655879974365,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: sub_401000 function uses mul and div instructions within a loop, indicative of modular exponentiation. The arguments passed to the function (rdi, rsi, rdx) are likely base, exponent, and modulus respectively. The loop with test %rcx, %rcx and shr $1, %rcx suggests a square-and-multiply approach.)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: MD5 (Evidence: sub_401100 initializes eax, ebx, ecx, edx with MD5 initialization constants 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476. data_403000 contains constants used in MD5 rounds. Call to sub_401200 likely performs MD5 transformations.)",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer arithmetic (Evidence: sub_401000 uses mul and div instructions, suggesting operations on large integers, likely for modular exponentiation.)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "RSA modular exponentiation and MD5 hash algorithm detected. The code contains patterns indicative of RSA modular exponentiation using the square-and-multiply algorithm, and MD5 hash implementation with initialization constants and round constants."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_communication_relay",
      "file_name": "quantum_communication_relay.s",
      "response_time": 4.044950008392334,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드에서 RSA, ECDSA와 같은 고전적인 암호 알고리즘의 사용을 나타내는 시그니처가 발견되었습니다. 특히, `post_classical_key_distribution` 함수 호출은 양자 공격에 취약한 키 교환 메커니즘을 사용할 가능성이 있습니다. 또한, `entanglement_protection` 함수는 암호화 작업을 수행할 가능성이 높으며, 이 함수가 고전적인 암호 알고리즘을 사용하는 경우 양자 공격에 취약할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 적극 권장합니다. 기존 암호 알고리즘을 PQC 알고리즘으로 대체하고, 하이브리드 접근 방식을 고려하여 기존 시스템과의 호환성을 유지하면서 점진적으로 PQC로 전환하는 것이 좋습니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하고, PQC 알고리즘을 지원하는 라이브러리를 사용하는 것을 고려해야 합니다.",
        "evidence": "함수 호출 `post_classical_key_distribution` 및 `entanglement_protection`은 고전적인 암호 알고리즘의 사용을 암시합니다. 0x164a2dc3, 0x29b39567, 0x7ec1f48a, 0x4453e6b2와 같은 상수는 암호화 키 또는 파라미터와 관련될 수 있습니다.",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_communication_relay",
      "file_name": "quantum_communication_relay.s",
      "response_time": 4.248002767562866,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerable implementation patterns (Evidence: The function entanglement_protection at 0x4010f0 uses memory access patterns based on the loop counter, which could be vulnerable to timing attacks. Specifically, the line `movzbl (%rax),%ecx` at 0x401129 accesses memory at an address derived from the loop counter, and the line `mov %al,(%rdx)` at 0x401142 writes to memory at an address derived from the loop counter. These memory accesses could leak information about the data being processed.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Potential side-channel vulnerability detected in the entanglement_protection function due to memory access patterns dependent on the loop counter."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_cryptanalysis_simulation",
      "file_name": "quantum_cryptanalysis_simulation.s",
      "response_time": 3.29227876663208,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 Shor's 알고리즘 시뮬레이터를 초기화하고, 이는 RSA 및 ECDSA와 같은 공개 키 암호화 알고리즘에 대한 공격을 시뮬레이션하는 데 사용될 수 있습니다. 'setup_classical_crypto_targets' 함수 호출은 바이너리가 양자 공격에 취약한 기존 암호화 알고리즘을 사용하고 있음을 시사합니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 적극적으로 고려하고, 기존 시스템에서 PQC 알고리즘을 구현하기 위한 마이그레이션 계획을 수립해야 합니다. NIST PQC competition에서 표준화된 알고리즘을 우선적으로 고려하십시오.",
        "evidence": "함수 호출 'initialize_shors_algorithm_simulator', 'setup_classical_crypto_targets' 및 'simulate_post_classical_attack_scenarios'는 바이너리가 양자 공격에 취약한 기존 암호화 알고리즘을 대상으로 하고 있음을 나타냅니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_cryptanalysis_simulation",
      "file_name": "quantum_cryptanalysis_simulation.s",
      "response_time": 4.080584764480591,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Elliptic Curves (Evidence: call setup_curve_vulnerability_targets)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: Symmetric Ciphers (Evidence: call setup_symmetric_cipher_targets)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: Hash Functions (Evidence: call setup_hash_function_targets)",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: call setup_modular_vulnerability_targets)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The code sets up targets for modular arithmetic, elliptic curves, symmetric ciphers, and hash functions, indicating the presence of these cryptographic algorithms. The specific algorithms are not identified in this code snippet, but the setup functions suggest their use."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_migration_bridge_processor",
      "file_name": "quantum_migration_bridge_processor.s",
      "response_time": 4.813695907592773,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 'legacy_algorithm_detector' 함수를 호출하고, 그 결과에 따라 'post_classical_safe_replacement' 함수를 호출하는 것으로 보아, 기존 암호 알고리즘을 사용하고 있으며, 양자 내성 암호로의 전환을 고려하고 있음을 알 수 있습니다. 또한, x86-64 아키텍처에서 SSE/AVX 레지스터를 사용하는 패턴이 발견되었으며, 이는 AES 또는 ChaCha20과 같은 암호화 알고리즘의 구현을 나타낼 수 있습니다. 0xffffffffffffffp, 0x1fffffffffffff, 0xbebaedac, 0xefbeadde 와 같은 상수들은 암호화 알고리즘에서 사용될 가능성이 있습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA",
          "AES",
          "ChaCha20"
        ],
        "recommendations": "바이너리에서 사용되는 기존 암호 알고리즘을 식별하고, 해당 알고리즘을 양자 내성 암호 알고리즘으로 대체해야 합니다. 'post_classical_safe_replacement' 함수가 실제로 안전한 양자 내성 암호 알고리즘을 사용하는지 확인하고, 필요한 경우 해당 함수를 업데이트해야 합니다. 또한, 암호화 키 생성, 저장 및 사용에 대한 보안 모범 사례를 준수해야 합니다.",
        "evidence": "callq  401320 <legacy_algorithm_detector>, callq  401330 <post_classical_safe_replacement>, movq   $0xffffffffffffffp,-0x8(%rbp), movq   $0x1fffffffffffff,-0x10(%rbp), movq   $0xbebaedac,-0x18(%rbp), movq   $0xefbeadde,-0x20(%rbp), Crypto_Register_Usage (register_pattern)",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_migration_bridge_processor",
      "file_name": "quantum_migration_bridge_processor.s",
      "response_time": 3.105455160140991,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_resistant_lattice_operations",
      "file_name": "quantum_resistant_lattice_operations.s",
      "response_time": 3.753430128097534,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "제공된 어셈블리 코드 스니펫은 고차원 격자 연산과 관련된 초기화 및 설정 루틴을 나타냅니다. 'setup_lattice_structure', 'initialize_polynomial_ring', 'generate_lattice_basis'와 같은 함수 이름은 격자 기반 암호화 알고리즘의 구현을 암시합니다. 특히, 차원(512)과 계수(12289)의 사용은 Ring-LWE와 같은 격자 기반 암호화 체계에서 흔히 볼 수 있습니다. 이 코드 스니펫은 RSA 또는 ECDSA와 같은 기존의 비-PQC 알고리즘의 명확한 사용을 나타내지 않습니다. 그러나 전체 바이너리에서 다른 암호화 알고리즘이 사용될 가능성을 배제할 수는 없습니다.",
        "detected_algorithms": [],
        "recommendations": "전체 바이너리를 분석하여 기존의 비-PQC 알고리즘이 사용되었는지 확인합니다. 격자 기반 암호화 알고리즘이 사용되는 경우, 최신 표준 및 권장 사항을 준수하는지 확인합니다. 격자 기반 암호화 알고리즘의 구현에 대한 코드 검토 및 감사를 수행하여 잠재적인 취약점을 식별합니다.",
        "evidence": "함수 이름: setup_lattice_structure, initialize_polynomial_ring, generate_lattice_basis; 상수: 512 (차원), 12289 (계수 q)",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_resistant_lattice_operations",
      "file_name": "quantum_resistant_lattice_operations.s",
      "response_time": 3.6817097663879395,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: `divq %r8` where %r8 contains `modulus_q(%rip)`)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential Side-Channel Vulnerability (Evidence: `rdrand %rax` followed by division, which can be vulnerable to timing attacks)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Detected modular arithmetic operations and a potential side-channel vulnerability due to the use of rdrand followed by division. No specific vulnerable cryptographic algorithms were identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_resistant_migration_bridge",
      "file_name": "quantum_resistant_migration_bridge.s",
      "response_time": 3.426460027694702,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The binary contains code related to legacy cryptographic algorithms, specifically within the `legacy_mode_processing` section. The presence of a hybrid implementation suggests that the system is in a migration phase from vulnerable algorithms to post-quantum alternatives, indicating existing reliance on vulnerable algorithms.",
        "detected_algorithms": [],
        "recommendations": "Prioritize the complete transition to post-quantum cryptographic algorithms. Thoroughly audit and remove any remaining legacy cryptographic code paths. Implement robust testing and validation procedures to ensure the correct and secure operation of post-quantum algorithms. Consider using a hybrid approach during the transition, but ensure that the legacy algorithms are disabled as soon as possible.",
        "evidence": "The strings \"legacy_mode_processing\", \"hybrid_mode_processing\", \"post_post_classical_mode_processing\", and \"Post_Classical-Resistant Migration Bridge System\" indicate a system designed to migrate from vulnerable algorithms. The comments also explicitly mention \"legacy post_classical-vulnerable algorithms\".",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_resistant_migration_bridge",
      "file_name": "quantum_resistant_migration_bridge.s",
      "response_time": 3.7406680583953857,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "DETECTED: Legacy Algorithms (Evidence: call initialize_legacy_modular_context, call initialize_legacy_curve_context, call initialize_legacy_standard_context, call perform_legacy_key_exchange, call encrypt_with_legacy_block_cipher, call sign_with_legacy_signature, call package_legacy_results)",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "Detected calls to functions related to legacy algorithms, including initialization of modular and curve contexts, key exchange, block cipher encryption, and signature generation. However, the specific algorithms used are not identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "quantum_safe_communicator",
      "file_name": "quantum_safe_communicator.s",
      "response_time": 3.3651890754699707,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 `ntru_key_generation` 함수 호출이 발견되었습니다. NTRU는 양자 내성 암호 알고리즘이지만, 바이너리 내에 다른 비-PQC 알고리즘(RSA, ECDSA 등)이 함께 사용될 가능성이 있습니다. 또한, `k_cipher_4`라는 문자열이 발견되었는데, 이는 사용자 정의 암호화 함수일 수 있으며, 안전성이 검증되지 않았을 가능성이 있습니다. 추가적인 분석이 필요합니다.",
        "detected_algorithms": [],
        "recommendations": "1. 바이너리 내에서 사용되는 모든 암호화 알고리즘을 식별합니다. 2. NTRU 구현의 안전성을 검증합니다. 3. 비-PQC 알고리즘이 사용되는 경우, 양자 내성 암호로 대체합니다. 4. 사용자 정의 암호화 함수(`k_cipher_4`)의 안전성을 철저히 검토하고, 표준화된 암호화 라이브러리 사용을 고려합니다.",
        "evidence": "`ntru_key_generation` 함수 호출, `k_cipher_4` 문자열",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "quantum_safe_communicator",
      "file_name": "quantum_safe_communicator.s",
      "response_time": 3.3908770084381104,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "rsa_key_generation_engine",
      "file_name": "rsa_key_generation_engine.s",
      "response_time": 2.766486644744873,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 RSA 키 생성 엔진으로 보이며, 2048비트 키 크기를 사용합니다. 이는 양자 컴퓨터 공격에 취약한 RSA 알고리즘의 사용을 나타냅니다. 'Modular arithmetic implementation' 문자열과 'miller_rabin_test' 함수 호출은 RSA 키 생성의 일반적인 단계입니다.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "RSA를 Kyber, Dilithium, Falcon과 같은 양자 내성 암호 알고리즘으로 대체하십시오. 기존 시스템과의 호환성을 위해 하이브리드 접근 방식을 고려하십시오.",
        "evidence": "키 크기 2048비트, 'Modular arithmetic implementation' 문자열, 'miller_rabin_test' 함수 호출, 'generate_prime_candidates' 함수 호출",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "rsa_key_generation_engine",
      "file_name": "rsa_key_generation_engine.s",
      "response_time": 3.6297848224639893,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation (Evidence: call modular_exponentiation)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation detected due to the presence of a call to the 'modular_exponentiation' function. The code also contains prime generation and Miller-Rabin primality testing, which are common in RSA implementations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "salsa20_stream_cipher",
      "file_name": "salsa20_stream_cipher.s",
      "response_time": 4.151355028152466,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The provided assembly code implements a stream cipher, likely Salsa20, which is a symmetric encryption algorithm. While Salsa20 itself isn't directly broken by quantum computers in the same way as RSA or ECC, its security relies on the key size. If the key size is insufficient, it could be vulnerable to Grover's algorithm, which provides a quadratic speedup for key search. The code also uses constants like \"expand 32-byte k\", which are characteristic of Salsa20. The use of `movl` instructions to load key material into the state matrix suggests a byte-oriented operation, typical of stream ciphers. The absence of AES-NI instructions (from the knowledge base) further suggests a software-based implementation of a symmetric cipher.",
        "detected_algorithms": [
          "Salsa20 (likely)"
        ],
        "recommendations": "While Salsa20 is not directly vulnerable to Shor's algorithm, consider transitioning to a post-quantum cryptography (PQC) algorithm for long-term security. Evaluate the key size used with Salsa20 and ensure it is sufficiently large to mitigate Grover's algorithm. Consider using AES-256 in GCM mode as a more secure alternative, or explore NIST-recommended PQC algorithms like CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures.",
        "evidence": "The presence of constants like \"expand 32-byte k\", the loading of key material into a state matrix using `movl` instructions, and the overall structure of the code strongly suggest a Salsa20-like stream cipher implementation. The function names like `setup_cipher_state`, `initialize_key_schedule`, `load_nonce_counter`, and `encrypt_data_stream` are also indicative of a stream cipher.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "salsa20_stream_cipher",
      "file_name": "salsa20_stream_cipher.s",
      "response_time": 4.152182102203369,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Potential side-channel vulnerability (Evidence: roll $7, %eax, roll $9, %eax, roll $13, %eax, roll $18, %eax in quarter_round_column_0. These rotation operations, if not implemented carefully, can be vulnerable to timing attacks.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potential side-channel vulnerability detected in rotation operations. The code appears to implement a custom stream cipher, but no specific vulnerable algorithms (DES, AES, RC4, etc.) were explicitly identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "satellite_communication_security",
      "file_name": "satellite_communication_security.s",
      "response_time": 3.8230979442596436,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 비양자내성 암호 알고리즘의 사용 가능성이 높습니다. 특히, `satellite_key_derivation` 및 `uplink_encryption_layer` 함수 호출은 암호화 작업이 수행됨을 암시합니다. 문자열 분석에서 명확한 암호 알고리즘 문자열이 발견되지 않았지만, 함수 이름과 상수 값 (0xffffffffffffffp, 0x1fffffffffffff, 0xbebaedac, 0xefbeadde)은 암호화 키 생성 또는 암호화 관련 파라미터로 사용될 가능성이 있습니다. 추가적인 분석을 통해 정확한 알고리즘을 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "해당 바이너리에서 사용되는 암호 알고리즘을 정확히 파악하고, RSA, DSA, ECDSA와 같은 비양자내성 알고리즘이 사용되고 있다면, 양자내성 암호 알고리즘으로의 전환을 고려해야 합니다. 특히, `satellite_key_derivation` 및 `uplink_encryption_layer` 함수 내부 로직을 검토하여 사용되는 암호 알고리즘을 확인하고, 필요에 따라 PQC 라이브러리를 통합하여 보안성을 강화해야 합니다.",
        "evidence": "`satellite_key_derivation` 함수 호출, `uplink_encryption_layer` 함수 호출, 상수 값 0xffffffffffffffp, 0x1fffffffffffff, 0xbebaedac, 0xefbeadde",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "satellite_communication_security",
      "file_name": "satellite_communication_security.s",
      "response_time": 3.572272777557373,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms were explicitly detected based on the provided assembly code. The presence of functions like `uplink_encryption_layer` and `domesticn_satellite_cipher` suggests cryptographic operations, but without specific algorithm names or library calls, no definitive detection is possible."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "secure_boot_verification_processor",
      "file_name": "secure_boot_verification_processor.s",
      "response_time": 3.8131048679351807,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 `boot_signature_verification` 함수를 호출하고, `domesticn_secure_boot_cipher` 함수를 호출하는 것을 확인했습니다. `secure_boot_verification_processor.s` 파일의 어셈블리 코드 스니펫은 암호화 작업이 수행되고 있음을 나타냅니다. 구체적인 알고리즘은 명확히 식별되지 않았지만, 전통적인 암호화 알고리즘(RSA, ECDSA 등)이 사용될 가능성이 높습니다. 특히, `boot_signature_verification`은 서명 검증에 사용되는 알고리즘이 PQC에 취약할 수 있음을 시사합니다. 또한, `domesticn_secure_boot_cipher`는 국내에서 개발된 암호화 알고리즘을 사용할 가능성을 내포하며, 이 알고리즘이 PQC에 대한 내성을 갖추지 못했을 경우 취약점이 발생할 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "1. `boot_signature_verification` 및 `domesticn_secure_boot_cipher` 함수에서 사용되는 암호화 알고리즘을 정확히 식별합니다.\n2. 식별된 알고리즘이 양자 공격에 취약한 경우, 양자 내성 암호(PQC)로 대체합니다.\n3. 암호화 키 생성, 저장 및 관리에 대한 보안 모범 사례를 구현합니다.\n4. 정기적인 보안 감사를 수행하여 잠재적인 취약점을 식별하고 해결합니다.",
        "evidence": "callq  4010b0 <boot_signature_verification>\ncallq  4010e0 <domesticn_secure_boot_cipher>",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "secure_boot_verification_processor",
      "file_name": "secure_boot_verification_processor.s",
      "response_time": 4.492542266845703,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean cryptographic algorithm (Evidence: The function domesticn_secure_boot_cipher at 0x4010e0 suggests the use of a domestic Korean algorithm. The constants 0xd2629484 and 0x93a837ca at addresses 0x4010f3 and 0x4010fa respectively, could be related to S-boxes or transformation constants used in Korean algorithms like SEED, ARIA, HIGHT, or LEA.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: The function name `domesticn_secure_boot_cipher` at address 0x4010e0 strongly suggests the presence of a Korean cryptographic algorithm implementation.)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The analysis detected the potential use of a Korean cryptographic algorithm in the `domesticn_secure_boot_cipher` function. Further investigation is needed to identify the specific algorithm and assess its quantum vulnerability."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "secure_communication_protocol",
      "file_name": "secure_communication_protocol.s",
      "response_time": 3.225181818008423,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 Diffie-Hellman 키 교환 알고리즘이 사용되었습니다. Diffie-Hellman은 양자 공격에 취약한 고전적인 암호 알고리즘입니다. `diffie_hellman_init` 함수 호출이 이를 나타냅니다. 또한, `compute_digest_algred_secret` 함수는 키 파생 또는 디지털 서명에 사용될 수 있으며, 이 함수가 양자 내성이 없는 알고리즘을 사용하는 경우 취약점이 발생합니다.",
        "detected_algorithms": [
          "Diffie-Hellman"
        ],
        "recommendations": "Diffie-Hellman 키 교환을 양자 내성 키 교환 메커니즘(예: Kyber, Dilithium)으로 대체하고, `compute_digest_algred_secret` 함수에서 사용되는 알고리즘을 양자 내성 알고리즘으로 교체해야 합니다. 또한, 전체 암호화 프로토콜을 검토하여 양자 공격에 취약한 다른 구성 요소가 없는지 확인해야 합니다.",
        "evidence": "`callq 4010d0 <diffie_hellman_init>`",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "secure_communication_protocol",
      "file_name": "secure_communication_protocol.s",
      "response_time": 4.152667760848999,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: callq 4010d0 <diffie_hellman_init>, which calls modular exponentiation)",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Modular Arithmetic (Evidence: callq 401130 <modular_exponentiation>, imul instruction at 40116a, divq instruction at 40116f)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "Detected Diffie-Hellman key exchange initialization and modular exponentiation, indicating potential vulnerability to quantum attacks. Also detected modular arithmetic operations."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "secure_hash_256bit_operations",
      "file_name": "secure_hash_256bit_operations.s",
      "response_time": 4.406649112701416,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 코드는 SHA-256 해시 알고리즘을 사용하는 것으로 보입니다. SHA-256은 양자 컴퓨팅 공격에 직접적으로 취약하지는 않지만, RSA, DSA, ECDSA와 같은 취약한 알고리즘과 함께 사용될 경우 전체 시스템의 보안을 약화시킬 수 있습니다. 특히, 초기 해시 값(0x6a09e667, 0xbb67ae85 등)이 바이너리에 직접 포함되어 있는 것은 SHA-256의 표준적인 사용을 나타냅니다.",
        "detected_algorithms": [
          "SHA-256"
        ],
        "recommendations": "SHA-256 자체는 양자 내성이 없지만, RSA, DSA, ECDSA와 같은 다른 취약한 알고리즘과 함께 사용될 경우 문제가 될 수 있습니다. 따라서, 시스템 전체의 보안을 강화하기 위해 양자 내성 암호(PQC)로의 전환을 고려해야 합니다. 특히, 키 교환, 디지털 서명 등 다른 암호화 작업에 사용되는 알고리즘을 PQC로 대체하는 것이 중요합니다.",
        "evidence": "초기 해시 값 (0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19)이 바이너리에 포함되어 있으며, 이는 SHA-256의 초기 해시 값과 일치합니다. 또한, `sub_401100` 함수 내에서 64바이트 블록 단위로 데이터를 처리하는 루프(`loc_401120`)는 SHA-256의 블록 처리 방식을 암시합니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "secure_hash_256bit_operations",
      "file_name": "secure_hash_256bit_operations.s",
      "response_time": 3.9305360317230225,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "DETECTED: SHA-256 Initialization Constants (Evidence: Initial values 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 at data_403000)",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.75,
        "summary": "SHA-256 initialization constants detected, suggesting a possible SHA-256 implementation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "secure_matrix_transformation_unit",
      "file_name": "secure_matrix_transformation_unit.s",
      "response_time": 3.3122329711914062,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 암호화 관련 연산이 수행되는 것으로 보입니다. 특히, `block_substitution_layer` 함수 호출과 `movdqa`, `pxor`, `pshufb`와 유사한 SSE/AVX 명령어를 사용하는 패턴이 발견될 경우 AES 또는 ChaCha20 구현을 의심할 수 있습니다. 또한, `matrix_state_initialization` 함수 호출은 암호화 상태 초기화를 나타낼 수 있습니다. 현재 제공된 코드 스니펫만으로는 정확한 알고리즘을 식별하기 어렵지만, 전통적인 암호 알고리즘이 사용될 가능성이 높습니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 암호 알고리즘을 정확히 식별하고, 해당 알고리즘이 양자 공격에 취약한 경우 양자 내성 암호(PQC)로 대체하는 것을 권장합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하고, 안전한 암호화 방식을 사용하는지 확인해야 합니다.",
        "evidence": "함수 호출 `block_substitution_layer`, `matrix_state_initialization`",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "secure_matrix_transformation_unit",
      "file_name": "secure_matrix_transformation_unit.s",
      "response_time": 4.4245569705963135,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: ARIA (Evidence: Function names 'block_substitution_layer', 'linear_permutation_layer', 'key_addition_layer', 'column_mixing_transformation' and the presence of a 'transformation_sbox' at address 602000 suggest a block cipher with S-box substitutions and mixing layers, potentially related to ARIA or similar algorithms. The function names k_cipher_4 also suggest a Korean cipher.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean Cryptographic Algorithm (Evidence: The function names 'block_substitution_layer', 'linear_permutation_layer', 'key_addition_layer', 'column_mixing_transformation' and the function name k_cipher_4 suggest a Korean cipher.)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "Potentially detected ARIA or a similar Korean block cipher based on function names and the presence of a substitution box. Further analysis is needed to confirm the exact algorithm and its implementation details."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "siphash_prf_function",
      "file_name": "siphash_prf_function.s",
      "response_time": 3.586634874343872,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "SipHash는 양자 컴퓨팅에 취약한 공개키 암호 알고리즘(RSA, ECDSA 등)을 사용하지 않습니다. SipHash는 대칭 키 기반 메시지 인증 코드(MAC)로, 해시 테이블 무결성 및 충돌 방지에 사용됩니다. 하지만 키가 손상되면 취약해질 수 있습니다.",
        "detected_algorithms": [],
        "recommendations": "SipHash 자체는 양자 컴퓨팅에 직접적인 영향을 받지 않지만, 키 관리 및 배포 방식이 안전한지 확인해야 합니다. 키가 안전하게 생성, 저장, 전송되지 않으면 SipHash의 보안성이 저하될 수 있습니다. 키 교환 프로토콜이 양자 내성을 갖도록 고려해야 합니다.",
        "evidence": "바이너리 코드에서 RSA, ECDSA와 같은 공개키 암호 알고리즘의 시그니처가 발견되지 않았습니다. SipHash 관련 문자열(예: 'initialize_siphash_state', 'load_secret_key', 'process_input_message')이 발견되었습니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "siphash_prf_function",
      "file_name": "siphash_prf_function.s",
      "response_time": 3.5780956745147705,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "No vulnerable cryptographic algorithms detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "smart_card_authenticator",
      "file_name": "smart_card_authenticator.s",
      "response_time": 3.1410951614379883,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 암호화 키 스케줄 변환 및 암호화 블록 변환 함수가 사용되는 것으로 보입니다. 구체적인 알고리즘은 문자열 분석을 통해 확인해야 하지만, 현재 정보만으로는 RSA, ECDSA와 같은 비양자내성 암호 알고리즘이 사용될 가능성이 있습니다. 특히, 64비트 아키텍처에서 64비트 상수들을 메모리에 저장하고 이를 암호화 함수에 전달하는 패턴은 전통적인 암호 알고리즘의 사용을 암시합니다.",
        "detected_algorithms": [],
        "recommendations": "바이너리에서 사용되는 암호 알고리즘을 정확히 식별하고, 해당 알고리즘이 양자 공격에 취약한 경우, 양자내성암호(PQC)로 대체해야 합니다. 또한, 암호화 키 관리 및 저장 방식의 안전성을 검토하고, 필요한 경우 보안 강화를 위한 조치를 취해야 합니다.",
        "evidence": "함수 호출 `callq 401060 <transform_key_schedule>` 및 `callq 4010e0 <transform_encrypt_block>`",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "smart_card_authenticator",
      "file_name": "smart_card_authenticator.s",
      "response_time": 4.741873025894165,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: LEA (Evidence: The code initializes 64-bit values at addresses -0x8(%rbp), -0x10(%rbp), -0x18(%rbp), and -0x20(%rbp) and then calls transform_key_schedule and transform_encrypt_block. The transform_key_schedule function performs rotations (rol instruction) which is a characteristic of LEA. The function names suggest key scheduling and encryption, which are common in symmetric ciphers like LEA.)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "DETECTED: Key Storage (Evidence: The code allocates space on the stack using `sub $0x40,%rsp` and stores 64-bit values at offsets from %rbp, specifically -0x8, -0x10, -0x18, and -0x20. This suggests the storage of cryptographic keys or state information.)",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The analysis detected potential usage of the LEA Korean algorithm based on the presence of rotation operations and function names suggesting key scheduling and encryption. It also detected memory allocation patterns indicative of cryptographic key storage."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "smart_card_security_module",
      "file_name": "smart_card_security_module.s",
      "response_time": 3.6424362659454346,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 RSA, ECDSA와 같은 비양자내성 암호 알고리즘의 사용이 의심됩니다. 특히, `smart_card_authentication` 함수와 `domesticn_smartcard_cipher` 함수 호출은 암호화 작업이 수행되고 있음을 나타냅니다. 구체적인 알고리즘은 disassembly 코드만으로는 단정하기 어렵지만, 스마트 카드 보안 모듈의 특성상 RSA, ECDSA 등의 전통적인 암호 알고리즘이 사용될 가능성이 높습니다. 또한, `k_cipher_4` 변수명은 암호화 키와 관련된 변수일 가능성이 있습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA"
        ],
        "recommendations": "양자 컴퓨팅 공격에 대한 보안을 강화하기 위해, RSA, ECDSA와 같은 기존 암호 알고리즘을 양자내성암호(PQC)로 대체하는 것을 권장합니다. NIST에서 표준화된 PQC 알고리즘(예: Kyber, Dilithium)을 도입하고, 기존 암호 시스템과의 호환성을 고려하여 점진적으로 전환하는 전략을 수립해야 합니다. 또한, 암호화 키 관리 시스템을 강화하고, PQC 알고리즘에 대한 지속적인 연구 및 업데이트를 수행해야 합니다.",
        "evidence": "함수 호출 `smart_card_authentication`, `domesticn_smartcard_cipher`, 변수명 `k_cipher_4`",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "smart_card_security_module",
      "file_name": "smart_card_security_module.s",
      "response_time": 3.7284421920776367,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "DETECTED: Korean algorithm (Evidence: domesticn_smartcard_cipher function at 401120, likely a domestic Korean cipher implementation)",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean cryptographic algorithm (Evidence: domesticn_smartcard_cipher function at 401120)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.6,
        "summary": "The analysis detected a potential Korean cryptographic algorithm implementation within the `domesticn_smartcard_cipher` function. Further investigation is needed to determine the specific algorithm and its vulnerability to quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "sphincs_signature_scheme",
      "file_name": "sphincs_signature_scheme.s",
      "response_time": 3.4521658420562744,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": false,
        "vulnerability_details": "SPHINCS+는 해시 기반 서명 체계로, 양자 내성을 갖는 것으로 알려져 있습니다. 바이너리에서 SPHINCS+ 파라미터 설정 및 관련 함수 호출이 확인되었습니다.",
        "detected_algorithms": [],
        "recommendations": "SPHINCS+를 사용하고 있으므로, 현재로서는 양자 공격에 대한 취약점은 낮은 것으로 판단됩니다. 하지만, 암호화 알고리즘의 안전성은 지속적으로 평가되어야 합니다. 최신 연구 동향을 주시하고, 필요한 경우 알고리즘을 업데이트하는 것이 좋습니다.",
        "evidence": "추출된 문자열에서 'SPHINCS+', 'initialize_hash_tree_parameters', 'build_hypertree_structure', 'verify_signature_chain' 등의 문자열이 확인되었습니다. 또한, 해시 트리 파라미터 설정 (security_level, total_height, subtree_height, tree_layers, hash_size, winternitz_w)이 SPHINCS+의 특징을 나타냅니다.",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "sphincs_signature_scheme",
      "file_name": "sphincs_signature_scheme.s",
      "response_time": 3.5096020698547363,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms detected based on explicit evidence in the provided assembly code. The code appears to implement a hash-based signature scheme, potentially SPHINCS+, but without explicit cryptographic API calls or library imports, no specific vulnerable algorithms can be identified."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "steganographic_crypto_covert_channel",
      "file_name": "steganographic_crypto_covert_channel.s",
      "response_time": 3.465562105178833,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The assembly code contains function calls like `convert_rgb_to_secure_colorspace`, `apply_advanced_noise_reduction`, and `detect_image_f` which are likely disguising cryptographic operations such as key derivation, encryption, and signature generation. Without further analysis of the called functions, it's impossible to determine the exact algorithms used. However, the context suggests a focus on covert channels and steganography, implying the use of standard, non-quantum-resistant algorithms to ensure compatibility and ease of implementation. The use of RSA, ECDSA, or similar algorithms is highly probable.",
        "detected_algorithms": [],
        "recommendations": "Due to the high probability of using non-PQC algorithms, a transition to post-quantum cryptography is strongly recommended. This includes replacing vulnerable algorithms with their PQC counterparts (e.g., replacing RSA with CRYSTALS-Kyber for key exchange and CRYSTALS-Dilithium for digital signatures). Furthermore, the steganographic nature of the code necessitates a thorough review of all image processing functions to identify and replace any hidden cryptographic operations with PQC-compliant alternatives. Consider using hybrid approaches initially, combining classical and PQC algorithms for a smoother transition.",
        "evidence": "Function calls `convert_rgb_to_secure_colorspace`, `apply_advanced_noise_reduction`, and `detect_image_f` within the `process_multimedia_content` function, suggesting hidden cryptographic operations. The string \"Steganographic Cryptographic Covert Channel\" indicates a deliberate attempt to conceal cryptographic functionality.",
        "confidence_score": 0.75,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "steganographic_crypto_covert_channel",
      "file_name": "steganographic_crypto_covert_channel.s",
      "response_time": 3.693248987197876,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "DETECTED: RSA modular exponentiation and large integer arithmetic (Evidence: Modular arithmetic implementation in setup_enhanced_color_palette, mulq instruction for n = p * q)",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "DETECTED: Big integer libraries and modular arithmetic operations (Evidence: Modular arithmetic implementation in setup_enhanced_color_palette)",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "DETECTED: Assembly-level obfuscation of vulnerable crypto operations (Evidence: Steganographic Cryptographic Covert Channel, Hidden cryptographic operations embedded within seemingly innocent code, Advanced evasion techniques)"
        },
        "confidence_score": 0.7,
        "summary": "RSA modular exponentiation and large integer arithmetic patterns detected through modular arithmetic implementation and multiplication operations. Big integer libraries and modular arithmetic operations are also detected. Assembly-level obfuscation is present, indicating steganographic techniques."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "stream_cipher_generator",
      "file_name": "stream_cipher_generator.s",
      "response_time": 2.604323148727417,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리에서 RC4 키 스케줄링 함수(rc4_key_schedule)가 호출되는 것을 확인했습니다. RC4는 양자 컴퓨팅 공격에 취약한 스트림 암호입니다.",
        "detected_algorithms": [
          "RC4"
        ],
        "recommendations": "RC4는 안전하지 않은 암호 알고리즘이므로, AES-GCM 또는 ChaCha20-Poly1305와 같은 양자 내성 암호로 대체해야 합니다. 또한, 암호화 라이브러리를 최신 버전으로 업데이트하여 알려진 취약점을 해결해야 합니다.",
        "evidence": "callq 401060 <rc4_key_schedule>",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "stream_cipher_generator",
      "file_name": "stream_cipher_generator.s",
      "response_time": 3.748436212539673,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: RC4 (Evidence: callq 401060 <rc4_key_schedule>, callq 4010d0 <rc4_encrypt_stream>)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "RC4 stream cipher detected. Trivium stream cipher detected."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "stream_generator_operations",
      "file_name": "stream_generator_operations.s",
      "response_time": 4.8147499561309814,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, RC4 스트림 암호와 유사한 키 스트림 생성 로직이 발견되었습니다. RC4는 양자 컴퓨팅 공격에 취약한 것으로 알려져 있습니다. 구체적으로, `data_403000`을 상태 배열로 사용하고, `loc_401030` 루프에서 상태 배열을 수정하며, 생성된 키 스트림을 입력 데이터와 XOR 연산하는 패턴이 관찰됩니다. 이는 RC4의 키 스케줄링 알고리즘(KSA) 및 의사 난수 생성 알고리즘(PRGA)과 유사합니다.",
        "detected_algorithms": [
          "RC4"
        ],
        "recommendations": "RC4는 안전하지 않은 암호 알고리즘이므로, AES-GCM 또는 ChaCha20-Poly1305와 같은 최신 암호 알고리즘으로 대체해야 합니다. 또한, 양자 내성 암호(PQC) 알고리즘으로의 전환을 고려해야 합니다.",
        "evidence": "바이너리 코드에서 `data_403000` 배열을 사용한 상태 업데이트 및 XOR 연산 패턴이 RC4 스트림 암호의 특징과 일치합니다. 특히, `movzbl data_403000(%r8), %eax`, `movb %dl, data_403000(%r8)`, `xorb %sil, %al` 등의 명령어가 RC4의 키 스트림 생성 과정과 유사합니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "stream_generator_operations",
      "file_name": "stream_generator_operations.s",
      "response_time": 6.92511510848999,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: RC4 (Evidence: sub_401000 function performs a stream cipher operation. sub_401200 initializes a 256-byte state array (data_403000). sub_401000 modifies this state array and uses it to XOR with the input data. This is a typical RC4 key scheduling algorithm (KSA) and pseudo-random generation algorithm (PRGA) implementation. The loop at loc_401030 performs the PRGA, and the loop at loc_401270 performs the KSA.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "DETECTED: Korean Algorithm (Evidence: sub_401300 and sub_401400 functions, along with data_403400, suggest the presence of a Korean cipher. The operations in sub_401300 (add, xor, rol) are typical of block cipher rounds. The repeated calls to sub_401300 within sub_401400, along with the loop counter initialized to 20, indicate multiple rounds of a block cipher. The data_403400 section contains initial constants. The name 'k_cipher_4' used in sub_401400 further suggests a Korean cipher implementation. While the exact algorithm (e.g., ARIA, LEA, HIGHT) cannot be determined without further analysis, the presence of a Korean cipher is highly probable.)",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "RC4 stream cipher and a Korean block cipher are detected. The RC4 implementation is vulnerable to quantum attacks. The specific Korean algorithm is not identified, but its presence is strongly indicated."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "stream_keygeneration_operations",
      "file_name": "stream_keygeneration_operations.s",
      "response_time": 3.2110230922698975,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 스트림 암호 키 생성 연산에서 전통적인 암호 알고리즘(RC4 유사)의 사용이 의심됩니다. `data_403000`을 참조하는 루프와 `xorb` 연산은 RC4 또는 유사한 스트림 암호의 키 스트림 생성 단계를 나타낼 수 있습니다. RC4는 양자 컴퓨팅 공격에 취약한 것으로 알려져 있습니다.",
        "detected_algorithms": [
          "RC4 (추정)"
        ],
        "recommendations": "해당 스트림 암호 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. SHAKE128, AES-GCM-SIV 등의 PQC 알고리즘을 고려하십시오. 또한, 키 교환 프로토콜을 양자 키 분배(QKD) 또는 PQC 키 교환 메커니즘으로 업그레이드하는 것을 고려하십시오.",
        "evidence": "data_403000을 참조하는 루프, xorb 연산, and $255 연산",
        "confidence_score": 0.7,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "stream_keygeneration_operations",
      "file_name": "stream_keygeneration_operations.s",
      "response_time": 4.911861896514893,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: RC4 (Evidence: The code initializes a state array `data_403000` in `sub_401200` and then uses it in `sub_401000` to XOR with the input data. The `sub_401200` function initializes the state array, and `sub_401000` uses it to perform a stream cipher-like operation. The operations in `loc_401030` and `loc_401270` strongly suggest RC4 key scheduling and encryption. Specifically, the `i` and `j` indices are updated, the state array is modified, and the keystream byte is XORed with the input. The `data_403000` array is used as the S-box, and the `i` and `j` variables are `r8` and `r9` respectively.)",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.8,
        "summary": "RC4 stream cipher detected based on state array initialization and keystream generation pattern."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "triple_des_encryption_module",
      "file_name": "triple_des_encryption_module.s",
      "response_time": 2.9328861236572266,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 1,
      "false_negatives": 1,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 파일은 Triple DES (3DES) 암호화를 사용합니다. 3DES는 Grover's 알고리즘에 취약하며, 이는 양자 컴퓨터가 고전적인 공격보다 훨씬 빠르게 키를 깨뜨릴 수 있음을 의미합니다. 명시적으로 'Post_Classical-vulnerable to Grover's algorithm'이라고 언급되어 있습니다.",
        "detected_algorithms": [
          "Triple DES"
        ],
        "recommendations": "3DES는 더 이상 안전하지 않으므로 AES-256 또는 ChaCha20과 같은 양자 내성 암호로 대체해야 합니다. 또한, 키 교환 메커니즘도 양자 내성 알고리즘으로 업그레이드해야 합니다.",
        "evidence": "바이너리 파일에 'Triple Block Cipher Encryption Module', 'FIPS 46-3 compliant implementation using EDE (Encrypt-Decrypt-Encrypt)', 'Post_Classical-vulnerable to Grover's algorithm', 'Uses three 56-bit cipher keys for EDE operation' 등의 문자열이 포함되어 있습니다.",
        "confidence_score": 1.0,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "triple_des_encryption_module",
      "file_name": "triple_des_encryption_module.s",
      "response_time": 3.963503122329712,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "DETECTED: 3DES (Evidence: Mentions \"Triple Block Cipher Encryption Module\", \"FIPS 46-3 compliant implementation using EDE (Encrypt-Decrypt-Encrypt)\", and \"Post_Classical-vulnerable to Grover's algorithm (effective 112-bit security reduced to 56-bit)\")",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "DETECTED: Side-channel vulnerable implementation patterns (Evidence: The code includes checks for weak keys, which are often related to side-channel vulnerabilities. The comments also suggest a simplified implementation, implying potential vulnerabilities in a real-world scenario.)",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected 3DES implementation, which is vulnerable to Grover's algorithm. Also, potential side-channel vulnerabilities due to weak key checks and simplified implementation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "vpn_tunnel_encryption_engine",
      "file_name": "vpn_tunnel_encryption_engine.s",
      "response_time": 3.1902430057525635,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "바이너리 분석 결과, 비양자내성 암호 알고리즘이 사용된 것으로 판단됩니다. 특히, `tunnel_key_exchange` 함수 호출과 암호화 관련 상수 사용이 확인되었습니다. 추가적인 분석을 통해 정확한 알고리즘을 식별해야 합니다.",
        "detected_algorithms": [],
        "recommendations": "양자 컴퓨팅 공격에 대비하여, 기존 암호 시스템을 양자내성암호(PQC)로 전환하는 것을 권장합니다. NIST PQC 표준을 준수하는 알고리즘을 도입하고, 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립해야 합니다.",
        "evidence": "함수 호출 `callq 4011f0 <tunnel_key_exchange>`, 암호화 관련 상수 `movq $0xffffffffffffffp,-0x8(%rbp)`, `movq $0x1fffffffffffff,-0x10(%rbp)`, `callq  401220 <packet_encryption_layer>`",
        "confidence_score": 0.6,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "vpn_tunnel_encryption_engine",
      "file_name": "vpn_tunnel_encryption_engine.s",
      "response_time": 3.736398220062256,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "NOT DETECTED",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "NOT DETECTED",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.1,
        "summary": "No vulnerable cryptographic algorithms were explicitly detected based on the provided assembly code. The presence of functions like 'tunnel_key_exchange', 'packet_encryption_layer', and 'domesticn_vpn_cipher' suggests cryptographic operations, but without explicit API calls or algorithm names, a definitive detection is not possible."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "assembly_binary",
      "test_id": "x25519_key_agreement",
      "file_name": "x25519_key_agreement.s",
      "response_time": 3.6093499660491943,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "The binary uses Curve25519 for key agreement, which is based on elliptic curve cryptography (ECC). ECC algorithms are known to be vulnerable to quantum attacks, specifically Shor's algorithm. The presence of curve parameters and operations related to Curve25519 indicates a potential vulnerability.",
        "detected_algorithms": [
          "Curve25519"
        ],
        "recommendations": "Migrate to post-quantum cryptographic (PQC) algorithms for key agreement, such as those based on lattice cryptography (e.g., CRYSTALS-Kyber) or code-based cryptography (e.g., Classic McEliece). Consider hybrid approaches that combine classical and PQC algorithms for a transition period.",
        "evidence": "The binary contains calls to functions like `initialize_curve_parameters`, `generate_private_scalar`, `compute_public_point`, `perform_shared_secret`, and `verify_shared_secret`, which are indicative of Curve25519 key agreement. The code also sets up Curve25519 domain parameters, including the prime `p = 2^255 - 19` and the curve coefficient `A24 = 121665`. The base point coordinate `u = 9` is also set. The clamping of the private scalar is also a strong indicator of X25519 usage.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "assembly_binary",
      "test_id": "x25519_key_agreement",
      "file_name": "x25519_key_agreement.s",
      "response_time": 3.863564968109131,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Assembly Binary Vulnerable Crypto Detection Agent",
        "analysis_results": {
          "rsa_modular_exponentiation_and_large_integer_arithmetic_patterns": "NOT DETECTED",
          "elliptic_curve_point_operations_and_scalar_multiplication_patterns": "DETECTED: Curve25519 (Evidence: Mentions Curve25519, uses Montgomery ladder for scalar multiplication, and references point operations)",
          "discrete_logarithm_computation_signatures_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_signatures_seed_s_boxes_aria_transformations_hight_operations_lea_rotations": "NOT DETECTED",
          "symmetric_cipher_patterns_vulnerable_to_quantum_attacks_des_3des_rc4_aes_128": "NOT DETECTED",
          "cryptographic_hash_function_implementations_md5_sha_1_vulnerable_sha_variants": "NOT DETECTED",
          "big_integer_libraries_and_modular_arithmetic_operations": "NOT DETECTED",
          "cryptographic_library_calls_and_api_signatures": "NOT DETECTED",
          "optimization_patterns_specific_to_vulnerable_crypto_algorithms": "DETECTED: Montgomery Ladder (Evidence: scalar_multiply function implements Montgomery ladder)",
          "korean_cryptographic_library_signatures_and_domestic_algorithm_implementations": "NOT DETECTED",
          "memory_allocation_patterns_for_cryptographic_key_storage": "NOT DETECTED",
          "side_channel_vulnerable_implementation_patterns": "NOT DETECTED",
          "assembly_level_obfuscation_of_vulnerable_crypto_operations": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Curve25519 elliptic curve cryptography detected using Montgomery ladder for scalar multiplication."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "apache_legacy_ssl",
      "file_name": "apache_legacy_ssl.conf",
      "response_time": 5.0322558879852295,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 7,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 및 ECDHE-RSA와 같은 양자 취약 암호화 알고리즘이 사용되고 있습니다. 특히 `SSLCipherSuite` 설정에서 `KeyExchange-PublicKey-BlockCipher256-GCM-SHA384`와 같은 항목은 RSA 키 교환을 사용할 가능성이 높습니다. 또한 `LEGACY_CIPHER-CBC3-SHA`는 취약한 레거시 암호화 알고리즘을 사용하고 있어 보안에 취약합니다. `SSLOpenSSLConfCmd DHParameters /etc/pki/tls/dhparam1024.pem` 설정은 1024비트 DH 파라미터를 사용하고 있어 보안 강도가 낮습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDHE-RSA",
          "Triple DES (CBC3)",
          "SHA1"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 고려해야 합니다. `SSLCipherSuite` 설정을 업데이트하여 PQC 알고리즘을 우선적으로 사용하도록 구성하고, RSA 및 ECDHE-RSA와 같은 취약한 알고리즘은 제거해야 합니다. 또한, DH 파라미터를 2048비트 이상으로 업그레이드하고, 레거시 암호화 알고리즘 사용을 중단해야 합니다.",
        "evidence": "SSLCipherSuite HIGH:MEDIUM:+TripleCipher:+StreamCipher:!aNULL:!eNULL:!EXPORT:!LEGACY_CIPHER:!Hash128:!PSK:!SRP\nSSLCipherSuite CurveKE-PublicKey-BlockCipher256-GCM-SHA384:CurveKE-PublicKey-BlockCipher128-GCM-Hash256:CurveKE-PublicKey-BlockCipher256-SHA384:CurveKE-PublicKey-BlockCipher128-Hash256:KeyExchange-PublicKey-BlockCipher256-GCM-SHA384:KeyExchange-PublicKey-BlockCipher128-GCM-Hash256:KeyExchange-PublicKey-BlockCipher256-Hash256:KeyExchange-PublicKey-BlockCipher128-Hash256:BlockCipher256-GCM-SHA384:BlockCipher128-GCM-Hash256:BlockCipher256-Hash256:BlockCipher128-Hash256:StreamCipher-SHA:LEGACY_CIPHER-CBC3-SHA\nSSLOpenSSLConfCmd DHParameters /etc/pki/tls/dhparam1024.pem",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "apache_legacy_ssl",
      "file_name": "apache_legacy_ssl.conf",
      "response_time": 4.694920301437378,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 3,
      "false_negatives": 6,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: SSLCertificateFile /etc/pki/tls/certs/server.crt, SSLCertificateKeyFile /etc/pki/tls/private/server.key, SSLCertificateFile /etc/pki/tls/certs/api-server-rsa1024.crt, SSLCertificateKeyFile /etc/pki/tls/private/api-server-rsa1024.key)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: Elliptic Curve (Evidence: SSLOpenSSLConfCmd Curves secp256r1:secp384r1:prime256v1)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (DH) (Evidence: SSLOpenSSLConfCmd DHParameters /etc/pki/tls/dhparam1024.pem)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: SSLv3 (Evidence: SSLProtocol all -SSLv2)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: SSLv3 (Evidence: SSLProtocol all -SSLv2)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The configuration uses RSA certificates, Elliptic Curves (secp256r1, secp384r1, prime256v1), and Diffie-Hellman with 1024-bit parameters. It also allows SSLv3. The api.legacy-app.com virtual host is configured with weak ciphers and insecure settings."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "automotive_v2x_system",
      "file_name": "automotive_v2x_system.yaml",
      "response_time": 4.283191204071045,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 6,
      "false_negatives": 12,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 여러 개의 비-양자내성 암호 알고리즘이 사용되고 있습니다. 특히 'CurveSig-P256', 'CurveSig-P384', 'CurveKE-P256', 'PublicKey-2048', 'PublicKey-3072'는 각각 ECDSA, RSA 기반의 서명 및 키 교환 알고리즘으로, 양자 컴퓨팅 공격에 취약합니다. 또한, TLS 설정에서 'CurveKE-CurveSig-BlockCipher256-GCM-SHA384' cipher suite는 CurveKE (ECDHE 또는 유사)를 사용하므로 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "CurveSig-P256",
          "CurveSig-P384",
          "CurveKE-P256",
          "PublicKey-2048",
          "PublicKey-3072",
          "CurveKE-CurveSig-BlockCipher256-GCM-SHA384"
        ],
        "recommendations": "V2X 통신 시스템의 보안을 강화하기 위해, 비-양자내성 암호 알고리즘을 양자내성 암호 알고리즘으로 대체해야 합니다. NIST에서 권고하는 알고리즘을 기반으로, 서명, 키 교환, 암호화 등 각 기능에 적합한 PQC 알고리즘을 선택하고 적용해야 합니다. 또한, 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립하는 것이 중요합니다.",
        "evidence": "automotive_v2x_system.yaml 파일에서 'CurveSig-P256', 'CurveSig-P384', 'CurveKE-P256', 'PublicKey-2048', 'PublicKey-3072', 'CurveKE-CurveSig-BlockCipher256-GCM-SHA384' 알고리즘 사용이 확인되었습니다.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "blockchain_node_security",
      "file_name": "blockchain_node_security.conf",
      "response_time": 4.919132947921753,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 2,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 ECDSA (elliptic_curve_digital_signature, ecdsa_recovery, secp256k1_ecdsa, ecdsa_secp256k1)를 사용하는 부분이 발견되었습니다. ECDSA는 타원 곡선 암호화 기반으로 양자 컴퓨터 공격에 취약합니다. 또한, 키 저장소 암호화에 사용된 bc_128_ctr도 AES-128 CTR 모드이며, 양자 공격에 대한 안전성이 보장되지 않습니다. 해시 함수로 keccak256이 사용되었는데, 이는 양자 내성이 아니므로 취약점으로 간주될 수 있습니다.",
        "detected_algorithms": [
          "ECDSA",
          "secp256k1",
          "AES-128-CTR",
          "keccak256"
        ],
        "recommendations": "ECDSA를 양자 내성 알고리즘(예: Dilithium, Falcon)으로 대체하고, AES-128-CTR을 양자 내성 대칭 키 암호(예: CRYSTALS-Kyber와 함께 사용되는 AES-256)로 교체하는 것을 고려해야 합니다. keccak256 또한 양자 내성 해시 함수로 교체하는 것을 고려해야 합니다. 또한, 키 교환 프로토콜을 양자 내성 키 교환 프로토콜로 업그레이드해야 합니다.",
        "evidence": "[cryptography] signing_algorithm = \"elliptic_curve_digital_signature\", signature_curve = \"secp256k1\", verification_algorithm = \"ecdsa_recovery\", [peer_communication] peer_authentication = \"secp256k1_ecdsa\", [transaction_security] signature_verification = \"ecdsa_secp256k1\", keystore_cipher = \"bc_128_ctr\", [block_production] header_seal_type = \"ecdsa_signature\", hash_algorithm = \"keccak256\", merkle_tree_hash = \"keccak256\", state_trie = \"merkle_patricia_trie\", trie_hash_function = \"keccak256\", receipt_trie_hash = \"keccak256\", transaction_trie_hash = \"keccak256\", block_hash_algorithm = \"keccak256\"",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "cloud_hsm_operations",
      "file_name": "cloud_hsm_operations.log",
      "response_time": 5.735591888427734,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 6,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 TLS handshake에 사용되는 cipher suite와 키 교환 알고리즘, 그리고 HSM에 저장된 키들의 유형을 분석한 결과, 양자 컴퓨팅 공격에 취약한 알고리즘들이 사용되고 있음을 확인했습니다. 특히, 'CurveKE-PublicKey-BlockCipher256-GCM-SHA384' cipher suite, 2048비트 및 3072비트 RSA 키, EC_P256 키가 발견되었습니다. CurveKE는 ECDHE 또는 유사한 타원 곡선 기반 키 교환 알고리즘을 나타낼 가능성이 높으며, RSA와 ECDSA는 양자 컴퓨팅 공격에 취약한 대표적인 공개키 암호 알고리즘입니다.",
        "detected_algorithms": [
          "ECDHE (CurveKE)",
          "RSA-2048",
          "RSA-3072",
          "EC_P256"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 적극적으로 고려해야 합니다. 다음 단계를 권장합니다:\n1. HSM에서 지원하는 PQC 알고리즘을 확인하고, 지원되지 않는 경우 펌웨어 업데이트 또는 HSM 교체를 고려합니다.\n2. TLS 설정에서 PQC cipher suite를 활성화하고, 기존 취약한 cipher suite의 사용을 중단합니다.\n3. RSA 및 ECDSA 키를 PQC 알고리즘 기반의 키로 교체합니다.\n4. PQC 알고리즘의 성능을 테스트하고, 시스템에 미치는 영향을 평가합니다.\n5. PQC 전환 계획을 수립하고, 단계적으로 적용합니다.",
        "evidence": "2025-01-25 09:00:15.345 [TRACE] TLS::NegotiateCipherSuite() - Selected cipher: CurveKE-PublicKey-BlockCipher256-GCM-SHA384\n2025-01-25 09:00:16.011 [TRACE] KeyAttributes::Parse(key_id=0x1002) - Label: pk_crypto-sign-key, Type: PublicKey-2048, Usage: Sign/Verify\n2025-01-25 09:00:16.122 [TRACE] KeyAttributes::Parse(key_id=0x1003) - Label: ec_crypto-p256-key, Type: EC_P256, Usage: Sign/Verify/Derive\n2025-01-25 09:00:16.344 [DEBUG] KeyGeneration::SetParameters() - Algorithm: PublicKey, Key size: 3072 bits, Public exponent: 65537",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "cloud_storage_encryption",
      "file_name": "cloud_storage_encryption.conf",
      "response_time": 4.202075242996216,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 6,
      "false_negatives": 9,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 및 ECDSA 기반 알고리즘이 사용되고 있습니다. 구체적으로, API 인증에 사용되는 TokenSignature (RS256), JWTAlgorithm (RS512), AlternativeSignature (ES384)는 양자 컴퓨팅 공격에 취약합니다. 또한 TLS12_Cipher 설정에 CurveKE-PublicKey 조합이 사용되었는데, 이는 타원곡선 기반 키 교환과 RSA 기반 공개키 암호화를 함께 사용하는 것으로, 양자 내성이 없습니다. TLS11_Cipher 설정의 KeyExchange-PublicKey 조합 역시 양자 내성이 없습니다.",
        "detected_algorithms": [
          "RS256",
          "RS512",
          "ES384",
          "TLS_AES_256_GCM_SHA384",
          "CurveKE-PublicKey",
          "KeyExchange-PublicKey"
        ],
        "recommendations": "RSA 및 ECDSA 기반 알고리즘을 양자 내성 암호(PQC)로 대체해야 합니다. 예를 들어, RS256, RS512, ES384를 Dilithium, Falcon, CRYSTALS-Kyber와 같은 PQC 알고리즘으로 대체하고, TLS 설정에서 PQC cipher suite를 우선적으로 사용하도록 구성해야 합니다. 또한, 레거시 클라이언트 지원을 위해 TLS 1.2 및 1.1에 대한 지원을 중단하거나, PQC cipher suite를 지원하도록 업데이트해야 합니다.",
        "evidence": "[APIAuthentication] TokenSignature=RS256, JWTAlgorithm=RS512, AlternativeSignature=ES384, [TransportSecurity] TLS12_Cipher=CurveKE-PublicKey-BlockCipher256-GCM-SHA384, TLS11_Cipher=KeyExchange-PublicKey-BlockCipher256-Hash256",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "cryptocurrency_exchange",
      "file_name": "cryptocurrency_exchange.log",
      "response_time": 4.607995986938477,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 ECDSA, RSA, ECDHE-RSA와 같은 양자 컴퓨팅에 취약한 알고리즘이 사용되고 있습니다. 특히 TLS 1.2 연결에서 ECDHE-RSA-AES256-GCM-SHA384 cipher suite와 RSA-2048 인증서가 사용되는 것은 심각한 취약점입니다. 또한, Bitcoin/Ethereum 트랜잭션 서명에 사용되는 ECDSA-secp256k1 역시 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "ECDSA",
          "RSA",
          "ECDHE-RSA",
          "SHA-1",
          "SHA-256",
          "AES-256-CBC",
          "AES-256-GCM",
          "AES-128-CTR"
        ],
        "recommendations": "ECDSA, RSA, ECDHE-RSA를 양자 내성 암호(PQC)로 대체해야 합니다. TLS 설정에서 PQC cipher suite를 활성화하고, 인증서를 PQC 기반 인증서로 교체해야 합니다. 또한, SHA-1 사용을 중단하고 SHA-256 또는 SHA-3와 같은 더 강력한 해시 함수로 마이그레이션해야 합니다. AES 암호화도 PQC 대안으로 교체하는 것을 고려해야 합니다.",
        "evidence": "[00:00:04] INFO: ECDSA library loaded for Bitcoin/Ethereum signing\n[00:10:26] Transaction signing: ECDSA-secp256k1\n[00:10:46] Smart contract signing: ECDSA-secp256k1\n[00:15:32] Multi-signature requirement: 3-of-5 ECDSA\n[00:15:34] Backup encryption: RSA-4096 + AES-256\n[00:10:48] MetaMask connection: RSA-2048 key exchange\n[00:20:03] Cipher suite: ECDHE-RSA-AES256-GCM-SHA384\n[00:20:04] Certificate: RSA-2048, signed with SHA-256\n[00:05:15] 2FA verification: TOTP with SHA-1 HMAC",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "cryptocurrency_exchange",
      "file_name": "cryptocurrency_exchange.log",
      "response_time": 4.915179014205933,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA-2048 (Evidence: MetaMask connection: RSA-2048 key exchange, line 00:10:48)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA-secp256k1 (Evidence: INFO: secp256k1 curve loaded for cryptocurrency operations, line 00:00:06)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: 3DES (Evidence: PCI-DSS encryption: 3DES (legacy gateway), line 00:50:17)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS 1.2 (Evidence: TLS 1.2 handshake initiated, line 00:20:02)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "DETECTED: RSA-2048 (Evidence: Certificate: RSA-2048, signed with SHA-256, line 00:20:04)",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: SHA-1 (Evidence: WARN: SHA-1 in TOTP implementation (legacy), line 00:05:18)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: SHA-1 (Evidence: WARN: SHA-1 in TOTP implementation (legacy), line 00:05:18)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.95,
        "summary": "Identified RSA-2048, ECDSA-secp256k1, 3DES, TLS 1.2, and SHA-1 as potentially vulnerable algorithms based on the provided logs. SHA-1 is flagged as legacy."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "cryptographic_operations_detailed",
      "file_name": "cryptographic_operations_detailed.log",
      "response_time": 3.8904898166656494,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 RSA 2048비트 인증서 사용, 타원 곡선 암호화(ECDHE) 사용, 레거시 해시 함수 사용, 결정적 패딩 방식 사용이 확인되었습니다. RSA와 ECDHE는 양자 컴퓨팅 공격에 취약하며, 레거시 해시 함수는 충돌 공격에 취약할 수 있습니다. 결정적 패딩은 예측 가능성으로 인해 보안 강도를 약화시킬 수 있습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDHE",
          "Legacy Hash Function",
          "Deterministic Padding"
        ],
        "recommendations": "RSA 및 ECDHE를 양자 내성 암호(PQC)로 대체하고, SHA-256 또는 SHA-3와 같은 강력한 해시 함수를 사용하며, 확률적 패딩 방식을 사용하는 것이 좋습니다. 또한, 레거시 암호화 알고리즘 및 설정을 제거하여 공격 표면을 줄여야 합니다.",
        "evidence": "CertificateManager::LoadCertificateChain() - Processing X.509v3 certificate with 2048-bit modulus, TLSHandshake::NegotiateCipherSuite() - Client supports elliptic curve operations over prime fields, HashFunction::ComputeDigest() - Using legacy 160-bit digest, PaddingScheme::ApplyPadding() - Using deterministic padding format 0x00||0x02||PS||0x00||M for backward compatibility",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "database_encryption_setup",
      "file_name": "database_encryption_setup.log",
      "response_time": 4.814308166503906,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "데이터베이스 암호화 설정에서 양자 컴퓨팅에 취약한 것으로 알려진 K_CIPHER_1 (SEED) 및 K_CIPHER_2 (ARIA) 알고리즘이 사용되고 있습니다. 또한, BlockCipher-256 key wrap algorithm (RFC 3394) 또한 취약할 수 있습니다.",
        "detected_algorithms": [
          "K_CIPHER_1",
          "K_CIPHER_2",
          "BlockCipher-256"
        ],
        "recommendations": "K_CIPHER_1 및 K_CIPHER_2를 양자 내성 암호(PQC)로 대체하고, BlockCipher-256 key wrap algorithm 또한 PQC 기반의 키 래핑 알고리즘으로 교체하는 것을 고려해야 합니다. 데이터 암호화에 사용되는 모든 암호화 알고리즘을 검토하고, NIST에서 권장하는 PQC 알고리즘으로 마이그레이션하는 것을 권장합니다.",
        "evidence": "2025-01-18 14:00:00.134 [INFO] AlgorithmSelector::ChooseAlgorithm() - Selected encryption algorithm: K_CIPHER_1 (Korean national standard)\n2025-01-18 14:00:00.445 [DEBUG] TablespaceKey::Generate(users) - Creating K_CIPHER_1-128 key for 'users' tablespace\n2025-01-18 14:00:00.489 [DEBUG] TablespaceKey::Generate(transactions) - Creating K_CIPHER_1-128 key for 'transactions' tablespace\n2025-01-18 14:00:00.534 [DEBUG] TablespaceKey::Generate(audit) - Creating K_CIPHER_2-256 key for 'audit' tablespace\n2025-01-18 14:00:00.667 [DEBUG] KeyWrapping::Algorithm() - Using BlockCipher-256 key wrap algorithm (RFC 3394)",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "database_encryption_setup",
      "file_name": "database_encryption_setup.log",
      "response_time": 4.605189800262451,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 5,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "NOT DETECTED",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "NOT DETECTED",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: SEED (Evidence: SEEDEngine::Initialize() - K_CIPHER_1 cipher configuration)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Triple DES (Evidence: Supported algorithms: BLOCK_CIPHER, K_CIPHER_2, K_CIPHER_1, TripleCipher)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "DETECTED: SEED (Evidence: AlgorithmSelector::ChooseAlgorithm() - Selected encryption algorithm: K_CIPHER_1 (Korean national standard))",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: ECB mode (Evidence: SecurityCheck::ECB_Mode_Warning() - ECB mode in use for deterministic encryption, pattern analysis possible)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: SEED (Evidence: AlgorithmSelector::ChooseAlgorithm() - Selected encryption algorithm: K_CIPHER_1 (Korean national standard))",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: ECB mode (Evidence: SecurityCheck::ECB_Mode_Warning() - ECB mode in use for deterministic encryption, pattern analysis possible)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected use of SEED (K_CIPHER_1) and ARIA (K_CIPHER_2) Korean national standard algorithms. Also detected the use of Triple DES and ECB mode, which are considered weak and vulnerable respectively."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "email_server_crypto",
      "file_name": "email_server_crypto.conf",
      "response_time": 3.2772581577301025,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 0,
      "false_negatives": 7,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 2048 인증서가 사용되고 있으며, 이는 양자 컴퓨터 공격에 취약합니다. 또한, `smtpd_tls_cipher_list` 설정에서 `KeyExchange-PublicKey` 패턴이 사용되어 RSA 키 교환이 사용될 가능성이 있습니다.",
        "detected_algorithms": [
          "RSA"
        ],
        "recommendations": "RSA 인증서를 양자 내성 알고리즘(예: Dilithium, Kyber) 기반의 인증서로 교체하고, TLS 설정에서 양자 내성 암호화 스위트(예: TLS_AES_128_GCM_SHA256)를 우선적으로 사용하도록 설정해야 합니다. `smtpd_tls_cipher_list` 설정을 양자 내성 알고리즘을 우선하도록 변경해야 합니다.",
        "evidence": "smtpd_tls_cert_file = /etc/pki/tls/certs/mail-server-rsa2048.pem\nsmtpd_tls_cipher_list = CurveKE-PublicKey-BlockCipher256-GCM-SHA384:CurveKE-PublicKey-BlockCipher128-GCM-Hash256:KeyExchange-PublicKey-BlockCipher256-GCM-SHA384:KeyExchange-PublicKey-BlockCipher128-GCM-Hash256",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "enterprise_banking_pki_configuration",
      "file_name": "enterprise_banking_pki_configuration.conf",
      "response_time": 6.00702691078186,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 8,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 기반 암호화 알고리즘 (factorization_2048, factorization_1024), ECDSA (ecdsa_p256_sha256, ecdsa_p384_sha384), Diffie-Hellman (integer_factorization_dh_2048, modular_arithmetic_dh_1024), 타원 곡선 (prime256v1, secp256r1, secp384r1, nist_p384, brainpool_p256r1) 사용이 확인되었습니다. 이러한 알고리즘들은 양자 컴퓨터 공격에 취약합니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA",
          "Diffie-Hellman",
          "prime256v1",
          "secp256r1",
          "secp384r1",
          "nist_p384",
          "brainpool_p256r1",
          "factorization_2048",
          "factorization_1024"
        ],
        "recommendations": "양자 내성 암호 (PQC)로의 전환을 권장합니다. NIST에서 표준화된 알고리즘을 검토하고, 기존 시스템과의 호환성을 고려하여 점진적으로 PQC를 도입해야 합니다. RSA, ECDSA, DH 기반의 키 교환 및 서명 알고리즘을 PQC 알고리즘으로 대체하고, TLS, SSH, JWT 등 암호화 프로토콜 설정을 업데이트해야 합니다. 또한, PQC 알고리즘의 성능 및 보안성을 충분히 검증하고, 관련 라이브러리 및 도구를 최신 버전으로 유지해야 합니다.",
        "evidence": "ca_root_certificate \"/opt/security/pki/root_ca_factorization_2048.crt\", intermediate_ca \"/opt/security/pki/intermediate_elliptic_p384.crt\", primary_algorithms = [\"factorization_2048\", \"discrete_log_p256\", \"korean_domestic_aria\"], backup_algorithms = [\"factorization_1024\", \"discrete_log_legacy\"], allowed_curves = [\"prime256v1\", \"secp384r1\", \"secp521r1\"], key_exchange_methods { primary = \"elliptic_curve_diffie_hellman\", curves = [\"government_approved_p256\", \"nist_p384\", \"brainpool_p256r1\"], fallback = \"integer_factorization_dh_2048\", legacy_support = \"modular_arithmetic_dh_1024\" }, signature_algorithms = [\"pk_crypto_pss_sha256\", \"pk_crypto_pkcs1_sha256\", \"ecdsa_p256_sha256\", \"ecdsa_p384_sha384\", \"pk_crypto_pkcs1_sha1_legacy\"], ec_approved_curves = [\"secp256r1\", \"secp384r1\", \"prime256v1\"], dh_min_strength = 2048",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "financial_payment_gateway",
      "file_name": "financial_payment_gateway.conf",
      "response_time": 6.1478400230407715,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 8,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 사용되는 암호화 알고리즘들이 양자 컴퓨팅 공격에 취약합니다. 특히, RSA 기반의 cipher suite, 1024비트 RSA 키, SHA1withRSAEncryption, Triple DES (3DES), CBC 모드, PKCS5 padding, Hash128, PBKDF1 등이 취약점으로 지적됩니다. PCI DSS 2.0은 더 이상 안전하지 않은 표준입니다.",
        "detected_algorithms": [
          "TLS_RSA_WITH_AES_128_CBC_SHA",
          "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
          "RSA-1024",
          "SHA1withRSAEncryption",
          "Triple DES (3DES)",
          "CBC",
          "PKCS5",
          "Hash128",
          "PBKDF1"
        ],
        "recommendations": "다음과 같은 PQC 전환을 권장합니다:\n1. RSA 기반의 cipher suite를 양자 내성 암호(PQC) cipher suite로 교체합니다. (예: Kyber, Dilithium 기반 cipher suite)\n2. 1024비트 RSA 키를 더 강력한 키 (최소 2048비트 이상) 또는 PQC 키로 교체합니다.\n3. SHA1withRSAEncryption을 SHA256withRSAEncryption 또는 PQC 서명 알고리즘으로 교체합니다.\n4. Triple DES (3DES)를 AES-256-GCM 또는 ChaCha20-Poly1305와 같은 최신 암호화 알고리즘으로 교체합니다.\n5. CBC 모드를 GCM 또는 ChaCha20-Poly1305와 같은 인증된 암호화 모드로 교체합니다.\n6. PKCS5 padding을 보다 안전한 OAEP padding으로 교체합니다.\n7. Hash128을 SHA-256 또는 SHA-3와 같은 더 강력한 해시 알고리즘으로 교체합니다.\n8. PBKDF1을 PBKDF2, Argon2 또는 scrypt와 같은 더 안전한 키 유도 함수로 교체합니다.\n9. PCI DSS 버전을 최신 버전으로 업그레이드합니다.\n10. 수동 키 관리를 자동화된 키 관리 시스템으로 교체합니다.",
        "evidence": "cipher_suite = \"TLS_RSA_WITH_AES_128_CBC_SHA\"\nfallback_cipher = \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\"\nssl_protocol = \"TLSv1.0,TLSv1.1\"\ncert_key_size = 1024\ncert_signature = \"sha1WithRSAEncryption\"\ncard_encryption_mode = \"CBC\"\nencryption_algorithm = \"TripleCipher\"\npadding_scheme = \"PKCS5\"\nintegrity_hash = \"Hash128\"\ndb_cipher = \"LEGACY_CIPHER-EDE3\"\ndb_key_derivation = \"PBKDF1\"\napi_key_hash = \"Hash-160\"\npci_dss_version = \"2.0\"\nencryption_standard = \"Triple-LEGACY_CIPHER\"\n2024-01-15 09:23:47 WARN: Hash128 hash algorithm in use for integrity checks\n2024-01-15 09:24:12 INFO: TLS connection established with PublicKey-1024 certificate\n2024-01-15 09:24:13 DEBUG: Applied PKCS5 padding to encrypted data",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "financial_payment_gateway",
      "file_name": "financial_payment_gateway.conf",
      "response_time": 4.148724794387817,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 3,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: cert_signature = \"sha1WithRSAEncryption\")",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "NOT DETECTED",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: AES (Evidence: cipher_suite = \"TLS_RSA_WITH_AES_128_CBC_SHA\")",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLSv1.0 (Evidence: ssl_protocol = \"TLSv1.0,TLSv1.1\")",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: Triple DES (Evidence: fallback_cipher = \"TLS_RSA_WITH_3DES_EDE_CBC_SHA\")",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: Hash128 (Evidence: WARN: Hash128 hash algorithm in use for integrity checks)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected the use of RSA with SHA1, AES-128-CBC, Triple DES, TLSv1.0 and Hash128, all of which are considered vulnerable or deprecated. The configuration uses weak algorithms and protocols that need to be upgraded to quantum-resistant alternatives."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "government_document_system",
      "file_name": "government_document_system.log",
      "response_time": 3.9386229515075684,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 ECDHE, RSA, KCDSA와 같은 비양자내성 암호 알고리즘의 사용이 확인되었습니다. 특히, ECDHE는 양자 컴퓨터에 취약하며, RSA-2048은 레거시 호환성을 위해 활성화되어 있어 공격에 노출될 수 있습니다. KCDSA 또한 현재 양자 내성을 보장하지 않습니다.",
        "detected_algorithms": [
          "ECDHE",
          "RSA",
          "KCDSA",
          "HAS-160"
        ],
        "recommendations": "ECDHE, RSA, KCDSA를 양자내성암호(PQC)로 대체하고, 레거시 RSA-2048 사용을 중단해야 합니다. 또한, HAS-160 해시 알고리즘은 보안 강도가 낮으므로 SHA-256 이상의 안전한 해시 알고리즘으로 교체하는 것이 좋습니다. 한국형 암호 표준을 준수하면서도 양자 내성을 갖는 알고리즘으로 전환하는 것을 고려해야 합니다.",
        "evidence": "[ENCRYPTION] 2024-04-15 09:00:15 - Data Protection Setup\n[WARN] Legacy RSA-2048 enabled for backward compatibility\n[NETWORK] 2024-04-15 09:05:30 - Secure Communication\n[INFO] Key exchange: ECDHE with Korean standard curve\n[WARN] Fallback RSA cipher available for interoperability\n[INFO] Loading KCDSA certificates for document signing",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "healthcare_ehr_system",
      "file_name": "healthcare_ehr_system.yaml",
      "response_time": 3.6974070072174072,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 3,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 기반의 PublicKey 암호화, sha256WithRSAEncryption 서명 알고리즘, 그리고 ECDSA 기반의 CurveSig 암호화가 사용되고 있습니다. 또한, TLS 1.2 설정에서 KeyExchange-PublicKey, PublicKey-BlockCipher128-CBC-SHA 등의 취약한 cipher suite가 사용되고 있습니다.  legacy_ciphers 설정에 PublicKey-BlockCipher128-CBC-SHA가 명시적으로 사용되는 것도 확인되었습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA",
          "sha256WithRSAEncryption",
          "PublicKey",
          "KeyExchange-PublicKey"
        ],
        "recommendations": "RSA, ECDSA 기반의 암호화 알고리즘을 양자내성암호(PQC)로 대체하고, TLS 설정에서 안전하지 않은 cipher suite를 제거해야 합니다. 특히 legacy_ciphers 설정을 제거하고, 모든 암호화 통신에 PQC 알고리즘을 적용하는 것을 권장합니다. NIST 권고안에 따라 PQC 알고리즘으로 전환하고, TLS 1.3 이상으로 업그레이드하는 것을 고려해야 합니다.",
        "evidence": "security.certificates.signature_algorithm: sha256WithRSAEncryption, security.data_transmission.cipher_suites: KeyExchange-PublicKey-BlockCipher128-GCM-Hash256, security.legacy_ciphers: PublicKey-BlockCipher128-CBC-SHA, security.certificates.type: PublicKey, compliance.encryption_standards: PublicKey-2048 for key exchange, CurveSig for signatures",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "healthcare_ehr_system",
      "file_name": "healthcare_ehr_system.yaml",
      "response_time": 5.216836929321289,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 5,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: signature_algorithm: \"sha256WithRSAEncryption\", key_size: 2048)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: secp256r1 (Evidence: elliptic_curve: \"secp256r1\")",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DSA (Evidence: Legacy KeyExchange-DSA cipher negotiated with older client, log entry)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: BlockCipher-128 (Evidence: Multiple instances of BlockCipher-128 usage, e.g., algorithm: \"BlockCipher-128-CBC\", database_cipher: \"BlockCipher-128\", session_cipher: \"BlockCipher-128-GCM\", log_encryption: \"BlockCipher-128\")",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS 1.2 (Evidence: transport_encryption: \"TLS 1.2\")",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "DETECTED: RSA (Evidence: type: \"PublicKey\", key_size: 2048, signature_algorithm: \"sha256WithRSAEncryption\")",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "DETECTED: DSA (Evidence: message: \"Legacy KeyExchange-DSA cipher negotiated with older client\")",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: LEGACY_CIPHER (Evidence: deprecated_algorithms: [\"LEGACY_CIPHER\"])",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The analysis detected the use of RSA with 2048-bit keys and SHA256 signatures, the elliptic curve secp256r1, DSA in legacy configurations, BlockCipher-128 in various encryption contexts, TLS 1.2, and a deprecated cipher LEGACY_CIPHER. These algorithms are considered vulnerable in the context of post-quantum cryptography and should be migrated to quantum-resistant alternatives."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "industrial_control_system",
      "file_name": "industrial_control_system.log",
      "response_time": 6.042431116104126,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 ECDSA, RSA, DSA, Diffie-Hellman group 14, SHA-1과 같은 양자 컴퓨팅에 취약한 암호 알고리즘 및 프로토콜의 사용이 감지되었습니다. 또한, ECDHE 키 교환 방식도 사용되고 있어 양자 공격에 취약합니다. ARIA, SEED, HIGHT는 대칭키 알고리즘으로, 키 교환 및 디지털 서명에 사용되는 알고리즘과 함께 사용될 경우 전체 시스템의 보안 강도를 낮출 수 있습니다.",
        "detected_algorithms": [
          "ECDSA",
          "RSA",
          "DSA",
          "Diffie-Hellman group 14",
          "SHA-1",
          "ECDHE",
          "DHE"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 권장합니다. 구체적으로, ECDSA, RSA, DSA를 PQC 기반의 디지털 서명 알고리즘으로 대체하고, Diffie-Hellman을 PQC 기반의 키 교환 알고리즘으로 대체해야 합니다. SHA-1 사용을 중단하고 SHA-256 또는 SHA-3와 같은 안전한 해시 알고리즘으로 마이그레이션해야 합니다. ARIA, SEED, HIGHT와 같은 대칭키 알고리즘은 AES-256과 같은 최신 알고리즘으로 교체하는 것을 고려해야 합니다. TLS 설정에서 PQC cipher suite를 활성화하고, 레거시 암호화 알고리즘의 사용을 중단해야 합니다. 또한, 주기적인 보안 감사를 통해 시스템의 취약점을 지속적으로 평가하고 개선해야 합니다.",
        "evidence": "[2024-02-10 08:15:27] INFO: ECDSA certificates loaded for controller authentication\n[2024-02-10 08:15:28] DEBUG: Key exchange using Diffie-Hellman group 14\n[2024-02-10 08:15:29] INFO: Legacy support: DSA keys enabled for backward compatibility\n[2024-02-10 08:16:46] DEBUG: Negotiating cipher suite: ECDHE-ECDSA-AES128-GCM-SHA256\n[2024-02-10 08:16:47] WARN: Fallback to legacy cipher: DHE-DSA-AES128-SHA\n[2024-02-10 08:16:48] INFO: Connection established using ECDH key exchange\n[2024-02-10 08:18:13] DEBUG: Verifying ECDSA signature for operator certificate\n[2024-02-10 08:18:14] INFO: Certificate validation using SHA-1 hash\n[2024-02-10 08:22:19] DEBUG: RSA-2048 signature verification in progress\n[2024-02-10 08:22:20] INFO: DSA keys used for legacy firmware modules\n[2024-02-10 08:25:48] INFO: Generating new ECDSA key pair for controllers\n[2024-02-10 08:25:49] DEBUG: DH parameters: group 14, 2048-bit modulus",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "industrial_control_system",
      "file_name": "industrial_control_system.log",
      "response_time": 4.709721088409424,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: RSA-2048 signature verification in progress)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: ECDSA certificates loaded for controller authentication)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: Key exchange using Diffie-Hellman group 14)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: ARIA (Evidence: Initialized ARIA-128 cipher for SCADA communication)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: ECDHE-ECDSA-AES128-GCM-SHA256 (Evidence: Negotiating cipher suite: ECDHE-ECDSA-AES128-GCM-SHA256)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "DETECTED: DSA (Evidence: Retrying with legacy DSA verification)",
          "authentication_and_key_management_system_configurations": "DETECTED: ECDSA (Evidence: Generating new ECDSA key pair for controllers)",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: DSA (Evidence: Legacy support: DSA keys enabled for backward compatibility)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: SEED (Evidence: Using Korean standard SEED cipher (128-bit))",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: SHA-1 (Evidence: SHA-1 hash algorithm detected in legacy certificates)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.95,
        "summary": "The analysis detected the use of RSA, ECDSA, Diffie-Hellman, ARIA, SEED, DSA, and SHA-1 algorithms. The system uses ECDHE-ECDSA-AES128-GCM-SHA256 cipher suite. Legacy DSA and SHA-1 are still in use, indicating potential vulnerabilities to quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "iot_device_firmware_config",
      "file_name": "iot_device_firmware_config.yaml",
      "response_time": 3.9947152137756348,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 ECDSA 및 ECDHE와 관련된 취약한 알고리즘이 사용되고 있습니다. 구체적으로, 'secp256r1' 타원 곡선이 인증 및 키 교환에 사용되고 있으며, 이는 양자 컴퓨터 공격에 취약합니다. 또한, 펌웨어 업데이트 서명에 'ecdsa_p256' 알고리즘이 사용되고 있습니다. 'CurveKE' cipher suite는 타원 곡선 기반 키 교환을 사용하고 있을 가능성이 높습니다.",
        "detected_algorithms": [
          "ECDSA",
          "ECDHE",
          "secp256r1"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 권장합니다. ECDSA 및 ECDHE를 사용하는 모든 부분을 PQC 알고리즘으로 대체해야 합니다. NIST에서 권고하는 PQC 알고리즘을 검토하고, 해당 알고리즘을 펌웨어 및 통신 프로토콜에 통합하는 것을 고려하십시오. 또한, 기존 시스템과의 호환성을 유지하기 위해 하이브리드 접근 방식을 고려할 수 있습니다.",
        "evidence": "파일 내용:\n- key_type: \"prime_field_elliptic_curve\"\n- curve_name: \"secp256r1\"\n- algorithm: \"ecdsa_p256\"\n- curve: \"secp256r1\"\n- cipher_suites:\n          - \"CurveKE-CurveSig-BlockCipher128-GCM-Hash256\"\n          - \"CurveKE-CurveSig-BlockCipher256-GCM-SHA384\"\n          - \"CurveKE-PublicKey-BlockCipher128-GCM-Hash256\"",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "iot_device_firmware_config",
      "file_name": "iot_device_firmware_config.yaml",
      "response_time": 5.001054048538208,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "NOT DETECTED",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: secp256r1 (Evidence: curve_name: \"secp256r1\", line 11)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: symmetric_block_cipher (Evidence: algorithm: \"symmetric_block_cipher\", line 41)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "DETECTED: mbedTLS (Evidence: library: \"mbedTLS\", line 79)",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: ssl_v3 (Evidence: - \"ssl_v3\", line 68)\nDETECTED: tls_v1_0 (Evidence: - \"tls_v1_0\", line 69)\nDETECTED: tls_v1_1 (Evidence: - \"tls_v1_1\", line 70)\nDETECTED: cipher_block_chaining (Evidence: - \"cipher_block_chaining\", line 71)\nDETECTED: export_grade_ciphers (Evidence: - \"export_grade_ciphers\", line 72)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The configuration uses secp256r1, a prime field elliptic curve, which is vulnerable to quantum attacks. It also uses symmetric block ciphers, which may be vulnerable depending on the key size and specific algorithm. Legacy protocols SSLv3, TLS 1.0, TLS 1.1, CBC mode ciphers, and export grade ciphers are disabled, which is good. The cryptographic library is mbedTLS. "
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_banking_gateway",
      "file_name": "korean_banking_gateway.conf",
      "response_time": 4.111276865005493,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 4,
      "false_negatives": 6,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 ECDHE-RSA 및 DHE-RSA cipher suite가 사용되고 있으며, 이는 양자 컴퓨팅 공격에 취약합니다. 또한, SSLOpenSSLConfCmd Curves 설정에서 사용되는 secp256r1 및 secp384r1 타원 곡선은 양자 내성이 없습니다.",
        "detected_algorithms": [
          "ECDHE-RSA",
          "DHE-RSA",
          "secp256r1",
          "secp384r1"
        ],
        "recommendations": "ECDHE-RSA 및 DHE-RSA cipher suite를 양자 내성 암호화 알고리즘으로 대체하고, secp256r1 및 secp384r1 타원 곡선 대신 양자 내성 타원 곡선 또는 다른 양자 내성 키 교환 메커니즘을 사용하도록 설정 파일을 업데이트해야 합니다. 또한, TLS 1.2 및 1.3을 사용하는 것이 좋지만, cipher suite를 업데이트하지 않으면 여전히 취약합니다.",
        "evidence": "SSLCipherSuite ECDHE-RSA-BlockCipher128KR-GCM-SHA256:ECDHE-RSA-BlockCipher256KR-GCM-SHA384:ECDHE-ECDSA-BlockCipher128KR-GCM-SHA256:ECDHE-ECDSA-BlockCipher256KR-GCM-SHA384:DHE-RSA-BlockCipher128KR-SHA256:DHE-RSA-BlockCipher256KR-SHA384\nSSLOpenSSLConfCmd Curves secp256r1:brainpoolP256r1:secp384r1",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_blockchain_node",
      "file_name": "korean_blockchain_node.conf",
      "response_time": 4.988159894943237,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 7,
      "false_negatives": 7,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 ECDSA 및 RSA 기반의 cipher suite가 사용되고 있습니다. 또한, secp256k1, secp256r1 타원 곡선이 사용되고 있으며, RIPEMD160 해시 알고리즘도 사용되고 있습니다. 이러한 알고리즘들은 양자 컴퓨팅 공격에 취약할 수 있습니다. 특히 `TLS_ECDHE_RSA_WITH_FEISTEL_128_GCM_SHA256`는 RSA를 사용하고 있어 취약하며, `TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256`와 `TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_CIPHER_128_GCM_SHA256`는 ECDSA를 사용하고 있어 취약합니다. `message-digest-160`은 MD5 기반의 오래된 해시 알고리즘으로 충돌 공격에 취약할 수 있습니다.",
        "detected_algorithms": [
          "TLS_ECDHE_RSA",
          "ECDSA",
          "RSA",
          "secp256k1",
          "secp256r1",
          "RIPEMD160",
          "MD5"
        ],
        "recommendations": "양자 내성 암호(PQC) 알고리즘으로의 전환을 고려해야 합니다. 특히 TLS cipher suite, validator signature algorithm, address derivation, block hashing 알고리즘을 PQC 알고리즘으로 대체하는 것을 권장합니다. 또한, MD5 기반의 `message-digest-160`을 SHA-256 또는 SHA-3와 같은 더 안전한 해시 알고리즘으로 교체해야 합니다.",
        "evidence": "[cryptography] signature_curve = \"secp256k1\", [consensus] validator_curve = \"secp256r1\", rpc_cipher_suites = [\"TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256\", \"TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_CIPHER_128_GCM_SHA256\", \"TLS_ECDHE_RSA_WITH_FEISTEL_128_GCM_SHA256\"], address_derivation = \"RIPEMD160-SHA256\", state_root_hash = \"message-digest-160\"",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_blockchain_node",
      "file_name": "korean_blockchain_node.conf",
      "response_time": 4.531765937805176,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 5,
      "false_negatives": 7,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: rpc_cipher_suites includes TLS_ECDHE_RSA_WITH_FEISTEL_128_GCM_SHA256)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: rpc_cipher_suites includes TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256 and TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_CIPHER_128_GCM_SHA256)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS 1.2 (Evidence: rpc_tls_min_version = \"1.2\")",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "DETECTED: ECDH (Evidence: private_tx_group_key_management = \"ECDH\")",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: Korean Elliptic Curve Digital Signature (Evidence: signature_algorithm = \"korean-elliptic-curve-digital-signature\")",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.7,
        "summary": "The configuration uses RSA and ECDSA in TLS cipher suites, ECDH for key management, and a Korean Elliptic Curve Digital Signature algorithm. TLS 1.2 is the minimum version. The configuration also uses several custom or lightweight ciphers (ARX, Feistel, Lightweight Cipher) which may be vulnerable depending on their specific implementation."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_cloud_storage_service",
      "file_name": "korean_cloud_storage_service.yaml",
      "response_time": 4.0904860496521,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 8,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "TLS 설정에서 ECDHE_RSA cipher suite가 사용되고 있습니다. ECDHE 자체는 양자 내성이 있지만, RSA 키 교환은 양자 공격에 취약합니다. 또한, 'TLS_ECDHE_RSA_WITH_INVOLUTION_CIPHER_256_GCM_SHA384' 및 'TLS_ECDHE_RSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256' cipher suite도 사용되고 있어, RSA 키 교환이 사용될 가능성이 높습니다.",
        "detected_algorithms": [
          "TLS_ECDHE_RSA",
          "RSA"
        ],
        "recommendations": "RSA 기반의 키 교환을 사용하는 cipher suite를 제거하고, 양자 내성 암호(PQC) 알고리즘을 사용하는 cipher suite로 전환해야 합니다. 예를 들어, Kyber, Dilithium 등의 알고리즘을 사용하는 cipher suite를 추가하는 것을 고려할 수 있습니다. 또한, involution-based-block-cipher, feistel-cipher-128, substitution-permutation-network-256, arx-cipher-128, lightweight-cipher-64 등 자체 개발 암호 알고리즘의 안전성을 검증하고, 표준화된 PQC 알고리즘으로 대체하는 것을 고려해야 합니다.",
        "evidence": "cipher_suites 설정에서 'TLS_ECDHE_RSA_WITH_INVOLUTION_CIPHER_256_GCM_SHA384' 및 'TLS_ECDHE_RSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256' cipher suite가 발견되었습니다.",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_cloud_storage_service",
      "file_name": "korean_cloud_storage_service.yaml",
      "response_time": 5.329015016555786,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 5,
      "false_negatives": 8,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: cipher_suites includes TLS_ECDHE_RSA_WITH_INVOLUTION_CIPHER_256_GCM_SHA384 and TLS_ECDHE_RSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256, signature_algorithms includes rsa_pss_rsae_sha256)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: cipher_suites includes TLS_ECDHE_ECDSA_WITH_INVOLUTION_CIPHER_256_GCM_SHA384 and TLS_ECDHE_ECDSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256, signature_algorithms includes ecdsa_secp256r1_sha256 and ecdsa_secp384r1_sha384)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: involution-based-block-cipher (Evidence: default_algorithm: involution-based-block-cipher, data_keys algorithm: involution-cipher-256)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS (Evidence: enforce_tls: true, minimum_tls_version: \"1.2\", preferred_tls_version: \"1.3\", cipher_suites configuration)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: Korean algorithms (Evidence: tier_1 cipher suites are marked as Korean standards, signature_algorithms includes korean_discrete_log_signature_sha256 and korean_ec_signature_sha256)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA and ECDSA usage in TLS cipher suites and signature algorithms. Detected TLS configuration enforcing TLS 1.2 or 1.3. Detected custom involution-based block cipher. Detected Korean standard cipher suites and signature algorithms."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_crypto_library_config",
      "file_name": "korean_crypto_library_config.ini",
      "response_time": 3.89695405960083,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 8,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 KCDSA (Korean Certificate-based Digital Signature Algorithm)가 활성화되어 있습니다. KCDSA는 일반적으로 ECDSA 또는 RSA를 기반으로 하며, 이 설정 파일에서는 구체적인 기반 알고리즘이 명시되어 있지 않지만, 'domestic_ecc_signature'와 함께 사용되는 것으로 보아 ECDSA 기반일 가능성이 높습니다. ECDSA는 양자 컴퓨터 공격에 취약합니다. 또한, KCDSA 설정에서 사용되는 키 크기가 2048, 3072 비트인 MODP 그룹을 사용하고 있는데, 이는 양자 공격에 취약할 수 있습니다. HAS160 해시 함수 또한 취약성이 보고된 바 있습니다.",
        "detected_algorithms": [
          "KCDSA",
          "HAS160"
        ],
        "recommendations": "KCDSA를 양자 내성 암호(PQC)로 대체하거나, KCDSA를 사용하는 경우 PQC와 함께 사용하여 보안 강도를 높이는 것을 권장합니다. 또한, HAS160 해시 함수를 SHA-256 또는 SHA-3와 같은 더 안전한 해시 함수로 마이그레이션하는 것을 고려해야 합니다.",
        "evidence": "파일명: korean_crypto_library_config.ini, 내용: [PublicKeyCrypto] EnabledSchemes=domestic_signature_kcdsa,domestic_ecc_signature, [KCDSA_Configuration] Enabled=True, HashFunction=domestic_hash_has160, KeySizes=2048,3072",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_crypto_library_config",
      "file_name": "korean_crypto_library_config.ini",
      "response_time": 3.985417127609253,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 4,
      "false_negatives": 7,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "NOT DETECTED",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: Elliptic Curve (Evidence: [EC_KCDSA_Configuration] section, Curves=secp256r1,secp384r1,secp521r1)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: KCDSA (Evidence: [KCDSA_Configuration] section)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: SEED (Evidence: [SEED_Configuration] section)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "DETECTED: KISA Crypto API (Evidence: [General] section, LibraryName=KISA_Crypto_Module)",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: MD5 (Evidence: [LegacySupport] section, MD5_Support=Disabled)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: KCMVP (Evidence: [Compliance] section, KCMVP_Certificate=KCMVP-2024-189)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected Korean cryptographic algorithms SEED, ARIA, HIGHT, LEA, KCDSA, HAS-160, LSH, and Elliptic Curves. Also detected the use of KISA Crypto API and disabled MD5 support. KCMVP compliance is indicated."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_government_portal",
      "file_name": "korean_government_portal.yaml",
      "response_time": 3.586016893386841,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 7,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 키 알고리즘 사용이 확인되었습니다. RSA는 양자 컴퓨팅 공격에 취약합니다. 또한, 데이터 암호화에 사용된 일부 알고리즘(예: 128-bit-block-cipher-cbc, 128-bit-substitution-permutation-network, involution-based-block-cipher)의 구체적인 안전성 평가는 필요하며, SHA-256, MD-160과 같은 해시 함수도 양자 내성 관점에서 재검토가 필요합니다.",
        "detected_algorithms": [
          "RSA",
          "SHA-256",
          "MD-160"
        ],
        "recommendations": "RSA를 양자 내성 암호(PQC) 알고리즘으로 대체하고, 데이터 암호화 및 해싱에 사용되는 알고리즘을 PQC로 전환하는 것을 고려해야 합니다. NIST에서 권고하는 알고리즘을 검토하고 적용하는 것이 좋습니다. 또한, 키 크기를 늘리거나, 하이브리드 암호 시스템을 사용하는 것도 고려할 수 있습니다.",
        "evidence": "certificates.server.key_algorithm: \"RSA\"",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_government_portal",
      "file_name": "korean_government_portal.yaml",
      "response_time": 5.012941122055054,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 7,
      "false_negatives": 7,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: key_algorithm: \"RSA\", key_size: 2048, line 50)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: Elliptic Curve (Evidence: supported_curves configuration, lines 75-78)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DH (Evidence: dh_param_size: 2048, dh_param_file: \"/etc/ssl/dhparam.pem\", lines 81-82)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: 128-bit-block-cipher-cbc (Evidence: algorithm: \"128-bit-block-cipher-cbc\", line 11)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS_ECDHE_RSA_WITH_NATIONAL_BLOCK_CIPHER_128_GCM_SHA256 (Evidence: cipher_suites configuration, line 67)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: TLSv1.2 (Evidence: min_version: \"TLSv1.2\", line 65)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: korean-digital-signature-standard (Evidence: algorithm: \"korean-digital-signature-standard\", line 87)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA key configuration, Elliptic Curve configurations, DH parameter configuration, CBC mode cipher, TLS_ECDHE_RSA cipher suites, TLS 1.2 protocol, and Korean digital signature standard."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_healthcare_system",
      "file_name": "korean_healthcare_system.conf",
      "response_time": 3.642599105834961,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 8,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 cipher suite와 rsa_pss_rsae_sha256 signature algorithm이 사용되고 있습니다. TLS_ECDHE_RSA는 RSA를 사용하므로 양자 컴퓨터에 취약하며, rsa_pss_rsae_sha256 또한 RSA 기반이므로 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
          "rsa_pss_rsae_sha256"
        ],
        "recommendations": "RSA 기반의 암호화 알고리즘을 양자내성암호(PQC)로 대체해야 합니다. TLS 설정에서 RSA 기반의 cipher suite를 제거하고, PQC cipher suite를 추가해야 합니다. 또한, 인증서 서명 알고리즘을 PQC 알고리즘으로 변경해야 합니다.",
        "evidence": "cipher_suites = [ ... \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" ... ], signature_algorithms = [ ... \"rsa_pss_rsae_sha256\" ... ]",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_healthcare_system",
      "file_name": "korean_healthcare_system.conf",
      "response_time": 5.572693109512329,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 5,
      "false_negatives": 6,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: cipher_suites includes TLS_ECDHE_RSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256 and TLS_DHE_RSA_WITH_LIGHTWEIGHT_CIPHER_128_SHA256)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: signature_algorithms includes ecdsa_secp256r1_sha256, cipher_suites includes TLS_ECDHE_ECDSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256 and TLS_ECDHE_ECDSA_WITH_SUBSTITUTION_NETWORK_256_GCM_SHA384, attestation_algorithm is elliptic-curve-signature-scheme, attestation_curve is secp256r1)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DSA (Evidence: prescription_signature is true, signature_algorithm is korean-digital-signature-algorithm, key_type is discrete-logarithm)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: HAS-160 (Evidence: document_hash is message-digest-160)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Feistel (Evidence: database_encryption algorithm is feistel-block-cipher, cipher_suites includes TLS_ECDHE_ECDSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256 and TLS_ECDHE_RSA_WITH_FEISTEL_CIPHER_128_GCM_SHA256, data_encryption_keys patient_data algorithm is feistel-cipher-128)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS (Evidence: tls_min_version is 1.2, tls_max_version is 1.3, cipher_suites configuration)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: KCDSA (Evidence: prescription_signature is true, signature_algorithm is korean-digital-signature-algorithm)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA, ECDSA, DSA, HAS-160, Feistel, TLS, and KCDSA configurations. These algorithms are potentially vulnerable to quantum attacks and should be evaluated for migration to post-quantum alternatives."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_iot_device_system",
      "file_name": "korean_iot_device_system.log",
      "response_time": 4.608168363571167,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 2,
      "false_negatives": 4,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 RSA-PSS 및 ECDSA 서명 알고리즘이 지원되는 것으로 확인되었습니다. ECDSA는 양자 컴퓨팅 공격에 취약하며, RSA-PSS 또한 키 크기가 충분히 크지 않거나 적절한 매개변수 선택이 이루어지지 않은 경우 취약할 수 있습니다. 또한, TLS 모듈 초기화 과정에서 TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_64BIT_CIPHER_CBC_SHA256, TLS_PSK_WITH_LIGHTWEIGHT_64BIT_CIPHER_SHA256, TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256 cipher suite가 등록된 것을 확인했습니다. 이 중 TLS_ECDHE_ECDSA cipher suite는 ECDSA를 사용하므로 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "ECDSA",
          "RSA-PSS"
        ],
        "recommendations": "ECDSA 및 RSA-PSS를 사용하는 부분을 양자 내성 암호(PQC) 알고리즘으로 대체해야 합니다. 예를 들어, ECDSA 대신 Dilithium, RSA-PSS 대신 Falcon과 같은 알고리즘을 고려할 수 있습니다. 또한, TLS cipher suite를 PQC를 지원하는 것으로 변경해야 합니다. NIST에서 권고하는 PQC 알고리즘을 참고하여 시스템에 적합한 알고리즘을 선택하고 구현해야 합니다.",
        "evidence": "2024-12-20 08:15:23.918 [DEBUG] CertValidator: Signature algorithm support: RSA-PSS, ECDSA, discrete-log-signature\n2024-12-20 08:15:23.817 [INFO] TLS: Registered cipher suite TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_64BIT_CIPHER_CBC_SHA256\n2024-12-20 08:15:23.821 [INFO] TLS: Registered cipher suite TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_iot_device_system",
      "file_name": "korean_iot_device_system.log",
      "response_time": 6.654317617416382,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 4,
      "false_negatives": 3,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "NOT DETECTED",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: TLS: Registered cipher suite TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_64BIT_CIPHER_CBC_SHA256, TLS: Selected cipher suite TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_64BIT_CIPHER_CBC_SHA256, TLS: Using elliptic curve secp256r1 for key exchange, TLS: Certificate signature algorithm: ecdsa-with-SHA256)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: discrete-log-signature (Evidence: CertValidator: Signature algorithm support: RSA-PSS, ECDSA, discrete-log-signature)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: ARIA (Evidence: ARXCipher: Algorithm=add-rotate-xor-128, Rounds=24, KeySize=128, TLS: Registered cipher suite TLS_ECDHE_ECDSA_WITH_ARX_128_GCM_SHA256. Note: ARX is a family of algorithms, and this log entry indicates a 128-bit ARX cipher is being used, which could be related to ARIA)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: lightweight-64bit-cipher (Evidence: CryptoEngine: Loading 64-bit block cipher module, BlockCipher: Algorithm=lightweight-64bit-cipher, KeySize=128, Rounds=32, TLS: Registered cipher suite TLS_ECDHE_ECDSA_WITH_LIGHTWEIGHT_64BIT_CIPHER_CBC_SHA256, TLS: Registered cipher suite TLS_PSK_WITH_LIGHTWEIGHT_64BIT_CIPHER_SHA256, Decrypting with lightweight-64bit-cipher-cbc)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLSv1.2 (Evidence: TLS: Supported protocols: TLSv1.2, TLS handshake initiated with device sensor-node-0123, TLS: ClientHello received, version=TLSv1.2, Secure channel established: Protocol=TLSv1.2, Cipher=ECDHE-ECDSA-LIGHTWEIGHT64-CBC-SHA256)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The analysis detected the use of ECDSA, discrete-log-signature, ARIA (or an ARX cipher), a lightweight-64bit-cipher, and TLSv1.2. The lightweight-64bit-cipher is likely vulnerable to quantum attacks. ECDSA with secp256r1 is also vulnerable to quantum attacks. TLS 1.2 is not inherently vulnerable but the cipher suites used with it are."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_secure_email_gateway",
      "file_name": "korean_secure_email_gateway.log",
      "response_time": 4.302101135253906,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 8,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 RSA 및 ECDSA 알고리즘이 사용되고 있음을 확인했습니다. RSA는 TLS cipher suite (TLS_ECDHE_RSA_WITH_SUBSTITUTION_NETWORK_256_GCM_SHA384, TLS_DHE_RSA_WITH_FEISTEL_128_CBC_SHA256), OpenPGP public key algorithms, Digital signature verification (RSA-PSS), DKIM signing algorithm (rsa-sha256)에 사용되고 있습니다. ECDSA는 OpenPGP public key algorithms, Digital signature verification에 사용되고 있습니다. RSA와 ECDSA는 양자 컴퓨팅 공격에 취약합니다.",
        "detected_algorithms": [
          "TLS_ECDHE_RSA",
          "RSA",
          "ECDSA"
        ],
        "recommendations": "RSA 및 ECDSA를 사용하는 부분을 양자 내성 암호(PQC) 알고리즘으로 대체해야 합니다. TLS cipher suite, OpenPGP, Digital signature verification, DKIM 설정을 검토하고, PQC 알고리즘을 지원하도록 업데이트해야 합니다. 또한, 인증서 발급 체계도 PQC 기반으로 변경하는 것을 고려해야 합니다.",
        "evidence": "2024-12-20 10:00:02.012 [DEBUG] OpenPGP: Public key algorithms=[RSA, ECDSA, korean-discrete-log-signature]\n2024-12-20 10:00:02.234 [DEBUG] SignatureVerify: Supported algorithms=[RSA-PSS, ECDSA, korean-digital-signature, korean-ec-signature]\n2024-12-20 10:00:02.701 [DEBUG]   - TLS_ECDHE_RSA_WITH_SUBSTITUTION_NETWORK_256_GCM_SHA384\n2024-12-20 10:00:02.723 [DEBUG]   - TLS_DHE_RSA_WITH_FEISTEL_128_CBC_SHA256\n2024-12-20 10:00:03.112 [DEBUG] DKIM: Signing algorithm=rsa-sha256, key_size=2048",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_secure_email_gateway",
      "file_name": "korean_secure_email_gateway.log",
      "response_time": 5.096004962921143,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 5,
      "false_negatives": 7,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: OpenPGP: Public key algorithms=[RSA, ECDSA, korean-discrete-log-signature])",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: OpenPGP: Public key algorithms=[RSA, ECDSA, korean-discrete-log-signature])",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: korean-discrete-log-signature (Evidence: OpenPGP: Public key algorithms=[RSA, ECDSA, korean-discrete-log-signature])",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: feistel-cipher-128-cbc (Evidence: SMIME: Supported algorithms=[feistel-cipher-128-cbc, substitution-network-256-gcm, arx-128-gcm])",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS_ECDHE_ECDSA_WITH_FEISTEL_128_GCM_SHA256 (Evidence: TLS: Cipher suites registered: - TLS_ECDHE_ECDSA_WITH_FEISTEL_128_GCM_SHA256)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: TLSv1.2 (Evidence: TLS: Versions=[TLSv1.2, TLSv1.3])",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA, ECDSA, korean-discrete-log-signature, feistel-cipher-128-cbc, TLS_ECDHE_ECDSA_WITH_FEISTEL_128_GCM_SHA256, and TLSv1.2. These algorithms are either vulnerable to quantum attacks or are considered legacy protocols."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_smart_factory_scada",
      "file_name": "korean_smart_factory_scada.ini",
      "response_time": 4.143287181854248,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 3,
      "false_negatives": 8,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "TLS 설정에서 ECDHE-RSA 암호 스위트가 사용되고 있으며, 이는 양자 컴퓨팅 공격에 취약합니다. 또한, 로그 서명에 사용되는 korean-ec-signature는 구체적인 정보가 없어 안전성을 판단하기 어렵지만, secp256r1 곡선을 사용하는 것으로 보아 ECDSA 기반일 가능성이 높고, 이 또한 양자 공격에 취약합니다. CommandSignatureAlgorithm으로 사용되는 korean-discrete-log-signature 또한 안전성을 보장할 수 없습니다. 전반적으로, 설정 파일에 명시된 암호 알고리즘들이 양자 내성을 갖추지 못했을 가능성이 높습니다.",
        "detected_algorithms": [
          "ECDHE-RSA",
          "ECDSA (추정)",
          "RSA (추정)"
        ],
        "recommendations": "ECDHE-RSA 암호 스위트를 양자 내성 암호 스위트로 교체하고, korean-ec-signature 및 korean-discrete-log-signature를 양자 내성 서명 알고리즘으로 대체해야 합니다. TLS 설정에서 양자 내성 암호 스위트를 우선적으로 사용하도록 설정하고, 기존 암호 스위트는 점진적으로 제거하는 것을 권장합니다. 또한, 사용되는 경량 암호들의 안전성을 검증하고, 필요한 경우 양자 내성 암호로 대체해야 합니다.",
        "evidence": "[TLS_Configuration] 섹션의 TLSCipherSuites 설정: ECDHE-RSA-ARX-128-GCM-SHA256, [SignatureAlgorithms] 섹션의 LogSignatureAlgorithm 설정: korean-ec-signature, LogSignatureCurve 설정: secp256r1, CommandSignatureAlgorithm 설정: korean-discrete-log-signature",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "korean_vpn_server",
      "file_name": "korean_vpn_server.log",
      "response_time": 6.104849338531494,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 4,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 ECDHE-RSA, ECDHE-ECDSA, DHE-RSA cipher suite와 RSA 인증서 사용이 확인되었습니다. ECDHE와 RSA는 양자 컴퓨팅 공격에 취약합니다. 특히, 'CipherSuite: ECDHE-RSA-FEISTEL-128-GCM-SHA256 registered', 'CipherSuite: ECDHE-ECDSA-FEISTEL-128-GCM-SHA256 registered', 'CipherSuite: ECDHE-RSA-SPN-256-GCM-SHA384 registered', 'CipherSuite: ECDHE-ECDSA-SPN-256-GCM-SHA384 registered', 'CipherSuite: DHE-RSA-FEISTEL-128-SHA256 registered' 라인에서 취약한 cipher suite가 사용되고 있음을 알 수 있습니다. 또한, 'Certificate: Public key algorithm=RSA, key_size=2048' 및 'Certificate: Signature algorithm=sha256WithRSAEncryption' 라인에서 RSA 기반 인증서가 사용되고 있음을 확인할 수 있습니다.",
        "detected_algorithms": [
          "ECDHE-RSA",
          "ECDHE-ECDSA",
          "DHE-RSA",
          "RSA"
        ],
        "recommendations": "양자 내성 암호(PQC) 알고리즘으로의 전환을 권장합니다. 기존 암호화 방식과 함께 PQC 알고리즘을 혼용하여 사용하는 하이브리드 방식을 고려하고, 장기적으로 PQC 알고리즘으로 완전히 대체하는 것을 목표로 해야 합니다. TLS 설정에서 PQC cipher suite를 활성화하고, RSA 인증서를 PQC 인증서로 교체하는 것을 고려해야 합니다.",
        "evidence": "2024-12-20 09:00:00.489 [DEBUG] CipherSuite: ECDHE-ECDSA-FEISTEL-128-GCM-SHA256 registered\n2024-12-20 09:00:00.501 [DEBUG] CipherSuite: ECDHE-RSA-FEISTEL-128-GCM-SHA256 registered\n2024-12-20 09:00:00.512 [DEBUG] CipherSuite: ECDHE-ECDSA-SPN-256-GCM-SHA384 registered\n2024-12-20 09:00:00.523 [DEBUG] CipherSuite: ECDHE-RSA-SPN-256-GCM-SHA384 registered\n2024-12-20 09:00:00.534 [DEBUG] CipherSuite: DHE-RSA-FEISTEL-128-SHA256 registered\n2024-12-20 09:00:00.645 [DEBUG] Certificate: Public key algorithm=RSA, key_size=2048\n2024-12-20 09:00:00.656 [DEBUG] Certificate: Signature algorithm=sha256WithRSAEncryption",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "korean_vpn_server",
      "file_name": "korean_vpn_server.log",
      "response_time": 5.778429985046387,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 5,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: Certificate: Public key algorithm=RSA, key_size=2048)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDHE (Evidence: CipherSuite: ECDHE-ECDSA-FEISTEL-128-GCM-SHA256 registered, CipherSuite: ECDHE-RSA-FEISTEL-128-GCM-SHA256 registered, CipherSuite: ECDHE-ECDSA-SPN-256-GCM-SHA384 registered, CipherSuite: ECDHE-RSA-SPN-256-GCM-SHA384 registered, TLS: Using elliptic curve secp256r1 for key exchange)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DH (Evidence: CipherSuite: DHE-RSA-FEISTEL-128-SHA256 registered)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: KCDSA (Evidence: SignatureAlgorithm: korean-discrete-log-signature-sha256 enabled, SignatureAlgorithm: korean-ec-signature-sha256 enabled)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Feistel (Evidence: Control plane cipher: feistel-network-128bit loaded, Data plane cipher: substitution-permutation-network-128bit loaded, CipherSuite: ECDHE-ECDSA-FEISTEL-128-GCM-SHA256 registered, CipherSuite: ECDHE-RSA-FEISTEL-128-GCM-SHA256 registered, CipherSuite: DHE-RSA-FEISTEL-128-SHA256 registered, Control channel encryption: feistel-128-cbc-sha256)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLSv1.2 (Evidence: TLS: Supported versions [TLSv1.2, TLSv1.3], TLS: ClientHello received, version=TLSv1.2)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA 2048, ECDHE with secp256r1, DHE, Feistel ciphers, KCDSA, and TLSv1.2 which are potentially vulnerable to quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "military_secure_comms",
      "file_name": "military_secure_comms.conf",
      "response_time": 4.017203092575073,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 7,
      "false_negatives": 12,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA, ECDSA, DH 기반의 키 교환 및 디지털 서명 알고리즘이 사용되고 있습니다. 구체적으로, `EC-K_SIG-384`, `PublicKey-4096`, `CurveSig-P384`, `CurveKE-P384`, `KeyExchange-3072`, `PublicKey-2048` 등이 양자 컴퓨터 공격에 취약합니다. 또한, `PBKDF2-Hash256`은 해시 함수가 SHA256 기반이므로, 양자 공격에 간접적으로 영향을 받을 수 있습니다.",
        "detected_algorithms": [
          "EC-K_SIG-384",
          "PublicKey-4096",
          "CurveSig-P384",
          "CurveKE-P384",
          "KeyExchange-3072",
          "PublicKey-2048",
          "PBKDF2-Hash256"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 권장합니다. NIST PQC 표준을 준수하는 알고리즘으로 대체하고, 키 크기를 늘리거나, 하이브리드 접근 방식을 고려해야 합니다. 특히, 키 교환, 디지털 서명, 키 유도 함수에 대한 PQC 알고리즘 도입이 시급합니다. 기존 시스템과의 호환성을 고려하여 점진적인 전환 전략을 수립해야 합니다.",
        "evidence": "military_secure_comms.conf 파일에서 `EC-K_SIG-384`, `PublicKey-4096`, `CurveSig-P384`, `CurveKE-P384`, `KeyExchange-3072`, `PublicKey-2048`, `PBKDF2-Hash256` 알고리즘 사용이 확인되었습니다.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "military_secure_comms",
      "file_name": "military_secure_comms.conf",
      "response_time": 6.014439105987549,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 4,
      "false_negatives": 9,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: PublicKey-4096 used for DeviceAuthentication, EmergencyKeyProtocol, OrdersSignature, Emergency_Path)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECC (Evidence: EC-K_SIG-384 used for C2Authentication, EC-K_SIG-521 used for CommandSignature, IntelligenceSignature, LaunchAuthentication, CurveSig-P384 used for NetworkAuthentication, CurveSig-P521 used for IntelligenceSignature, EC-K_SIG-256 used for DroneAuth)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: LSH (Evidence: HMAC-LSH-512 used for C2Integrity, HMAC-LSH-256 used for MessageMAC, LSH-512 used for DocumentHash)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Triple DES (Evidence: TripleCipher-EDE3 used for LegacyInterop, LEGACY_CIPHER-EDE3 used for Vietnam_Era_Compat)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: Triple DES (Evidence: TripleCipher-EDE3 used for LegacyInterop, LEGACY_CIPHER-EDE3 used for Vietnam_Era_Compat), Blowfish (Evidence: Blowfish-128 used for Gulf_War_Compat), Hash128 (Evidence: Hash128-Authentication used for Pre2010_Systems)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: K_CIPHER (Evidence: K_CIPHER_2-256-GCM, K_CIPHER_1-256-CTR, K_CIPHER_4-256-CBC, K_CIPHER_1-128-ECB, K_CIPHER_1-256-CBC, K_CIPHER_2-256-CBC, K_CIPHER_2-128-GCM, K_CIPHER_1-256-GCM, K_CIPHER_2-256-GCM-SHA384, K_CIPHER_1-256, K_CIPHER_4-256, K_SIG, EC-K_SIG)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: Legacy equipment detected (Evidence: 2024-07-01 04:50:15 [WARN] Legacy equipment detected in)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA, ECC, LSH, Triple DES, Blowfish, Hash128, and K_CIPHER usage. Identified legacy equipment warnings. Triple DES, Blowfish, and Hash128 are considered legacy and vulnerable."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "mobile_app_security_audit",
      "file_name": "mobile_app_security_audit.log",
      "response_time": 3.7256197929382324,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 RSA 기반의 암호 스위트(TLS_RSA_WITH_AES_128_CBC_SHA) 사용과 2048비트 RSA 키 사용이 확인되었습니다. RSA는 양자 컴퓨터 공격에 취약하며, 2048비트 키는 장기적인 보안에 충분하지 않습니다. 또한, StreamCipher-SHA 암호 스위트 활성화는 알려진 암호학적 취약점을 가지고 있습니다.",
        "detected_algorithms": [
          "RSA",
          "TLS_RSA_WITH_AES_128_CBC_SHA",
          "StreamCipher-SHA"
        ],
        "recommendations": "RSA 기반 암호 스위트 및 2048비트 RSA 키 사용을 중단하고, 양자 내성 암호(PQC)로 전환해야 합니다. TLS 설정에서 PQC 암호 스위트를 활성화하고, 인증서를 PQC 알고리즘 기반으로 교체해야 합니다. 또한, StreamCipher-SHA 암호 스위트는 사용하지 않도록 설정해야 합니다.",
        "evidence": "2025-01-20 10:30:15.334 [TRACE] X509::ParsePublicKey() - Certificate uses 2048-bit modular arithmetic public key\n2025-01-20 10:30:15.567 [WARNING] CipherAnalysis::EvaluateSuite() - TLS_RSA_WITH_AES_128_CBC_SHA: No forward secrecy, CBC mode vulnerable\n2025-01-20 10:30:15.601 [ERROR] SecurityIssue::LogFinding() - CRITICAL: StreamCipher-SHA cipher suite enabled - known cryptographic weaknesses",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "mobile_app_security_audit",
      "file_name": "mobile_app_security_audit.log",
      "response_time": 4.876639127731323,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 4,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: X509::ParsePublicKey() - Certificate uses 2048-bit modular arithmetic public key)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECC (Evidence: Key ID: user_auth_key, Algorithm: EC_CRYPTO P-256)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS_RSA_WITH_AES_128_CBC_SHA (Evidence: CipherAnalysis::EvaluateSuite() - TLS_RSA_WITH_AES_128_CBC_SHA: No forward secrecy, CBC mode vulnerable)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "DETECTED: RSA (Evidence: JWT algorithm: RS256 (PublicKey + Hash-256))",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: TLS 1.2 (Evidence: HTTPSClient::GetTLSVersion() - Using TLS 1.2 for all API communication)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: RSA (Evidence: SecurityAnalyzer::AssessKeySize() - Certificate key size below recommended 3072 bits for long-term use)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA key sizes below recommended strength, use of TLS_RSA_WITH_AES_128_CBC_SHA cipher suite, TLS 1.2 usage, and ECC P-256."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "nginx_mixed_security_gateway",
      "file_name": "nginx_mixed_security_gateway.conf",
      "response_time": 5.530524969100952,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 3,
      "false_negatives": 3,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "nginx 설정 파일에서 RSA 인증서 및 키, 그리고 ECDHE 키 교환을 사용하는 cipher suite가 발견되었습니다. RSA는 양자 컴퓨터에 취약하며, ECDHE는 타원곡선 Diffie-Hellman을 사용하므로 양자 공격에 취약합니다. 또한, TLS 1.1 및 TLS 1.2 프로토콜을 사용하는 설정도 발견되었는데, 이는 더 이상 안전하지 않은 프로토콜입니다.",
        "detected_algorithms": [
          "RSA",
          "ECDHE",
          "TLSv1.1",
          "TLSv1.2"
        ],
        "recommendations": "RSA 인증서를 양자 내성 알고리즘 기반 인증서로 교체하고, ECDHE 키 교환을 양자 내성 키 교환 알고리즘으로 대체해야 합니다. TLS 1.3 이상을 사용하고, 안전하지 않은 TLS 버전을 비활성화해야 합니다. 또한, cipher suite 설정을 검토하여 양자 내성 알고리즘을 우선적으로 사용하도록 구성해야 합니다.",
        "evidence": "ssl_certificate /etc/nginx/ssl/gateway_rsa_2048.crt; ssl_certificate_key /etc/nginx/ssl/gateway_rsa_2048.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers CurveKE-CurveSig-BlockCipher256-GCM-SHA384:CurveKE-PublicKey-BlockCipher256-GCM-SHA384:CurveKE-CurveSig-CHACHA20-POLY1305:CurveKE-PublicKey-CHACHA20-POLY1305:CurveKE-CurveSig-BlockCipher128-GCM-Hash256:CurveKE-PublicKey-BlockCipher128-GCM-Hash256:CurveKE-CurveSig-BlockCipher256-SHA384:CurveKE-PublicKey-BlockCipher256-SHA384:CurveKE-CurveSig-BlockCipher128-Hash256:CurveKE-PublicKey-BlockCipher128-Hash256:KeyExchange-PublicKey-BlockCipher256-GCM-SHA384:KeyExchange-PublicKey-BlockCipher128-GCM-Hash256:BlockCipher256-GCM-SHA384:BlockCipher128-GCM-SHA256; ssl_ecdh_curve secp384r1:secp256r1:prime256v1; location /legacy { ssl_protocols TLSv1 TLSv1.1 TLSv1.2; }",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "openssh",
      "file_name": "openssh.log",
      "response_time": 3.3805010318756104,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "OpenSSH 서버 설정에서 RSA, ECDSA 키가 사용되고 있습니다. ssh_host_rsa_key, ssh_host_ecdsa_key 파일이 존재하며, 이는 양자 컴퓨터 공격에 취약한 RSA 및 ECDSA 알고리즘을 사용하고 있음을 나타냅니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA"
        ],
        "recommendations": "OpenSSH 서버 설정을 업데이트하여 양자 내성 암호 알고리즘(예: Ed25519, X25519)을 사용하도록 구성하고, RSA 및 ECDSA 키 사용을 중단해야 합니다. HostKeyAlgorithms 설정을 확인하고, 필요한 경우 업데이트하십시오.",
        "evidence": "ssh_host_rsa_key, ssh_host_ecdsa_key 파일 존재",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "openssh",
      "file_name": "openssh.log",
      "response_time": 5.015490770339966,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: ssh_host_rsa_key, ssh_host_rsa_key.pub files, debug1: private host key #0: ssh-rsa SHA256:ex0t/cqY4gRUqts/tslynM76eM3FWGce4tMZp659I1Q)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: ssh_host_ecdsa_key, ssh_host_ecdsa_key.pub files, debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:tBwclE61tJsWikJeMj5+p+y8Yni6ncq49KkGqwmupUg)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DSA (Evidence: ssh_host_dsa_key, ssh_host_dsa_key.pub files, debug1: private host key #1: ssh-dss SHA256:NyA+nn6y+zEmShaSGos0Dk+P+cXkmA+Sa0h/TgPeUlQ)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: DSA (Evidence: debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The analysis detected the use of RSA, ECDSA, and DSA algorithms in the OpenSSH configuration. DSA is flagged as not permitted, indicating a move away from this legacy algorithm. The presence of RSA and ECDSA keys suggests potential vulnerabilities to quantum attacks, requiring further investigation and possible migration to quantum-resistant alternatives."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "quantum_safe_migration_plan",
      "file_name": "quantum_safe_migration_plan.yaml",
      "response_time": 4.498881101608276,
      "json_valid": true,
      "true_positives": 4,
      "false_positives": 0,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "quantum_safe_migration_plan.yaml 파일 분석 결과, RSA (pk_crypto_2048, pk_crypto_4096), ECDSA (ecdsa_p256), ECDH (ecdh_curve25519), DSA (dsa_2048) 알고리즘이 사용되고 있으며, 모두 양자 공격에 취약한 것으로 명시되어 있습니다. 특히 ssl_tls_certificates, code_signing, api_authentication, key_exchange, legacy_systems에서 사용되고 있어 심각도가 높습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA",
          "ECDH",
          "DSA"
        ],
        "recommendations": "quantum_safe_migration_plan.yaml 파일에 명시된 'Operation Quantum Shield' 프로젝트를 가속화하고, 각 알고리즘별 migration_priority에 따라 PQC 알고리즘으로의 전환을 우선적으로 진행해야 합니다. 특히 'critical'로 분류된 ssl_tls_certificates, api_authentication, key_exchange에 대한 전환을 최우선으로 고려해야 합니다. 또한, symmetric cryptography 및 hash functions에 대해서도 명시된 post_quantum_action에 따라 업그레이드 또는 모니터링 계획을 수립해야 합니다.",
        "evidence": "quantum_safe_migration_plan.yaml 파일 내용:\n- algorithm: \"pk_crypto_2048\"\n  usage: \"ssl_tls_certificates\"\n  quantum_vulnerable: true\n- algorithm: \"pk_crypto_4096\"\n  usage: \"code_signing\"\n  quantum_vulnerable: true\n- algorithm: \"ecdsa_p256\"\n  usage: \"api_authentication\"\n  quantum_vulnerable: true\n- algorithm: \"ecdh_curve25519\"\n  usage: \"key_exchange\"\n  quantum_vulnerable: true\n- algorithm: \"dsa_2048\"\n  usage: \"legacy_systems\"\n  quantum_vulnerable: true",
        "confidence_score": 1.0,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "quantum_safe_migration_plan",
      "file_name": "quantum_safe_migration_plan.yaml",
      "response_time": 4.202424049377441,
      "json_valid": true,
      "true_positives": 4,
      "false_positives": 3,
      "false_negatives": 2,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: algorithm: \"pk_crypto_2048\", algorithm: \"pk_crypto_4096\")",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: algorithm: \"ecdsa_p256\")\nDETECTED: ECDH (Evidence: algorithm: \"ecdh_curve25519\")",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DSA (Evidence: algorithm: \"dsa_2048\")",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: ECDHE (Evidence: classical: \"ecdhe_p256\")",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "DETECTED: liboqs (Evidence: implementation: \"liboqs\")",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "DETECTED: RSA (Evidence: certificates: classical: \"pk_crypto_3072\")",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: DSA (Evidence: algorithm: \"dsa_2048\", usage: \"legacy_systems\")",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "Detected RSA, ECDSA, ECDH, DSA, ECDHE, and the use of liboqs. These algorithms are flagged as quantum vulnerable and are part of the migration plan."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "satellite_ground_station",
      "file_name": "satellite_ground_station.log",
      "response_time": 4.509768009185791,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 KCDSA, EC-KCDSA와 같은 비양자내성 암호 알고리즘의 사용이 확인되었습니다. 특히 KCDSA는 디지털 서명에 사용되며, EC-KCDSA는 서명 검증 및 안테나 제어 명령 서명에 사용됩니다. 또한 TLS 1.3 연결에서 사용되는 cipher suite 정보가 없어 RSA 또는 ECDSA 기반의 키 교환 알고리즘이 사용될 가능성이 있습니다.",
        "detected_algorithms": [
          "KCDSA",
          "EC-KCDSA",
          "RSA (추정)",
          "ECDSA (추정)"
        ],
        "recommendations": "KCDSA 및 EC-KCDSA를 양자 내성 암호 알고리즘으로 대체하고, TLS 연결에 사용되는 cipher suite를 확인하여 필요한 경우 양자 내성 cipher suite로 전환해야 합니다. 또한, ARIA, SEED, LEA, HAS, LSH, HIGHT와 같은 알고리즘의 양자 내성 수준을 평가하고 필요한 경우 대체 방안을 고려해야 합니다.",
        "evidence": "[00:00:10] KCDSA certificates loaded for ground station authentication\n[00:05:03] Command authentication: KCDSA-3072 digital signature\n[00:10:04] Signature validation: EC-KCDSA-384\n[00:15:04] Antenna pointing commands: EC-KCDSA signed\n[00:15:05] Emergency override: Dual-KCDSA-521 authentication\n[00:20:02] TLS 1.3 connection to NASA DSN (Deep Space Network)",
        "confidence_score": 0.8,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "security_scanner_findings",
      "file_name": "security_scanner_findings.log",
      "response_time": 3.5866849422454834,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 2,
      "false_negatives": 14,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "취약한 SSL/TLS 구성(StreamCipher 사용), 1024비트 공개키 인증서 사용, Hash128 해시 함수 사용이 발견되었습니다. 1024비트 공개키는 Shor 알고리즘에 의해 효율적으로 깨질 수 있습니다.",
        "detected_algorithms": [
          "StreamCipher",
          "RSA-1024",
          "Hash128"
        ],
        "recommendations": "StreamCipher를 즉시 비활성화하고 AEAD 암호만 사용하십시오. 1024비트 공개키를 3072비트 공개키로 업그레이드하거나 EC_CRYPTO P-384로 마이그레이션하십시오. Hash128을 더 강력한 해시 함수(예: SHA-256, SHA-384, SHA-512)로 교체하십시오. PQC 알고리즘으로의 전환을 고려하십시오.",
        "evidence": "[2025-01-22 16:45:05] [CRITICAL] Details: Server accepts StreamCipher-SHA cipher suite\n[2025-01-22 16:45:08] [HIGH] Details: Certificate /etc/ssl/api-cert.pem uses 1024-bit PublicKey key\n[2025-01-22 16:45:12] [HIGH] Details: Application uses Hash128 for password hashing",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "security_scanner_findings",
      "file_name": "security_scanner_findings.log",
      "response_time": 4.70637321472168,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 2,
      "false_negatives": 12,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: PublicKey 1024-bit Certificate Detected, Certificate /etc/ssl/api-cert.pem uses 1024-bit PublicKey key)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: Elliptic Curve (Evidence: Elliptic Curve P-192 Detected, CurveSig signatures using secp192r1 curve)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: Diffie-Hellman Group 14 (2048-bit), IKEv2 uses 2048-bit MODP group)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Triple DES (Evidence: TripleCipher Encryption Detected, Database uses TripleCipher-CBC for column encryption)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: Stream Cipher (Evidence: Server accepts StreamCipher-SHA cipher suite)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 1.0,
        "summary": "Detected RSA with 1024-bit key, Elliptic Curve P-192, Diffie-Hellman Group 14 (2048-bit), Triple DES, Stream Cipher, and Hash-160. These algorithms are vulnerable to various attacks, including quantum attacks."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "smart_city_infrastructure",
      "file_name": "smart_city_infrastructure.log",
      "response_time": 5.430932998657227,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 0,
      "false_negatives": 0,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 RSA, ECDSA, DHE, SHA-1, 3DES, Blowfish 등 양자 컴퓨팅 공격에 취약한 암호 알고리즘의 사용이 확인되었습니다. 특히 RSA-2048, ECDSA-P256, RSA-3072는 인증 및 키 교환에 사용되어 시스템 보안에 심각한 위협을 가할 수 있습니다. 또한, SHA-1, 3DES, Blowfish는 취약점으로 인해 사용이 권장되지 않습니다.",
        "detected_algorithms": [
          "RSA-2048",
          "ECDSA-P256",
          "RSA-3072",
          "DHE-2048",
          "SHA-1",
          "3DES",
          "Blowfish"
        ],
        "recommendations": "RSA, ECDSA, DHE, SHA-1, 3DES, Blowfish를 양자 내성 암호(PQC)로 대체해야 합니다. NIST에서 권장하는 알고리즘(예: CRYSTALS-Kyber, CRYSTALS-Dilithium, Falcon, SPHINCS+)으로의 전환을 고려하고, 기존 시스템과의 호환성을 유지하면서 점진적으로 PQC를 도입하는 전략을 수립해야 합니다. 또한, SHA-1, 3DES, Blowfish는 사용 중단하고 더 안전한 알고리즘으로 대체해야 합니다.",
        "evidence": "[2024-06-10 06:00:18] Traffic light controller auth: ECDSA-P256\n[2024-06-10 06:00:19] Central server connection: RSA-2048 key exchange\n[2024-06-10 06:15:22] Grid control: DHE-2048 key exchange\n[2024-06-10 06:15:23] Billing data: AES-128-CBC + HMAC-SHA1\n[2024-06-10 06:15:24] WARN: Legacy SHA-1 in use for billing compatibility\n[2024-06-10 06:20:47] Camera authentication: RSA-3072\n[2024-06-10 06:20:48] Facial recognition data: Blowfish-256\n[2024-06-10 06:20:49] Archive encryption: 3DES (legacy compatibility)\n[2024-06-10 06:20:50] ERROR: 3DES and Blowfish marked as deprecated",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "ssh_server_hardened",
      "file_name": "ssh_server_hardened.conf",
      "response_time": 4.681597948074341,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 3,
      "false_negatives": 6,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "SSH 서버 설정 파일에서 RSA, ECDSA 키 알고리즘이 사용되고 있습니다. HostKeyAlgorithms 설정에서 curve_sig-sha2-nistp521, curve_sig-sha2-nistp384, curve_sig-sha2-nistp256이 사용되고 있으며, HostKey 설정에서 ssh_host_rsa_key, ssh_host_ecdsa_key가 사용되고 있습니다. 이러한 알고리즘들은 양자 컴퓨팅 공격에 취약할 수 있습니다.",
        "detected_algorithms": [
          "RSA",
          "ECDSA",
          "curve_sig-sha2-nistp521",
          "curve_sig-sha2-nistp384",
          "curve_sig-sha2-nistp256"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 고려해야 합니다. OpenSSH에서 지원하는 Kyber768, Dilithium 등의 PQC 알고리즘을 도입하고, 기존 RSA, ECDSA 키를 점진적으로 교체하는 것을 권장합니다. HostKeyAlgorithms 설정에서 PQC 알고리즘을 우선순위로 설정하고, 클라이언트와의 호환성을 고려하여 기존 알고리즘을 함께 유지하는 방안을 고려할 수 있습니다.",
        "evidence": "HostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_ecdsa_key\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,pk_crypto-sha2-512-cert-v01@openssh.com,pk_crypto-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,pk_crypto-sha2-512,pk_crypto-sha2-256,curve_sig-sha2-nistp521,curve_sig-sha2-nistp384,curve_sig-sha2-nistp256",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "ssh_server_hardened",
      "file_name": "ssh_server_hardened.conf",
      "response_time": 3.903872013092041,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 2,
      "false_negatives": 5,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: HostKey /etc/ssh/ssh_host_rsa_key)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: HostKey /etc/ssh/ssh_host_ecdsa_key)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: DSA (Evidence: # HostKey /etc/ssh/ssh_host_dsa_key)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: AES (Evidence: Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "NOT DETECTED",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: Protocol 1 (Evidence: # Protocol 1 - DISABLED (obsolete, insecure))",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The configuration uses RSA, ECDSA, and AES. DSA is disabled. Legacy Protocol 1 is disabled."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "ssl_legacy_banking_configuration",
      "file_name": "ssl_legacy_banking_configuration.conf",
      "response_time": 5.002290725708008,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 5,
      "false_negatives": 5,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 RSA 기반의 암호화 알고리즘 및 키 교환 방식이 사용되고 있습니다. 특히, `SSLCipherSuite` 설정에서 `PublicKey` 키워드는 RSA 기반의 암호화 방식을 나타내며, `CurveKE` 키워드는 ECDHE 기반의 키 교환 방식을 나타냅니다. 또한, 1024비트 RSA 키가 사용되고 있어 보안 강도가 낮습니다. `SSLOpenSSLConfCmd SignatureAlgorithms` 설정에서도 `PublicKey` 키워드가 사용되어 RSA 기반의 서명 알고리즘이 사용되고 있음을 알 수 있습니다. DHParameters 또한 1024비트이므로 취약합니다.",
        "detected_algorithms": [
          "RSA",
          "ECDHE",
          "SHA1",
          "SHA256",
          "SHA384"
        ],
        "recommendations": "RSA 및 ECDHE 기반의 암호화 알고리즘을 양자 내성 암호(PQC)로 대체하고, 1024비트 RSA 키를 2048비트 이상으로 업그레이드해야 합니다. 또한, DH 파라미터도 더 강력한 것으로 교체해야 합니다. `SSLCipherSuite` 설정을 PQC를 지원하는 cipher suite로 변경하고, `SSLOpenSSLConfCmd SignatureAlgorithms` 설정도 PQC를 지원하는 서명 알고리즘으로 변경해야 합니다.",
        "evidence": "SSLCipherSuite PublicKey+BlockCipher256:PublicKey+BlockCipher128:PublicKey+TripleCipher:PublicKey+StreamCipher:CurveKE-PublicKey-BlockCipher256-GCM-SHA384:CurveKE-PublicKey-BlockCipher128-GCM-Hash256:KeyExchange-PublicKey-BlockCipher256-SHA:KeyExchange-PublicKey-BlockCipher128-SHA:StreamCipher-SHA:LEGACY_CIPHER-CBC3-SHA:!aNULL, SSLCertificateFile /etc/ssl/certs/server-pk_crypto-1024.crt, SSLCertificateKeyFile /etc/ssl/private/server-pk_crypto-1024.key, SSLOpenSSLConfCmd SignatureAlgorithms PublicKey+Hash160:PublicKey+Hash256:PublicKey+Hash128:CurveSig+Hash160, SSLOpenSSLConfCmd DHParameters /etc/ssl/dhparam-1024.pem, SSLCertificateFile /etc/ssl/certs/banking-pk_crypto-1024.crt, SSLCertificateKeyFile /etc/ssl/private/banking-pk_crypto-1024.key",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "ssl_legacy_banking_configuration",
      "file_name": "ssl_legacy_banking_configuration.conf",
      "response_time": 5.527342081069946,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 5,
      "false_negatives": 4,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: SSLCertificateFile /etc/ssl/certs/server-pk_crypto-1024.crt, SSLCertificateKeyFile /etc/ssl/private/server-pk_crypto-1024.key, SSLCertificateFile /etc/ssl/certs/banking-pk_crypto-1024.crt, SSLCertificateKeyFile /etc/ssl/private/banking-pk_crypto-1024.key. The filenames suggest RSA certificates with 1024-bit keys.)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: Elliptic Curve (Evidence: SSLCipherSuite CurveKE-PublicKey-BlockCipher256-GCM-SHA384:CurveKE-PublicKey-BlockCipher128-GCM-Hash256 indicates the use of Elliptic Curve Key Exchange algorithms)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: SSLOpenSSLConfCmd DHParameters /etc/ssl/dhparam-1024.pem indicates the use of Diffie-Hellman with 1024-bit parameters)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: Triple DES (Evidence: SSLCipherSuite LEGACY_CIPHER-CBC3-SHA indicates the use of Triple DES, which is considered vulnerable)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: SSLv2/SSLv3 (Evidence: SSLProtocol all -SSLv2 -SSLv3 indicates that SSLv2 and SSLv3 are disabled, which is good. However, the 'all' setting might include other vulnerable protocols if not properly configured with the cipher suites.)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: SSLInsecureRenegotiation (Evidence: SSLInsecureRenegotiation on indicates a deprecated and insecure setting)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "The configuration uses RSA with 1024-bit keys, Diffie-Hellman with 1024-bit parameters, and Triple DES, all of which are considered weak or vulnerable. Insecure renegotiation is enabled. SSLv2 and SSLv3 are disabled."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "telecom_5g_network",
      "file_name": "telecom_5g_network.conf",
      "response_time": 5.224701881408691,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 11,
      "false_negatives": 10,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "설정 파일에서 ECDSA, RSA, Diffie-Hellman 기반의 키 교환 및 서명 알고리즘이 사용되고 있습니다. 구체적으로 CurveSig-P256, PublicKey-3072/4096, EC-K_SIG, sha256WithECDSA, sha1WithRSA, CurveKE-P256, KeyExchange-2048, CurveKE-CurveSig-ARIA256-SHA384, PublicKey-BlockCipher256-SHA 등이 양자 컴퓨팅 공격에 취약합니다. 또한 IKEv2KeyExchange에서 사용되는 KEY_EX-Group-14는 Diffie-Hellman 그룹으로 양자 공격에 취약할 수 있습니다.",
        "detected_algorithms": [
          "ECDSA",
          "RSA",
          "Diffie-Hellman",
          "CurveSig-P256",
          "PublicKey-3072",
          "PublicKey-4096",
          "EC-K_SIG",
          "sha256WithECDSA",
          "sha1WithRSA",
          "CurveKE-P256",
          "KeyExchange-2048",
          "CurveKE-CurveSig-ARIA256-SHA384",
          "KEY_EX-Group-14"
        ],
        "recommendations": "양자내성암호(PQC)로의 전환을 권장합니다. ECDSA, RSA, Diffie-Hellman 기반의 알고리즘을 PQC 알고리즘으로 대체하고, 하이브리드 방식을 고려하여 기존 시스템과의 호환성을 유지하면서 점진적으로 전환하는 것이 좋습니다. 특히, 인증서, 키 교환, 암호화 알고리즘 설정을 PQC 알고리즘으로 업데이트해야 합니다. K_CIPHER 계열의 알고리즘에 대한 상세 분석이 필요합니다.",
        "evidence": "telecom_5g_network.conf 파일에서 AuthenticationMethod, SubscriberAuth, HomeNetworkAuth, PrimaryKeyExchange, SecondaryKeyExchange, LegacyKeyExchange, BaseStationCert, CoreNetworkCert, MMECertificate, CertSignature, LegacySignature, RoamingAuth, FallbackRoaming, ManagementCipher, LegacyManagement, IKEv2KeyExchange 설정에서 취약한 알고리즘이 사용되고 있습니다.",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "telecom_5g_network",
      "file_name": "telecom_5g_network.conf",
      "response_time": 4.907663106918335,
      "json_valid": true,
      "true_positives": 3,
      "false_positives": 6,
      "false_negatives": 9,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: LegacySignature=sha1WithRSA)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "DETECTED: ECDSA (Evidence: CertSignature=sha256WithECDSA)",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "NOT DETECTED",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "DETECTED: ARIA (Evidence: ManagementCipher=CurveKE-CurveSig-ARIA256-SHA384)",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "NOT DETECTED",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLSv1.3 (Evidence: ManagementProtocol=TLSv1.3)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "DETECTED: RSA (Evidence: CoreNetworkCert=PublicKey-4096)",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "DETECTED: EC-K_SIG (Evidence: Details=Device authenticated using EC-K_SIG, encrypted with K_CIPHER_2-128)",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "DETECTED: RSA (Evidence: FallbackRoaming=PublicKey-2048)",
          "korean_domestic_cryptographic_standard_compliance_configurations": "DETECTED: K_CIPHER_2 (Evidence: KoreanCipherSuite=K_CIPHER_2-GCM-128)",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "DETECTED: RSA (Evidence: 2024-05-20 14:40:00 WARNING: KeyExchange-2048 and PublicKey-2048 vulnerable to quantum attacks)",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.95,
        "summary": "Identified RSA, ECDSA, ARIA, TLSv1.3, EC-K_SIG and various Korean ciphers (K_CIPHERs) in the configuration and logs. RSA with 2048 and 4096 key sizes are flagged as vulnerable. ECDSA is used for certificate signatures. ARIA is used in management cipher suites. EC-K_SIG is used for device authentication. TLSv1.3 is used for management protocol."
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "tls_cipher_negotiation_warnings",
      "file_name": "tls_cipher_negotiation_warnings.log",
      "response_time": 6.035214900970459,
      "json_valid": true,
      "true_positives": 0,
      "false_positives": 6,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 여러 가지 양자 컴퓨팅에 취약한 암호화 알고리즘 및 설정이 발견되었습니다. 여기에는 1024비트 RSA 키, TripleCipher, StreamCipher, Hash128, Hash-160, P-256 커브, 그리고 1024비트 키 교환 파라미터가 포함됩니다. 또한, 레거시 PRF와 Hash-160 인증서 서명이 사용되고 있어 보안 취약점이 존재합니다.",
        "detected_algorithms": [
          "RSA-1024",
          "TripleCipher",
          "StreamCipher",
          "Hash128",
          "Hash-160",
          "P-256 (secp256r1)"
        ],
        "recommendations": "양자 내성 암호(PQC)로의 전환을 적극적으로 고려해야 합니다. RSA 키 크기를 2048비트 이상으로 업그레이드하고, TripleCipher 및 StreamCipher 사용을 중단하며, Hash128 및 Hash-160 대신 SHA-256 이상의 해시 함수를 사용해야 합니다. 또한, P-256 커브 대신 양자 내성 커브를 사용하고, 레거시 PRF를 더 강력한 PRF로 교체해야 합니다.",
        "evidence": "2024-09-19 10:00:02 [INFO] Loading PublicKey-1024 server certificate from /etc/ssl/server.crt\n2024-09-19 10:00:03 [WARN] PublicKey key size 1024 bits - consider upgrading to 2048+ bits\n2024-09-19 10:00:06 [WARN] TripleCipher cipher suite enabled - known to be vulnerable\n2024-09-19 10:00:08 [ERROR] StreamCipher stream cipher detected - cryptographically broken\n2024-09-19 10:00:10 [WARN] Hash128 hash function is collision-vulnerable\n2024-09-19 10:00:12 [WARN] Hash-160 is deprecated due to collision vulnerabilities\n2024-09-19 10:00:13 [INFO] CurveSig P-256 signature verification enabled\n2024-09-19 10:00:14 [INFO] CURVE_KE key exchange using secp256r1 curve\n2024-09-19 10:00:15 [INFO] KEY_EX key exchange using 1024-bit parameters\n2024-09-19 10:00:16 [WARN] KEY_EX-1024 parameters insufficient for long-term security\n2024-09-19 10:01:03 [INFO] Session key derived using Hash-160 PRF\n2024-09-19 10:01:04 [WARN] Legacy PRF in use - consider upgrading to Hash-256\n2024-09-19 10:02:00 [INFO] Certificate verification using PublicKey-Hash160 signature\n2024-09-19 10:02:01 [WARN] Hash-160 certificate signatures are deprecated",
        "confidence_score": 0.95,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": true,
      "agent_type": "logs_config",
      "test_id": "vpn_server_runtime",
      "file_name": "vpn_server_runtime.log",
      "response_time": 3.296950101852417,
      "json_valid": true,
      "true_positives": 1,
      "false_positives": 1,
      "false_negatives": 2,
      "raw_response": {
        "is_pqc_vulnerable": true,
        "vulnerability_details": "로그 파일에서 TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 cipher suite가 사용된 것을 확인했습니다. DHE-RSA는 양자 컴퓨터에 취약한 키 교환 알고리즘을 사용합니다. 또한, 서버 인증서의 공개 키 알고리즘이 modular arithmetic (RSA)이며, 이는 양자 공격에 취약합니다.",
        "detected_algorithms": [
          "DHE-RSA",
          "RSA"
        ],
        "recommendations": "DHE-RSA 및 RSA를 사용하는 cipher suite를 비활성화하고, 양자 내성 암호(PQC)를 지원하는 cipher suite로 전환해야 합니다. 서버 인증서를 PQC 알고리즘 기반으로 교체하는 것을 고려해야 합니다.",
        "evidence": "2025-01-15 08:15:23.789 [DEBUG] CipherSelector::EvaluateSuites() - Selected: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n2025-01-15 08:15:23.645 [TRACE] PublicKeyExtractor::GetKeyInfo() - Public key algorithm: modular arithmetic, key size: 2048 bits",
        "confidence_score": 0.9,
        "orchestrator_summary": null
      }
    },
    {
      "base_model": "gemini-2.0-flash",
      "with_rag": false,
      "agent_type": "logs_config",
      "test_id": "vpn_server_runtime",
      "file_name": "vpn_server_runtime.log",
      "response_time": 4.542682647705078,
      "json_valid": true,
      "true_positives": 2,
      "false_positives": 2,
      "false_negatives": 1,
      "raw_response": {
        "agent_type": "Configuration and Logs Vulnerable Crypto Analysis Agent",
        "analysis_results": {
          "rsa_certificate_configurations_and_key_specifications_in_config_files": "DETECTED: RSA (Evidence: CipherSelector::EvaluateSuites() - Selected: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, PublicKeyExtractor::GetKeyInfo() - Public key algorithm: modular arithmetic, key size: 2048 bits)",
          "elliptic_curve_cipher_suite_configurations_and_ecc_parameter_settings": "NOT DETECTED",
          "discrete_logarithm_based_algorithm_configurations_dsa_dh_elgamal": "DETECTED: Diffie-Hellman (Evidence: DHKeyExchange::LoadParameters() - Loading Diffie-Hellman group parameters)",
          "korean_algorithm_configuration_parameters_seed_aria_hight_lea_kcdsa_has_160_lsh": "NOT DETECTED",
          "symmetric_cipher_configurations_vulnerable_to_quantum_attacks": "DETECTED: AES (Evidence: CipherSelector::EvaluateSuites() - Selected: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, BlockCipher::Initialize() - BlockCipher-256-CBC initialized with 256-bit key)",
          "ssl_tls_configuration_with_quantum_vulnerable_cipher_suites_and_protocols": "DETECTED: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (Evidence: CipherSelector::EvaluateSuites() - Selected: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256)",
          "cryptographic_library_configuration_and_algorithm_selection_settings": "NOT DETECTED",
          "certificate_authority_and_pki_configurations_using_vulnerable_algorithms": "NOT DETECTED",
          "log_entries_indicating_quantum_vulnerable_cryptographic_operations": "NOT DETECTED",
          "authentication_and_key_management_system_configurations": "NOT DETECTED",
          "legacy_cryptographic_protocol_configurations_and_deprecated_settings": "NOT DETECTED",
          "korean_domestic_cryptographic_standard_compliance_configurations": "NOT DETECTED",
          "error_patterns_and_warnings_related_to_vulnerable_crypto_implementations": "NOT DETECTED",
          "migration_logs_showing_use_of_quantum_vulnerable_to_quantum_resistant_transitions": "NOT DETECTED"
        },
        "confidence_score": 0.9,
        "summary": "Detected RSA, Diffie-Hellman, and AES-256-CBC which are vulnerable to quantum attacks. The TLS cipher suite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 is also detected as vulnerable."
      }
    }
  ]
}